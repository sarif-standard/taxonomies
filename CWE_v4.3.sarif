{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Standard Taxnomies"
        }
      },
      "columnKind": "utf16CodeUnits",
      "taxonomies": [
        {
          "guid": "FFC64C90-42B6-44CE-8BEB-F6B7DAE649E5",
          "name": "CWE",
          "organization": "MITRE",
          "shortDescription": {
            "text": "The MITRE Common Weakness Enumeration"
          },
          "version": "4.3",
          "releaseDateUtc": "2020-12-10",
          "downloadUri": "https://cwe.mitre.org/data/xml/cwec_v4.3.xml.zip",
          "informationUri": "https://cwe.mitre.org/data/published/cwe_v4.3.pdf",
          "taxa": [
            {
              "id": "CWE-5",
              "name": "J2EE Misconfiguration: Data Transmission Without Encryption",
              "shortDescription": {
                "text": "Information sent over a network can be compromised while in transit. An attacker may be able to read or modify the contents if the data are sent in plaintext or are weakly encrypted."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-319",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-6",
              "name": "J2EE Misconfiguration: Insufficient Session-ID Length",
              "shortDescription": {
                "text": "The J2EE application is configured to use an insufficient session ID length."
              },
              "fullDescription": {
                "text": "If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-334",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-7",
              "name": "J2EE Misconfiguration: Missing Custom Error Page",
              "shortDescription": {
                "text": "The default error page of a web application should not display sensitive information about the software system."
              },
              "fullDescription": {
                "text": "A Web application must define a default error page for 4xx errors (e.g. 404), 5xx (e.g. 500) errors and catch java.lang.Throwable exceptions to prevent attackers from mining information from the application container's built-in error response. When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-756",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-8",
              "name": "J2EE Misconfiguration: Entity Bean Declared Remote",
              "shortDescription": {
                "text": "When an application exposes a remote interface for an entity bean, it might also expose methods that get or set the bean's data. These methods could be leveraged to read sensitive information, or to change data in ways that violate the application's expectations, potentially leading to other vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-9",
              "name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods",
              "shortDescription": {
                "text": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the software system."
              },
              "fullDescription": {
                "text": "If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-266",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-11",
              "name": "ASP.NET Misconfiguration: Creating Debug Binary",
              "shortDescription": {
                "text": "Debugging messages help attackers learn about the system and plan a form of attack."
              },
              "fullDescription": {
                "text": "ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-489",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-12",
              "name": "ASP.NET Misconfiguration: Missing Custom Error Page",
              "shortDescription": {
                "text": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-756",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-13",
              "name": "ASP.NET Misconfiguration: Password in Configuration File",
              "shortDescription": {
                "text": "Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource making them an easy target for attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-260",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-14",
              "name": "Compiler Removal of Code to Clear Buffers",
              "shortDescription": {
                "text": "Sensitive memory is cleared according to the source code, but compiler optimizations leave the memory untouched when it is not read from again, aka dead store removal."
              },
              "fullDescription": {
                "text": "This compiler optimization error occurs when: 1. Secret data are stored in memory. 2. The secret data are scrubbed from memory by overwriting its contents. 3. The source code is compiled using an optimizing compiler, which identifies and removes the function that overwrites the contents as a dead store because the memory is not used subsequently."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-733",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-15",
              "name": "External Control of System or Configuration Setting",
              "shortDescription": {
                "text": "One or more system settings or configuration elements can be externally controlled by a user."
              },
              "fullDescription": {
                "text": "Allowing external control of system settings can disrupt service or cause an application to behave in unexpected, and potentially malicious ways."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-20",
              "name": "Improper Input Validation",
              "shortDescription": {
                "text": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly."
              },
              "fullDescription": {
                "text": "Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: raw data - strings, numbers, parameters, file contents, etc. metadata - information about the raw data, such as headers or size Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Many properties of raw data or metadata may need to be validated upon entry into the code, such as: specified quantities such as size, length, frequency, price, rate, number of operations, time, etc. implied or derived quantities, such as the actual size of a file instead of a specified size indexes, offsets, or positions into more complex data structures symbolic keys or other elements into hash tables, associative arrays, etc. well-formedness, i.e. syntactic correctness - compliance with expected syntax lexical token correctness - compliance with rules for what is treated as a token specified or derived type - the actual type of the input (or what the input appears to be) consistency - between individual data elements, between raw data and metadata, between references, etc. conformance to domain-specific rules, e.g. business logic equivalence - ensuring that equivalent inputs are treated the same authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that input validation has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name O'Reilly would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the ' apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-770",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-22",
              "name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the software does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory."
              },
              "fullDescription": {
                "text": "Many file operations are intended to take place within a restricted directory. By using special elements such as .. and / separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the ../ sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as /usr/local/bin, which may also be useful in accessing unexpected files. This is referred to as absolute path traversal. In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to widen the scope of attack. For example, the software may add .txt to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-23",
              "name": "Relative Path Traversal",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as .. that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-24",
              "name": "Path Traversal: '../filedir'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize ../ sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The ../ manipulation is the canonical manipulation for operating systems that use / as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which / is supported but not the primary separator, such as Windows, which uses but can also accept /."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-25",
              "name": "Path Traversal: '/../filedir'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /../ sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. Sometimes a program checks for ../ at the beginning of the input, so a /../ can bypass that check."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-26",
              "name": "Path Traversal: '/dir/../filename'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize /dir/../filename sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for ../ at the beginning of the input, so a /../ can bypass that check."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-27",
              "name": "Path Traversal: 'dir/../../filename'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize multiple internal ../ sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'directory/../../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one ../ sequence, so multiple ../ can bypass that check. Alternately, this manipulation could be used to bypass a check for ../ at the beginning of the pathname, moving up more than one directory level."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-28",
              "name": "Path Traversal: '..filedir'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize .. sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '..' manipulation is the canonical manipulation for operating systems that use as directory separators, such as Windows. However, it is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-29",
              "name": "Path Traversal: '..filename'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-25, except using instead of /. Sometimes a program checks for .. at the beginning of the input, so a .. can bypass that check. It is also useful for bypassing path traversal protection schemes that only assume that the / separator is valid."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-30",
              "name": "Path Traversal: 'dir..filename'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir..filename' (leading backslash dot dot) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. This is similar to CWE-26, except using instead of /. The 'dir..filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for .. at the beginning of the input, so a .. can bypass that check."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-31",
              "name": "Path Traversal: 'dir....filename'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize 'dir....filename' (multiple internal backslash dot dot) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The 'dir....filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only removes one .. sequence, so multiple .. can bypass that check. Alternately, this manipulation could be used to bypass a check for .. at the beginning of the pathname, moving up more than one directory level."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-32",
              "name": "Path Traversal: '...' (Triple Dot)",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '...' (triple dot) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '...' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to .... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-33",
              "name": "Path Traversal: '....' (Multiple Dot)",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....' (multiple dot) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....' manipulation is useful for bypassing some path traversal protection schemes. On some Windows systems, it is equivalent to ...... and might bypass checks that assume only two dots are valid. Incomplete filtering, such as removal of ./ sequences, can ultimately produce valid .. sequences due to a collapse into unsafe value (CWE-182)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-34",
              "name": "Path Traversal: '....//'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '....//' (doubled dot dot slash) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '....//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then ....// can collapse into the ../ unsafe value (CWE-182). It could also be useful when .. is removed, if the operating system treats // and / as equivalent."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-35",
              "name": "Path Traversal: '.../...//'",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize '.../...//' (doubled triple dot slash) sequences that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory. The '.../...//' manipulation is useful for bypassing some path traversal protection schemes. If ../ is filtered in a sequential fashion, as done by some regular expression engines, then .../...// can collapse into the ../ unsafe value (CWE-182). Removing the first ../ yields ....//; the second removal yields ../. Depending on the algorithm, the software could be susceptible to CWE-34 but not CWE-35, or vice versa."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-23",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-36",
              "name": "Absolute Path Traversal",
              "shortDescription": {
                "text": "The software uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as /abs/path that can resolve to a location that is outside of that directory."
              },
              "fullDescription": {
                "text": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-37",
              "name": "Path Traversal: '/absolute/pathname/here'",
              "shortDescription": {
                "text": "A software system that accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-36",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-160",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-38",
              "name": "Path Traversal: 'absolutepathnamehere'",
              "shortDescription": {
                "text": "A software system that accepts input in the form of a backslash absolute path ('absolutepathnamehere') without appropriate validation can allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-36",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-39",
              "name": "Path Traversal: 'C:dirname'",
              "shortDescription": {
                "text": "An attacker can inject a drive letter or Windows volume letter ('C:dirname') into a software system to potentially redirect access to an unintended location or arbitrary file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-36",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-40",
              "name": "Path Traversal: 'UNCsharename' (Windows UNC Share)",
              "shortDescription": {
                "text": "An attacker can inject a Windows UNC share ('UNCsharename') into a software system to potentially redirect access to an unintended location or arbitrary file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-36",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-41",
              "name": "Improper Resolution of Path Equivalence",
              "shortDescription": {
                "text": "The system or application is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object."
              },
              "fullDescription": {
                "text": "Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-42",
              "name": "Path Equivalence: 'filename.' (Trailing Dot)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of trailing dot ('filedir.') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-162",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-43",
              "name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-42",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-163",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-44",
              "name": "Path Equivalence: 'file.name' (Internal Dot)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of internal dot ('file.ordir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-45",
              "name": "Path Equivalence: 'file...name' (Multiple Internal Dot)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-44",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-165",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-46",
              "name": "Path Equivalence: 'filename ' (Trailing Space)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of trailing space ('filedir ') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-162",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-289",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-47",
              "name": "Path Equivalence: ' filename' (Leading Space)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of leading space (' filedir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-48",
              "name": "Path Equivalence: 'file name' (Internal Whitespace)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of internal space ('file(SPACE)name') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-49",
              "name": "Path Equivalence: 'filename/' (Trailing Slash)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of trailing slash ('filedir/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-162",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-50",
              "name": "Path Equivalence: '//multiple/leading/slash'",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple leading slash ('//multiple/leading/slash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-161",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-51",
              "name": "Path Equivalence: '/multiple//internal/slash'",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple internal slash ('/multiple//internal/slash/') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-52",
              "name": "Path Equivalence: '/multiple/trailing/slash//'",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple trailing slash ('/multiple/trailing/slash//') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-163",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-289",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-53",
              "name": "Path Equivalence: 'multipleinternalbackslash'",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of multiple internal backslash ('multipletrailingslash') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-165",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-54",
              "name": "Path Equivalence: 'filedir' (Trailing Backslash)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of trailing backslash ('filedir') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-162",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-55",
              "name": "Path Equivalence: '/./' (Single Dot Directory)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of single dot directory exploit ('/./') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-56",
              "name": "Path Equivalence: 'filedir*' (Wildcard)",
              "shortDescription": {
                "text": "A software system that accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-155",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-57",
              "name": "Path Equivalence: 'fakedir/../realdir/filename'",
              "shortDescription": {
                "text": "The software contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-58",
              "name": "Path Equivalence: Windows 8.3 Filename",
              "shortDescription": {
                "text": "The software contains a protection mechanism that restricts access to a long filename on a Windows operating system, but the software does not properly restrict access to the equivalent short 8.3 filename."
              },
              "fullDescription": {
                "text": "On later Windows operating systems, a file can have a long name and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These 8.3 filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-59",
              "name": "Improper Link Resolution Before File Access ('Link Following')",
              "shortDescription": {
                "text": "The software attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-61",
              "name": "UNIX Symbolic Link (Symlink) Following",
              "shortDescription": {
                "text": "The software, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files."
              },
              "fullDescription": {
                "text": "A software system that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-340",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-386",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                }
              ]
            },
            {
              "id": "CWE-62",
              "name": "UNIX Hard Link",
              "shortDescription": {
                "text": "The software, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files."
              },
              "fullDescription": {
                "text": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-64",
              "name": "Windows Shortcut Following (.LNK)",
              "shortDescription": {
                "text": "The software, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files."
              },
              "fullDescription": {
                "text": "The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-65",
              "name": "Windows Hard Link",
              "shortDescription": {
                "text": "The software, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the software to operate on unauthorized files."
              },
              "fullDescription": {
                "text": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-66",
              "name": "Improper Handling of File Names that Identify Virtual Resources",
              "shortDescription": {
                "text": "The product does not handle or incorrectly handles a file name that identifies a virtual resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file."
              },
              "fullDescription": {
                "text": "Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-67",
              "name": "Improper Handling of Windows Device Names",
              "shortDescription": {
                "text": "The software constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file."
              },
              "fullDescription": {
                "text": "Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A software system that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-66",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-69",
              "name": "Improper Handling of Windows ::DATA Alternate Data Stream",
              "shortDescription": {
                "text": "The software does not properly prevent access to, or detect usage of, alternate data streams (ADS)."
              },
              "fullDescription": {
                "text": "An attacker can use an ADS to hide information about a file (e.g. size, the name of the process) from a system or file browser tools such as Windows Explorer and 'dir' at the command line utility. Alternately, the attacker might be able to bypass intended access restrictions for the associated data fork."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-66",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-71",
              "name": "DEPRECATED: Apple '.DS_Store'",
              "shortDescription": {
                "text": "This entry has been deprecated as it represents a specific observed example of a UNIX Hard Link weakness type rather than its own individual weakness type. Please refer to CWE-62."
              }
            },
            {
              "id": "CWE-72",
              "name": "Improper Handling of Apple HFS+ Alternate Data Stream Path",
              "shortDescription": {
                "text": "The software does not properly handle special paths that may identify the data or resource fork of a file on the HFS+ file system."
              },
              "fullDescription": {
                "text": "If the software chooses actions to take based on the file name, then if an attacker provides the data or resource fork, the software may take unexpected actions. Further, if the software intends to restrict access to a file, then an attacker might still be able to bypass intended access restrictions by requesting the data or resource fork for that file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-66",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-73",
              "name": "External Control of File Name or Path",
              "shortDescription": {
                "text": "The software allows user input to control or influence paths or file names that are used in filesystem operations."
              },
              "fullDescription": {
                "text": "This could allow an attacker to access or modify system files or other files that are critical to the application. Path manipulation errors occur when the following two conditions are met: 1. An attacker can specify a path used in an operation on the filesystem. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-98",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-434",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-74",
              "name": "Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of a command, data structure, or record using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify how it is parsed or interpreted when it is sent to a downstream component."
              },
              "fullDescription": {
                "text": "Software has certain assumptions about what constitutes data and control respectively. It is the lack of verification of these assumptions for user-controlled input that leads to injection problems. Injection problems encompass a wide variety of issues -- all mitigated in very different ways and usually attempted in order to alter the control flow of the process. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-75",
              "name": "Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)",
              "shortDescription": {
                "text": "The software does not adequately filter user-controlled input for special elements with control implications."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-76",
              "name": "Improper Neutralization of Equivalent Special Elements",
              "shortDescription": {
                "text": "The software properly neutralizes certain special elements, but it improperly neutralizes equivalent special elements."
              },
              "fullDescription": {
                "text": "The software may have a fixed list of special characters it believes is complete. However, there may be alternate encodings, or representations that also have the same meaning. For example, the software may filter out a leading slash (/) to prevent absolute path names, but does not account for a tilde (~) followed by a user name, which on some *nix systems could be expanded to an absolute pathname. Alternately, the software might filter a dangerous -e command-line switch when calling an external program, but it might not account for --exec or other switches that have the same semantics."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-75",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-77",
              "name": "Improper Neutralization of Special Elements used in a Command ('Command Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component."
              },
              "fullDescription": {
                "text": "Command injection vulnerabilities typically occur when: 1. Data enters the application from an untrusted source. 2. The data is part of a string that is executed as a command by the application. 3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have. Command injection is a common problem with wrapper programs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-78",
              "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component."
              },
              "fullDescription": {
                "text": "This could allow attackers to execute unexpected, dangerous commands directly on the operating system. This weakness can lead to a vulnerability in environments in which the attacker does not have direct access to the operating system, such as in web applications. Alternately, if the weakness occurs in a privileged program, it could allow the attacker to specify commands that normally would not be accessible, or to call alternate commands with privileges that the attacker does not have. The problem is exacerbated if the compromised process does not follow the principle of least privilege, because the attacker-controlled commands may run with special system privileges that increases the amount of damage. There are at least two subtypes of OS command injection: The application intends to execute a single, fixed program that is under its own control. It intends to use externally-supplied inputs as arguments to that program. For example, the program might use system(nslookup [HOSTNAME]) to run nslookup and allow the user to supply a HOSTNAME, which is used as an argument. Attackers cannot prevent nslookup from executing. However, if the program does not remove command separators from the HOSTNAME argument, attackers could place the separators into the arguments, which allows them to execute their own program after nslookup has finished executing. The application accepts an input that it uses to fully select which program to run, as well as which commands to use. The application simply redirects this entire command to the operating system. For example, the program might use exec([COMMAND]) to execute the [COMMAND] that was supplied by the user. If the COMMAND is under attacker control, then the attacker can execute arbitrary commands or programs. If the command is being executed using functions like exec() and CreateProcess(), the attacker might not be able to combine multiple commands together in the same line. From a weakness standpoint, these variants represent distinct programmer errors. In the first variant, the programmer clearly intends that input from untrusted parties will be part of the arguments in the command to be executed. In the second variant, the programmer does not intend for the command to be accessible to any untrusted party, but the programmer probably has not accounted for alternate ways in which malicious attackers can provide input."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-77",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-88",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-79",
              "name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users."
              },
              "fullDescription": {
                "text": "Cross-site scripting (XSS) vulnerabilities occur when: 1. Untrusted data enters a web application, typically from a web request. 2. The web application dynamically generates a web page that contains this untrusted data. 3. During page generation, the application does not prevent the data from containing content that is executable by a web browser, such as JavaScript, HTML tags, HTML attributes, mouse events, Flash, ActiveX, etc. 4. A victim visits the generated web page through a web browser, which contains malicious script that was injected using the untrusted data. 5. Since the script comes from a web page that was sent by the web server, the victim's web browser executes the malicious script in the context of the web server's domain. 6. This effectively violates the intention of the web browser's same-origin policy, which states that scripts in one domain should not be able to access resources or run code in a different domain. There are three main kinds of XSS: Type 1: Reflected XSS (or Non-Persistent) - The server reads data directly from the HTTP request and reflects it back in the HTTP response. Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content to a vulnerable web application, which is then reflected back to the victim and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the victim, the content is executed by the victim's browser. Type 2: Stored XSS (or Persistent) - The application stores dangerous data in a database, message forum, visitor log, or other trusted data store. At a later time, the dangerous data is subsequently read back into the application and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. For example, the attacker might inject XSS into a log message, which might not be handled properly when an administrator views the logs. Type 0: DOM-Based XSS - In DOM-based XSS, the client performs the injection of XSS into the page; in the other types, the server performs the injection. DOM-based XSS generally involves server-controlled, trusted script that is sent to the client, such as Javascript that performs sanity checks on a form before the user submits it. If the server-supplied script processes user-supplied data and then injects it back into the web page (such as with dynamic HTML), then DOM-based XSS is possible. Once the malicious script is injected, the attacker can perform a variety of malicious activities. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. Phishing attacks could be used to emulate trusted web sites and trick the victim into entering a password, allowing the attacker to compromise the victim's account on that web site. Finally, the script could exploit a vulnerability in the web browser itself possibly taking over the victim's machine, sometimes referred to as drive-by hacking. In many cases, the attack can be launched without the victim even being aware of it. Even with careful users, attackers frequently use a variety of methods to encode the malicious portion of the attack, such as URL encoding or Unicode, so the request looks less suspicious."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-494",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-352",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-80",
              "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters such as <, >, and & that could be interpreted as web-scripting elements when they are sent to a downstream component that processes web pages."
              },
              "fullDescription": {
                "text": "This may allow such characters to be treated as control characters, which are executed client-side in the context of the user's session. Although this can be classified as an injection problem, the more pertinent issue is the improper conversion of such special characters to respective context-appropriate entities before displaying them to the user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-81",
              "name": "Improper Neutralization of Script in an Error Message Web Page",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special characters that could be interpreted as web-scripting elements when they are sent to an error page."
              },
              "fullDescription": {
                "text": "Error pages may include customized 403 Forbidden or 404 Not Found pages. When an attacker can trigger an error that contains script syntax within the attacker's input, then cross-site scripting attacks may be possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-390",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-82",
              "name": "Improper Neutralization of Script in Attributes of IMG Tags in a Web Page",
              "shortDescription": {
                "text": "The web application does not neutralize or incorrectly neutralizes scripting elements within attributes of HTML IMG tags, such as the src attribute."
              },
              "fullDescription": {
                "text": "Attackers can embed XSS exploits into the values for IMG attributes (e.g. SRC) that is streamed and then executed in a victim's browser. Note that when the page is loaded into a user's browsers, the exploit will automatically execute."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-83",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-83",
              "name": "Improper Neutralization of Script in Attributes in a Web Page",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes javascript: or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-84",
              "name": "Improper Neutralization of Encoded URI Schemes in a Web Page",
              "shortDescription": {
                "text": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-85",
              "name": "Doubled Character XSS Manipulations",
              "shortDescription": {
                "text": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-86",
              "name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers."
              },
              "fullDescription": {
                "text": "Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the software may attempt to remove a javascript: URI scheme, but a java%00script: URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-184",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-87",
              "name": "Improper Neutralization of Alternate XSS Syntax",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-88",
              "name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')",
              "shortDescription": {
                "text": "The software constructs a string for a command to executed by a separate component in another control sphere, but it does not properly delimit the intended arguments, options, or switches within that command string."
              },
              "fullDescription": {
                "text": "When creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-77",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-89",
              "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component."
              },
              "fullDescription": {
                "text": "Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data. This can be used to alter query logic to bypass security checks, or to insert additional statements that modify the back-end database, possibly including execution of system commands. SQL injection has become a common issue with database-driven web sites. The flaw is easily detected, and easily exploited, and as such, any site or software package with even a minimal user base is likely to be subject to an attempted attack of this kind. This flaw depends on the fact that SQL makes no real distinction between the control and data planes."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-943",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-90",
              "name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-943",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-91",
              "name": "XML Injection (aka Blind XPath Injection)",
              "shortDescription": {
                "text": "The software does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system."
              },
              "fullDescription": {
                "text": "Within XML, special elements could include reserved words or characters such as <, >, , and &, which could then be used to add new data or modify XML syntax."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-92",
              "name": "DEPRECATED: Improper Sanitization of Custom Special Characters",
              "shortDescription": {
                "text": "This entry has been deprecated. It originally came from PLOVER, which sometimes defined other and miscellaneous categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping."
              }
            },
            {
              "id": "CWE-93",
              "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')",
              "shortDescription": {
                "text": "The software uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-117",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-94",
              "name": "Improper Control of Generation of Code ('Code Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment."
              },
              "fullDescription": {
                "text": "When software allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the software. Such an alteration could lead to arbitrary code execution. Injection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-913",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-95",
              "name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. eval)."
              },
              "fullDescription": {
                "text": "This may allow an attacker to execute arbitrary code, or at least modify what code can be executed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-94",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-96",
              "name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-94",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-97",
              "name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page",
              "shortDescription": {
                "text": "The software generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-96",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-98",
              "name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')",
              "shortDescription": {
                "text": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in require, include, or similar functions."
              },
              "fullDescription": {
                "text": "In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the software will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-829",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-94",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-426",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-99",
              "name": "Improper Control of Resource Identifiers ('Resource Injection')",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control."
              },
              "fullDescription": {
                "text": "A resource injection issue occurs when the following two conditions are met: An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server. This may enable an attacker to access or modify otherwise protected system resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-73",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-102",
              "name": "Struts: Duplicate Validation Forms",
              "shortDescription": {
                "text": "The application uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect."
              },
              "fullDescription": {
                "text": "If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-694",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-103",
              "name": "Struts: Incomplete validate() Method Definition",
              "shortDescription": {
                "text": "The application has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate()."
              },
              "fullDescription": {
                "text": "If you do not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-104",
              "name": "Struts: Form Bean Does Not Extend Validation Class",
              "shortDescription": {
                "text": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-105",
              "name": "Struts: Form Field Without Validator",
              "shortDescription": {
                "text": "The application has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation."
              },
              "fullDescription": {
                "text": "Omitting validation for even a single input field may give attackers the leeway they need to compromise the application. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-106",
              "name": "Struts: Plug-in Framework not in Use",
              "shortDescription": {
                "text": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation."
              },
              "fullDescription": {
                "text": "Unchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-107",
              "name": "Struts: Unused Validation Form",
              "shortDescription": {
                "text": "An unused validation form indicates that validation logic is not up-to-date."
              },
              "fullDescription": {
                "text": "It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-108",
              "name": "Struts: Unvalidated Action Form",
              "shortDescription": {
                "text": "Every Action Form must have a corresponding validation form."
              },
              "fullDescription": {
                "text": "If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-109",
              "name": "Struts: Validator Turned Off",
              "shortDescription": {
                "text": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-110",
              "name": "Struts: Validator Without Form Field",
              "shortDescription": {
                "text": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date."
              },
              "fullDescription": {
                "text": "It is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-111",
              "name": "Direct Use of Unsafe JNI",
              "shortDescription": {
                "text": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java."
              },
              "fullDescription": {
                "text": "Many safety features that programmers may take for granted simply do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-112",
              "name": "Missing XML Validation",
              "shortDescription": {
                "text": "The software accepts XML from an untrusted source but does not validate the XML against the proper schema."
              },
              "fullDescription": {
                "text": "Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1286",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-113",
              "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Response Splitting')",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers."
              },
              "fullDescription": {
                "text": "Including unvalidated data in an HTTP header allows an attacker to specify the entirety of the HTTP response rendered by the browser. When an HTTP request contains unexpected CR (carriage return, also given by %0d or r) and LF (line feed, also given by %0a or n) characters the server may respond with an output stream that is interpreted as two different HTTP responses (instead of one). An attacker can control the second response and mount attacks such as cross-site scripting and cache poisoning attacks. HTTP response splitting weaknesses may be present when: Data enters a web application through an untrusted source, most frequently an HTTP request. The data is included in an HTTP response header sent to a web user without being validated for malicious characters."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-93",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-114",
              "name": "Process Control",
              "shortDescription": {
                "text": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker."
              },
              "fullDescription": {
                "text": "Process control vulnerabilities take two forms: 1. An attacker can change the command that the program executes: the attacker explicitly controls what the command is. 2. An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means. Process control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-73",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-115",
              "name": "Misinterpretation of Input",
              "shortDescription": {
                "text": "The software misinterprets an input, whether from an attacker or another product, in a security-relevant fashion."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-116",
              "name": "Improper Encoding or Escaping of Output",
              "shortDescription": {
                "text": "The software prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved."
              },
              "fullDescription": {
                "text": "Improper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead. Most software follows a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, GET /index.html HTTP/1.1 is a structured message containing a command (GET) with a single argument (/index.html) and metadata about which protocol version is being used (HTTP/1.1). If an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-117",
              "name": "Improper Output Neutralization for Logs",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes output that is written to logs."
              },
              "fullDescription": {
                "text": "This can allow an attacker to forge log entries or inject malicious content into logs. Log forging vulnerabilities occur when: Data enters an application from an untrusted source. The data is written to an application or system log file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-116",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-118",
              "name": "Incorrect Access of Indexable Resource ('Range Error')",
              "shortDescription": {
                "text": "The software does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-119",
              "name": "Improper Restriction of Operations within the Bounds of a Memory Buffer",
              "shortDescription": {
                "text": "The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer."
              },
              "fullDescription": {
                "text": "Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data. As a result, an attacker may be able to execute arbitrary code, alter the intended control flow, read sensitive information, or cause the system to crash."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-118",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-120",
              "name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')",
              "shortDescription": {
                "text": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow."
              },
              "fullDescription": {
                "text": "A buffer overflow condition exists when a program attempts to put more data in a buffer than it can hold, or when a program attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the classic case in which the program copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-121",
              "name": "Stack-based Buffer Overflow",
              "shortDescription": {
                "text": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-788",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-122",
              "name": "Heap-based Buffer Overflow",
              "shortDescription": {
                "text": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc()."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-788",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-123",
              "name": "Write-what-where Condition",
              "shortDescription": {
                "text": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-124",
              "name": "Buffer Underwrite ('Buffer Underflow')",
              "shortDescription": {
                "text": "The software writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer."
              },
              "fullDescription": {
                "text": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-786",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-125",
              "name": "Out-of-bounds Read",
              "shortDescription": {
                "text": "The software reads data past the end, or before the beginning, of the intended buffer."
              },
              "fullDescription": {
                "text": "Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash. A crash can occur when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string. The expected sentinel might not be located in the out-of-bounds memory, causing excessive data to be read, leading to a segmentation fault or a buffer overflow. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent read operation then produces undefined or unexpected results."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-126",
              "name": "Buffer Over-read",
              "shortDescription": {
                "text": "The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer."
              },
              "fullDescription": {
                "text": "This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-788",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-127",
              "name": "Buffer Under-read",
              "shortDescription": {
                "text": "The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer."
              },
              "fullDescription": {
                "text": "This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-786",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-128",
              "name": "Wrap-around Error",
              "shortDescription": {
                "text": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore wraps around to a very small, negative, or undefined value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-190",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-129",
              "name": "Improper Validation of Array Index",
              "shortDescription": {
                "text": "The product uses untrusted input when calculating or using an array index, but the product does not validate or incorrectly validates the index to ensure the index references a valid position within the array."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-823",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-789",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-130",
              "name": "Improper Handling of Length Parameter Inconsistency",
              "shortDescription": {
                "text": "The software parses a formatted message or structure, but it does not handle or incorrectly handles a length field that is inconsistent with the actual length of the associated data."
              },
              "fullDescription": {
                "text": "If an attacker can manipulate the length parameter associated with an input such that it is inconsistent with the actual length of the input, this can be leveraged to cause the target application to behave in unexpected, and possibly, malicious ways. One of the possible motives for doing so is to pass in arbitrarily large input to the application. Another possible motivation is the modification of application state by including invalid data for subsequent properties of the application. Such weaknesses commonly lead to attacks such as buffer overflows and execution of arbitrary code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-240",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-805",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-131",
              "name": "Incorrect Calculation of Buffer Size",
              "shortDescription": {
                "text": "The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-132",
              "name": "DEPRECATED (Duplicate): Miscalculated Null Termination",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-170. All content has been transferred to CWE-170."
              }
            },
            {
              "id": "CWE-134",
              "name": "Use of Externally-Controlled Format String",
              "shortDescription": {
                "text": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source."
              },
              "fullDescription": {
                "text": "When an attacker can modify an externally-controlled format string, this can lead to buffer overflows, denial of service, or data representation problems. It should be noted that in some circumstances, such as internationalization, the set of format strings is externally controlled by design. If the source of these format strings is trusted (e.g. only contained in library files that are only modifiable by the system administrator), then the external control might not itself pose a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-135",
              "name": "Incorrect Calculation of Multi-Byte String Length",
              "shortDescription": {
                "text": "The software does not correctly calculate the length of strings that can contain wide or multi-byte characters."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-138",
              "name": "Improper Neutralization of Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as control elements or syntactic markers when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "Most languages and protocols have their own special elements such as characters and reserved words. These special elements can carry control implications. If software does not prevent external control or influence over the inclusion of such special elements, the control flow of the program may be altered from what was intended. For example, both Unix and Windows interpret the symbol < (less than) as meaning read input from a file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-140",
              "name": "Improper Neutralization of Delimiters",
              "shortDescription": {
                "text": "The software does not neutralize or incorrectly neutralizes delimiters."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-141",
              "name": "Improper Neutralization of Parameter/Argument Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as parameter or argument delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-142",
              "name": "Improper Neutralization of Value Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as value delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-143",
              "name": "Improper Neutralization of Record Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as record delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-144",
              "name": "Improper Neutralization of Line Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as line delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-93",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-145",
              "name": "Improper Neutralization of Section Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as section delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. One example of a section delimiter is the boundary string in a multipart MIME message. In many cases, doubled line delimiters can serve as a section delimiter."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-93",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-146",
              "name": "Improper Neutralization of Expression/Command Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-140",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-147",
              "name": "Improper Neutralization of Input Terminators",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as input terminators when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "For example, a . in SMTP signifies the end of mail message data, whereas a null character can be used for the end of a string."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-148",
              "name": "Improper Neutralization of Input Leaders",
              "shortDescription": {
                "text": "The application does not properly handle when a leading character or sequence (leader) is missing or malformed, or if multiple leaders are used when only one should be allowed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-149",
              "name": "Improper Neutralization of Quoting Syntax",
              "shortDescription": {
                "text": "Quotes injected into an application can be used to compromise a system. As data are parsed, an injected/absent/duplicate/malformed use of quotes may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-150",
              "name": "Improper Neutralization of Escape, Meta, or Control Sequences",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-151",
              "name": "Improper Neutralization of Comment Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as comment delimiters when they are sent to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-152",
              "name": "Improper Neutralization of Macro Symbols",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as macro symbols when they are sent to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-153",
              "name": "Improper Neutralization of Substitution Characters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as substitution characters when they are sent to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-154",
              "name": "Improper Neutralization of Variable Name Delimiters",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as variable name delimiters when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected delimiter may cause the process to take unexpected actions that result in an attack. Example: $ for an environment variable."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-155",
              "name": "Improper Neutralization of Wildcards or Matching Symbols",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as wildcards or matching symbols when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected element may cause the process to take unexpected actions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-156",
              "name": "Improper Neutralization of Whitespace",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "This can include space, tab, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-157",
              "name": "Failure to Sanitize Paired Delimiters",
              "shortDescription": {
                "text": "The software does not properly handle the characters that are used to mark the beginning and ending of a group of entities, such as parentheses, brackets, and braces."
              },
              "fullDescription": {
                "text": "Paired delimiters might include: < and > angle brackets ( and ) parentheses { and } braces [ and ] square brackets double quotes ' ' single quotes"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-158",
              "name": "Improper Neutralization of Null Byte or NUL Character",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes NUL characters or null bytes when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, an injected NUL character or null byte may cause the software to believe the input is terminated earlier than it actually is, or otherwise cause the input to be misinterpreted. This could then be used to inject potentially dangerous input that occurs after the null byte or otherwise bypass validation routines and other protection mechanisms."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-159",
              "name": "Improper Handling of Invalid Use of Special Elements",
              "shortDescription": {
                "text": "The product does not properly filter, remove, quote, or otherwise manage the invalid use of special elements in user-controlled input, which could cause adverse effect on its behavior and integrity."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-160",
              "name": "Improper Neutralization of Leading Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled leading special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-161",
              "name": "Improper Neutralization of Multiple Leading Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple leading special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled multiple leading special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-160",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-162",
              "name": "Improper Neutralization of Trailing Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled trailing special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-163",
              "name": "Improper Neutralization of Multiple Trailing Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-162",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-164",
              "name": "Improper Neutralization of Internal Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-165",
              "name": "Improper Neutralization of Multiple Internal Special Elements",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component."
              },
              "fullDescription": {
                "text": "As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-164",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-166",
              "name": "Improper Handling of Missing Special Element",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-159",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-167",
              "name": "Improper Handling of Additional Special Element",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-159",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-168",
              "name": "Improper Handling of Inconsistent Special Elements",
              "shortDescription": {
                "text": "The software does not properly handle input in which an inconsistency exists between two or more special characters or reserved words."
              },
              "fullDescription": {
                "text": "An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-159",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-170",
              "name": "Improper Null Termination",
              "shortDescription": {
                "text": "The software does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator."
              },
              "fullDescription": {
                "text": "Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-126",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-147",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-464",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-463",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-172",
              "name": "Encoding Error",
              "shortDescription": {
                "text": "The software does not properly encode or decode the data, resulting in unexpected values."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-22",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-173",
              "name": "Improper Handling of Alternate Encoding",
              "shortDescription": {
                "text": "The software does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-172",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-289",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-174",
              "name": "Double Decoding of the Same Data",
              "shortDescription": {
                "text": "The software decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-172",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-175",
              "name": "Improper Handling of Mixed Encoding",
              "shortDescription": {
                "text": "The software does not properly handle when the same input uses several different (mixed) encodings."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-172",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-176",
              "name": "Improper Handling of Unicode Encoding",
              "shortDescription": {
                "text": "The software does not properly handle when an input contains Unicode encoding."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-172",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-177",
              "name": "Improper Handling of URL Encoding (Hex Encoding)",
              "shortDescription": {
                "text": "The software does not properly handle when all or part of an input has been URL encoded."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-172",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-178",
              "name": "Improper Handling of Case Sensitivity",
              "shortDescription": {
                "text": "The software does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results."
              },
              "fullDescription": {
                "text": "Improperly handled case sensitive data can lead to several possible consequences, including: case-insensitive passwords reducing the size of the key space, making brute force attacks easier bypassing filters or access controls using alternate names multiple interpretation errors using alternate names."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-433",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-289",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-179",
              "name": "Incorrect Behavior Order: Early Validation",
              "shortDescription": {
                "text": "The software validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification."
              },
              "fullDescription": {
                "text": "Software needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-180",
              "name": "Incorrect Behavior Order: Validate Before Canonicalize",
              "shortDescription": {
                "text": "The software validates input before it is canonicalized, which prevents the software from detecting data that becomes invalid after the canonicalization step."
              },
              "fullDescription": {
                "text": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-179",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-181",
              "name": "Incorrect Behavior Order: Validate Before Filter",
              "shortDescription": {
                "text": "The software validates data before it has been filtered, which prevents the software from detecting data that becomes invalid after the filtering step."
              },
              "fullDescription": {
                "text": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-179",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-182",
              "name": "Collapse of Data into Unsafe Value",
              "shortDescription": {
                "text": "The software filters data in a way that causes it to be reduced or collapsed into an unsafe value that violates an expected security property."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-33",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-34",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-35",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-183",
              "name": "Permissive List of Allowed Inputs",
              "shortDescription": {
                "text": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-434",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-184",
              "name": "Incomplete List of Disallowed Inputs",
              "shortDescription": {
                "text": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses."
              },
              "fullDescription": {
                "text": "Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1023",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-78",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-434",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-98",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-185",
              "name": "Incorrect Regular Expression",
              "shortDescription": {
                "text": "The software specifies a regular expression in a way that causes data to be improperly matched or compared."
              },
              "fullDescription": {
                "text": "When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-187",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-182",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-186",
              "name": "Overly Restrictive Regular Expression",
              "shortDescription": {
                "text": "A regular expression is overly restrictive, which prevents dangerous values from being detected."
              },
              "fullDescription": {
                "text": "This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not complex but the value 9 is not matched when maybe the programmer planned to check for it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-185",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-184",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-183",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-187",
              "name": "Partial String Comparison",
              "shortDescription": {
                "text": "The software performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses."
              },
              "fullDescription": {
                "text": "For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1023",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-188",
              "name": "Reliance on Data/Memory Layout",
              "shortDescription": {
                "text": "The software makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior."
              },
              "fullDescription": {
                "text": "When changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size. In protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1105",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-435",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-190",
              "name": "Integer Overflow or Wraparound",
              "shortDescription": {
                "text": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control."
              },
              "fullDescription": {
                "text": "An integer overflow or wraparound occurs when an integer value is incremented to a value that is too large to store in the associated representation. When this occurs, the value may wrap to become a very small or negative number. While this may be intended behavior in circumstances that rely on wrapping, it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs. This becomes security-critical when the result is used to control looping, make a security decision, or determine the offset or size in behaviors such as memory allocation, copying, concatenation, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-191",
              "name": "Integer Underflow (Wrap or Wraparound)",
              "shortDescription": {
                "text": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result."
              },
              "fullDescription": {
                "text": "This can happen in signed and unsigned cases."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-192",
              "name": "Integer Coercion Error",
              "shortDescription": {
                "text": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types."
              },
              "fullDescription": {
                "text": "Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-193",
              "name": "Off-by-one Error",
              "shortDescription": {
                "text": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-617",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-170",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-194",
              "name": "Unexpected Sign Extension",
              "shortDescription": {
                "text": "The software performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-195",
              "name": "Signed to Unsigned Conversion Error",
              "shortDescription": {
                "text": "The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive."
              },
              "fullDescription": {
                "text": "It is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program. Often, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-196",
              "name": "Unsigned to Signed Conversion Error",
              "shortDescription": {
                "text": "The software uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive."
              },
              "fullDescription": {
                "text": "Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-124",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-197",
              "name": "Numeric Truncation Error",
              "shortDescription": {
                "text": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion."
              },
              "fullDescription": {
                "text": "When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-195",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-196",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-192",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-194",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-198",
              "name": "Use of Incorrect Byte Ordering",
              "shortDescription": {
                "text": "The software receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-188",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-200",
              "name": "Exposure of Sensitive Information to an Unauthorized Actor",
              "shortDescription": {
                "text": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information."
              },
              "fullDescription": {
                "text": "There are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include: private, personal information, such as personal messages, financial data, health records, geographic location, or contact details system status and environment, such as the operating system and installed packages business secrets and intellectual property network status and configuration the product's own code or internal state metadata, e.g. logging of connections or message headers indirect information, such as a discrepancy between two internal operations that can be observed by an outsider Information might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include: the product's own users people or organizations whose information is created or used by the product, even if they are not direct product users the product's administrators, including the admins of the system(s) and/or networks on which the product operates the developer Information exposures can occur in different ways: the code explicitly inserts sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been scrubbed or sanitized a different weakness or mistake indirectly inserts the sensitive information into resources, such as a web script error revealing the full system path of the program. the code manages resources that intentionally contain sensitive information, but the resources are unintentionally made accessible to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place. It is common practice to describe any loss of confidentiality as an information exposure, but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-201",
              "name": "Insertion of Sensitive Information Into Sent Data",
              "shortDescription": {
                "text": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor."
              },
              "fullDescription": {
                "text": "Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-202",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-202",
              "name": "Exposure of Sensitive Information Through Data Queries",
              "shortDescription": {
                "text": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics."
              },
              "fullDescription": {
                "text": "In situations where data should not be tied to individual users, but a large number of users should be able to make queries that scrub the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1230",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-203",
              "name": "Observable Discrepancy",
              "shortDescription": {
                "text": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not."
              },
              "fullDescription": {
                "text": "Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-204",
              "name": "Observable Response Discrepancy",
              "shortDescription": {
                "text": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere."
              },
              "fullDescription": {
                "text": "This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-203",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-205",
              "name": "Observable Behavioral Discrepancy",
              "shortDescription": {
                "text": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality."
              },
              "fullDescription": {
                "text": "Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-203",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-514",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-206",
              "name": "Observable Internal Behavioral Discrepancy",
              "shortDescription": {
                "text": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points."
              },
              "fullDescription": {
                "text": "Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-205",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-207",
              "name": "Observable Behavioral Discrepancy With Equivalent Products",
              "shortDescription": {
                "text": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker."
              },
              "fullDescription": {
                "text": "For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform fingerprinting, which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-205",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-208",
              "name": "Observable Timing Discrepancy",
              "shortDescription": {
                "text": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not."
              },
              "fullDescription": {
                "text": "In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-203",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-385",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-209",
              "name": "Generation of Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "The software generates an error message that includes sensitive information about its environment, users, or associated data."
              },
              "fullDescription": {
                "text": "The sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways: self-generated: the source code explicitly constructs the error message and delivers it externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer An attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of .. sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-210",
              "name": "Self-generated Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "The software identifies an error condition and creates its own diagnostic or error messages that contain sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-211",
              "name": "Externally-Generated Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "The application performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the application, such as an error generated by the programming language interpreter that the software uses. The error can contain sensitive system information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-212",
              "name": "Improper Removal of Sensitive Information Before Storage or Transfer",
              "shortDescription": {
                "text": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors."
              },
              "fullDescription": {
                "text": "Resources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing. For example, software that is used for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-201",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-213",
              "name": "Exposure of Sensitive Information Due to Incompatible Policies",
              "shortDescription": {
                "text": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed."
              },
              "fullDescription": {
                "text": "When handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-214",
              "name": "Invocation of Process Using Visible Sensitive Information",
              "shortDescription": {
                "text": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system."
              },
              "fullDescription": {
                "text": "Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the software or related resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-497",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-215",
              "name": "Insertion of Sensitive Information Into Debugging Code",
              "shortDescription": {
                "text": "The application inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production."
              },
              "fullDescription": {
                "text": "When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the application is operating in a production environment, then this sensitive information may be exposed to attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-216",
              "name": "DEPRECATED: Containment Errors (Container Errors)",
              "shortDescription": {
                "text": "This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the container term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry."
              }
            },
            {
              "id": "CWE-217",
              "name": "DEPRECATED: Failure to Protect Stored Data from Modification",
              "shortDescription": {
                "text": "This weakness has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this weakness can be found at CWE-766 and CWE-767."
              }
            },
            {
              "id": "CWE-218",
              "name": "DEPRECATED (Duplicate): Failure to provide confidentiality for stored data",
              "shortDescription": {
                "text": "This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493."
              }
            },
            {
              "id": "CWE-219",
              "name": "Storage of File with Sensitive Data Under Web Root",
              "shortDescription": {
                "text": "The application stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties."
              },
              "fullDescription": {
                "text": "Besides public-facing web pages and code, applications may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-220",
              "name": "Storage of File With Sensitive Data Under FTP Root",
              "shortDescription": {
                "text": "The application stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-221",
              "name": "Information Loss or Omission",
              "shortDescription": {
                "text": "The software does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis."
              },
              "fullDescription": {
                "text": "This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-222",
              "name": "Truncation of Security-relevant Information",
              "shortDescription": {
                "text": "The application truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-223",
              "name": "Omission of Security-relevant Information",
              "shortDescription": {
                "text": "The application does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-224",
              "name": "Obscured Security-relevant Information by Alternate Name",
              "shortDescription": {
                "text": "The software records security-relevant information according to an alternate name of the affected entity, instead of the canonical name."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-225",
              "name": "DEPRECATED (Duplicate): General Information Management Problems",
              "shortDescription": {
                "text": "This weakness can be found at CWE-199."
              }
            },
            {
              "id": "CWE-226",
              "name": "Sensitive Information in Resource Not Removed Before Reuse",
              "shortDescription": {
                "text": "When a device releases a resource such as memory or a file for reuse by other entities, information contained in the resource is not fully cleared prior to reuse of the resource."
              },
              "fullDescription": {
                "text": "When resources are released, they can be made available for reuse. For example, after memory is used and released, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information. Even when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-459",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-212",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-201",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-228",
              "name": "Improper Handling of Syntactically Invalid Structure",
              "shortDescription": {
                "text": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-229",
              "name": "Improper Handling of Values",
              "shortDescription": {
                "text": "The software does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-228",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-230",
              "name": "Improper Handling of Missing Values",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-229",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-231",
              "name": "Improper Handling of Extra Values",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when more values are provided than expected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-229",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-232",
              "name": "Improper Handling of Undefined Values",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-229",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-233",
              "name": "Improper Handling of Parameters",
              "shortDescription": {
                "text": "The software does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-228",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-234",
              "name": "Failure to Handle Missing Parameter",
              "shortDescription": {
                "text": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-233",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-235",
              "name": "Improper Handling of Extra Parameters",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-233",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-236",
              "name": "Improper Handling of Undefined Parameters",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-233",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-237",
              "name": "Improper Handling of Structural Elements",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles inputs that are related to complex structures."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-228",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-238",
              "name": "Improper Handling of Incomplete Structural Elements",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when a particular structural element is not completely specified."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-237",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-239",
              "name": "Failure to Handle Incomplete Element",
              "shortDescription": {
                "text": "The software does not properly handle when a particular element is not completely specified."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-237",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-240",
              "name": "Improper Handling of Inconsistent Structural Elements",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when two or more structural elements should be consistent, but are not."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-237",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-241",
              "name": "Improper Handling of Unexpected Data Type",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-228",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-242",
              "name": "Use of Inherently Dangerous Function",
              "shortDescription": {
                "text": "The program calls a function that can never be guaranteed to work safely."
              },
              "fullDescription": {
                "text": "Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1177",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-243",
              "name": "Creation of chroot Jail Without Changing Working Directory",
              "shortDescription": {
                "text": "The program uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail."
              },
              "fullDescription": {
                "text": "Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-244",
              "name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')",
              "shortDescription": {
                "text": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory."
              },
              "fullDescription": {
                "text": "When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a heap inspection attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-226",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-245",
              "name": "J2EE Bad Practices: Direct Management of Connections",
              "shortDescription": {
                "text": "The J2EE application directly manages connections, instead of using the container's connection management facilities."
              },
              "fullDescription": {
                "text": "The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-246",
              "name": "J2EE Bad Practices: Direct Use of Sockets",
              "shortDescription": {
                "text": "The J2EE application directly uses sockets instead of using framework method calls."
              },
              "fullDescription": {
                "text": "The J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues. Without significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-247",
              "name": "DEPRECATED (Duplicate): Reliance on DNS Lookups in a Security Decision",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350."
              }
            },
            {
              "id": "CWE-248",
              "name": "Uncaught Exception",
              "shortDescription": {
                "text": "An exception is thrown from a function, but it is not caught."
              },
              "fullDescription": {
                "text": "When an exception is not caught, it may cause the program to crash or expose sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-249",
              "name": "DEPRECATED: Often Misused: Path Manipulation",
              "shortDescription": {
                "text": "This entry has been deprecated because of name confusion and an accidental combination of multiple weaknesses. Most of its content has been transferred to CWE-785."
              }
            },
            {
              "id": "CWE-250",
              "name": "Execution with Unnecessary Privileges",
              "shortDescription": {
                "text": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses."
              },
              "fullDescription": {
                "text": "New weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges. Privilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-252",
              "name": "Unchecked Return Value",
              "shortDescription": {
                "text": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions."
              },
              "fullDescription": {
                "text": "Two common programmer assumptions are this function call can never fail and it doesn't matter if this function call fails. If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the software is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-476",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-253",
              "name": "Incorrect Check of Function Return Value",
              "shortDescription": {
                "text": "The software incorrectly checks a return value from a function, which prevents the software from detecting errors or exceptional conditions."
              },
              "fullDescription": {
                "text": "Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-256",
              "name": "Unprotected Storage of Credentials",
              "shortDescription": {
                "text": "Storing a password in plaintext may result in a system compromise."
              },
              "fullDescription": {
                "text": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-522",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-319",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-257",
              "name": "Storing Passwords in a Recoverable Format",
              "shortDescription": {
                "text": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-522",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-259",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-258",
              "name": "Empty Password in Configuration File",
              "shortDescription": {
                "text": "Using an empty string as a password is insecure."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-260",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-521",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-259",
              "name": "Use of Hard-coded Password",
              "shortDescription": {
                "text": "The software contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components."
              },
              "fullDescription": {
                "text": "A hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks for a hard-coded password. Outbound: the software connects to another system or component, and it contains hard-coded password for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-798",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-321",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-257",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-260",
              "name": "Password in Configuration File",
              "shortDescription": {
                "text": "The software stores a password in a configuration file that might be accessible to actors who do not know the password."
              },
              "fullDescription": {
                "text": "This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-522",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-261",
              "name": "Weak Encoding for Password",
              "shortDescription": {
                "text": "Obscuring a password with a trivial encoding does not protect the password."
              },
              "fullDescription": {
                "text": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-326",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-262",
              "name": "Not Using Password Aging",
              "shortDescription": {
                "text": "If no mechanism is in place for managing password aging, users will have no incentive to update passwords in a timely manner."
              },
              "fullDescription": {
                "text": "Security experts have often recommended that users change their passwords regularly and avoid reusing passwords. Although this can be an effective mitigation, if the expiration window is too short, it can cause users to generate poor or predictable passwords. As such, it is important to discourage creating similar passwords. It is also useful to have a password aging mechanism that notifies users when passwords are considered old and requests that they replace them with new, strong passwords. Companion documentation which stresses how important this practice is can help users understand and better support this approach."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-309",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-263",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-324",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-263",
              "name": "Password Aging with Long Expiration",
              "shortDescription": {
                "text": "Allowing password aging to occur unchecked can result in the possibility of diminished password integrity."
              },
              "fullDescription": {
                "text": "Just as neglecting to include functionality for the management of password aging is dangerous, so is allowing password aging to continue unchecked. Passwords must be given a maximum life span, after which a user is required to update with a new and different password."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-266",
              "name": "Incorrect Privilege Assignment",
              "shortDescription": {
                "text": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-286",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-267",
              "name": "Privilege Defined With Unsafe Actions",
              "shortDescription": {
                "text": "A particular privilege, role, capability, or right can be used to perform unsafe actions that were not intended, even when it is assigned to the correct entity."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-268",
              "name": "Privilege Chaining",
              "shortDescription": {
                "text": "Two distinct privileges, roles, capabilities, or rights can be combined in a way that allows an entity to perform unsafe actions that would not be allowed without that combination."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-269",
              "name": "Improper Privilege Management",
              "shortDescription": {
                "text": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-270",
              "name": "Privilege Context Switching Error",
              "shortDescription": {
                "text": "The software does not properly manage privileges while it is switching between different contexts that have different privileges or spheres of control."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-271",
              "name": "Privilege Dropping / Lowering Errors",
              "shortDescription": {
                "text": "The software does not drop privileges before passing control of a resource to an actor that does not have those privileges."
              },
              "fullDescription": {
                "text": "In some contexts, a system executing with elevated permissions will hand off a process/file/etc. to another process or user. If the privileges of an entity are not reduced, then elevated privileges are spread throughout a system and possibly to an attacker."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-272",
              "name": "Least Privilege Violation",
              "shortDescription": {
                "text": "The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-271",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-273",
              "name": "Improper Check for Dropped Privileges",
              "shortDescription": {
                "text": "The software attempts to drop privileges but does not check or incorrectly checks to see if the drop succeeded."
              },
              "fullDescription": {
                "text": "If the drop fails, the software will continue to run with the raised privileges, which might provide additional access to unprivileged users."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-271",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-252",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-274",
              "name": "Improper Handling of Insufficient Privileges",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles when it has insufficient privileges to perform an operation, leading to resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-271",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-280",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-276",
              "name": "Incorrect Default Permissions",
              "shortDescription": {
                "text": "During installation, installed file permissions are set to allow anyone to modify those files."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-277",
              "name": "Insecure Inherited Permissions",
              "shortDescription": {
                "text": "A product defines a set of insecure permissions that are inherited by objects that are created by the program."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-278",
              "name": "Insecure Preserved Inherited Permissions",
              "shortDescription": {
                "text": "A product inherits a set of insecure permissions for an object, e.g. when copying from an archive file, without user awareness or involvement."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-279",
              "name": "Incorrect Execution-Assigned Permissions",
              "shortDescription": {
                "text": "While it is executing, the software sets the permissions of an object in a way that violates the intended permissions that have been specified by the user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-280",
              "name": "Improper Handling of Insufficient Permissions or Privileges ",
              "shortDescription": {
                "text": "The application does not handle or incorrectly handles when it has insufficient privileges to access resources or functionality as specified by their permissions. This may cause it to follow unexpected code paths that may leave the application in an invalid state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-281",
              "name": "Improper Preservation of Permissions",
              "shortDescription": {
                "text": "The software does not preserve permissions or incorrectly preserves permissions when copying, restoring, or sharing objects, which can cause them to have less restrictive permissions than intended."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-282",
              "name": "Improper Ownership Management",
              "shortDescription": {
                "text": "The software assigns the wrong ownership, or does not properly verify the ownership, of an object or resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-283",
              "name": "Unverified Ownership",
              "shortDescription": {
                "text": "The software does not properly verify that a critical resource is owned by the proper entity."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-282",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-284",
              "name": "Improper Access Control",
              "shortDescription": {
                "text": "The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor."
              },
              "fullDescription": {
                "text": "Access control involves the use of several protection mechanisms such as: Authentication (proving the identity of an actor) Authorization (ensuring that a given actor can access a resource), and Accountability (tracking of activities that were performed) When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc. There are two distinct behaviors that can introduce access control weaknesses: Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies."
              }
            },
            {
              "id": "CWE-285",
              "name": "Improper Authorization",
              "shortDescription": {
                "text": "The software does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action."
              },
              "fullDescription": {
                "text": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-286",
              "name": "Incorrect User Management",
              "shortDescription": {
                "text": "The software does not properly manage a user within its environment."
              },
              "fullDescription": {
                "text": "Users can be assigned to the wrong group (class) of permissions resulting in unintended access rights to sensitive objects."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-287",
              "name": "Improper Authentication",
              "shortDescription": {
                "text": "When an actor claims to have a given identity, the software does not prove or insufficiently proves that the claim is correct."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-288",
              "name": "Authentication Bypass Using an Alternate Path or Channel",
              "shortDescription": {
                "text": "A product requires authentication, but the product has an alternate path or channel that does not require authentication."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-420",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-425",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-289",
              "name": "Authentication Bypass by Alternate Name",
              "shortDescription": {
                "text": "The software performs authentication based on the name of a resource being accessed, or the name of the actor performing the access, but it does not properly check all possible names for that resource or actor."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-290",
              "name": "Authentication Bypass by Spoofing",
              "shortDescription": {
                "text": "This attack-focused weakness is caused by improperly implemented authentication schemes that are subject to spoofing attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-291",
              "name": "Reliance on IP Address for Authentication",
              "shortDescription": {
                "text": "The software uses an IP address for authentication."
              },
              "fullDescription": {
                "text": "IP addresses can be easily spoofed. Attackers can forge the source IP address of the packets they send, but response packets will return to the forged IP address. To see the response packets, the attacker has to sniff the traffic between the victim machine and the forged IP address. In order to accomplish the required sniffing, attackers typically attempt to locate themselves on the same subnet as the victim machine. Attackers may be able to circumvent this requirement by using source routing, but source routing is disabled across much of the Internet today. In summary, IP address verification can be a useful part of an authentication scheme, but it should not be the single factor required for authentication."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-290",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-292",
              "name": "DEPRECATED (Duplicate): Trusting Self-reported DNS Name",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350."
              }
            },
            {
              "id": "CWE-293",
              "name": "Using Referer Field for Authentication",
              "shortDescription": {
                "text": "The referer field in HTTP requests can be easily modified and, as such, is not a valid means of message integrity checking."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-290",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-294",
              "name": "Authentication Bypass by Capture-replay",
              "shortDescription": {
                "text": "A capture-replay flaw exists when the design of the software makes it possible for a malicious user to sniff network traffic and bypass authentication by replaying it to the server in question to the same effect as the original message (or with minor changes)."
              },
              "fullDescription": {
                "text": "Capture-replay attacks are common and can be difficult to defeat without cryptography. They are a subset of network injection attacks that rely on observing previously-sent valid commands, then changing them slightly if necessary and resending the same commands to the server."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-295",
              "name": "Improper Certificate Validation",
              "shortDescription": {
                "text": "The software does not validate, or incorrectly validates, a certificate."
              },
              "fullDescription": {
                "text": "When a certificate is invalid or malicious, it might allow an attacker to spoof a trusted entity by interfering in the communication path between the host and client. The software might connect to a malicious host while believing it is a trusted host, or the software might be deceived into accepting spoofed data that appears to originate from a trusted host."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-322",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-296",
              "name": "Improper Following of a Certificate's Chain of Trust",
              "shortDescription": {
                "text": "The software does not follow, or incorrectly follows, the chain of trust for a certificate back to a trusted root certificate, resulting in incorrect trust of any resource that is associated with that certificate."
              },
              "fullDescription": {
                "text": "If a system does not follow the chain of trust of a certificate to a root server, the certificate loses all usefulness as a metric of trust. Essentially, the trust gained from a certificate is derived from a chain of trust -- with a reputable trusted entity at the end of that list. The end user must trust that reputable source, and this reputable source must vouch for the resource in question through the medium of the certificate. In some cases, this trust traverses several entities who vouch for one another. The entity trusted by the end user is at one end of this trust chain, while the certificate-wielding resource is at the other end of the chain. If the user receives a certificate at the end of one of these trust chains and then proceeds to check only that the first link in the chain, no real trust has been derived, since the entire chain must be traversed back to a trusted source to verify the certificate. There are several ways in which the chain of trust might be broken, including but not limited to: Any certificate in the chain is self-signed, unless it the root. Not every intermediate certificate is checked, starting from the original certificate all the way up to the root certificate. An intermediate, CA-signed certificate does not have the expected Basic Constraints or other important extensions. The root certificate has been compromised or authorized to the wrong party."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-297",
              "name": "Improper Validation of Certificate with Host Mismatch",
              "shortDescription": {
                "text": "The software communicates with a host that provides a certificate, but the software does not properly ensure that the certificate is actually associated with that host."
              },
              "fullDescription": {
                "text": "Even if a certificate is well-formed, signed, and follows the chain of trust, it may simply be a valid certificate for a different site than the site that the software is interacting with. If the certificate's host-specific data is not properly checked - such as the Common Name (CN) in the Subject or the Subject Alternative Name (SAN) extension of an X.509 certificate - it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data, impersonating a trusted host. In order to ensure data integrity, the certificate must be valid and it must pertain to the site that is being accessed. Even if the software attempts to check the hostname, it is still possible to incorrectly check the hostname. For example, attackers could create a certificate with a name that begins with a trusted name followed by a NUL byte, which could cause some string-based comparisons to only examine the portion that contains the trusted name. This weakness can occur even when the software uses Certificate Pinning, if the software does not verify the hostname at the time a certificate is pinned."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-298",
              "name": "Improper Validation of Certificate Expiration",
              "shortDescription": {
                "text": "A certificate expiration is not validated or is incorrectly validated, so trust may be assigned to certificates that have been abandoned due to age."
              },
              "fullDescription": {
                "text": "When the expiration of a certificate is not taken into account, no trust has necessarily been conveyed through it. Therefore, the validity of the certificate cannot be verified and all benefit of the certificate is lost."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-299",
              "name": "Improper Check for Certificate Revocation",
              "shortDescription": {
                "text": "The software does not check or incorrectly checks the revocation status of a certificate, which may cause it to use a certificate that has been compromised."
              },
              "fullDescription": {
                "text": "An improper check for certificate revocation is a far more serious flaw than related certificate failures. This is because the use of any revoked certificate is almost certainly malicious. The most common reason for certificate revocation is compromise of the system in question, with the result that no legitimate servers will be using a revoked certificate, unless they are sorely out of sync."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-300",
              "name": "Channel Accessible by Non-Endpoint",
              "shortDescription": {
                "text": "The product does not adequately verify the identity of actors at both ends of a communication channel, or does not adequately ensure the integrity of the channel, in a way that allows the channel to be accessed or influenced by an actor that is not an endpoint."
              },
              "fullDescription": {
                "text": "In order to establish secure communication between two parties, it is often important to adequately verify the identity of entities at each end of the communication channel. Inadequate or inconsistent verification may result in insufficient or incorrect identification of either communicating entity. This can have negative consequences such as misplaced trust in the entity at the other end of the channel. An attacker can leverage this by interposing between the communicating entities and masquerading as the original entity. In the absence of sufficient verification of identity, such an attacker can eavesdrop and potentially modify the communication between the original entities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-301",
              "name": "Reflection Attack in an Authentication Protocol",
              "shortDescription": {
                "text": "Simple authentication protocols are subject to reflection attacks if a malicious user can use the target machine to impersonate a trusted user."
              },
              "fullDescription": {
                "text": "A mutual authentication protocol requires each party to respond to a random challenge by the other party by encrypting it with a pre-shared key. Often, however, such protocols employ the same pre-shared key for communication with a number of different entities. A malicious user or an attacker can easily compromise this protocol without possessing the correct key by employing a reflection attack on the protocol."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-302",
              "name": "Authentication Bypass by Assumed-Immutable Data",
              "shortDescription": {
                "text": "The authentication scheme or implementation uses key data elements that are assumed to be immutable, but can be controlled or modified by the attacker."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-807",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-303",
              "name": "Incorrect Implementation of Authentication Algorithm",
              "shortDescription": {
                "text": "The requirements for the software dictate the use of an established authentication algorithm, but the implementation of the algorithm is incorrect."
              },
              "fullDescription": {
                "text": "This incorrect implementation may allow authentication to be bypassed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-304",
              "name": "Missing Critical Step in Authentication",
              "shortDescription": {
                "text": "The software implements an authentication technique, but it skips a step that weakens the technique."
              },
              "fullDescription": {
                "text": "Authentication techniques should follow the algorithms that define them exactly, otherwise authentication can be bypassed or more easily subjected to brute force attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-305",
              "name": "Authentication Bypass by Primary Weakness",
              "shortDescription": {
                "text": "The authentication algorithm is sound, but the implemented mechanism can be bypassed as the result of a separate weakness that is primary to the authentication error."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-306",
              "name": "Missing Authentication for Critical Function",
              "shortDescription": {
                "text": "The software does not perform any authentication for functionality that requires a provable user identity or consumes a significant amount of resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-307",
              "name": "Improper Restriction of Excessive Authentication Attempts",
              "shortDescription": {
                "text": "The software does not implement sufficient measures to prevent multiple failed authentication attempts within in a short time frame, making it more susceptible to brute force attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-799",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-308",
              "name": "Use of Single-factor Authentication",
              "shortDescription": {
                "text": "The use of single-factor authentication can lead to unnecessary risk of compromise when compared with the benefits of a dual-factor authentication scheme."
              },
              "fullDescription": {
                "text": "While the use of multiple authentication schemes is simply piling on more complexity on top of authentication, it is inestimably valuable to have such measures of redundancy. The use of weak, reused, and common passwords is rampant on the internet. Without the added protection of multiple authentication schemes, a single mistake can result in the compromise of an account. For this reason, if multiple schemes are possible and also easy to use, they should be implemented and required."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-654",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-309",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-309",
              "name": "Use of Password System for Primary Authentication",
              "shortDescription": {
                "text": "The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-654",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-308",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-311",
              "name": "Missing Encryption of Sensitive Data",
              "shortDescription": {
                "text": "The software does not encrypt sensitive or critical information before storage or transmission."
              },
              "fullDescription": {
                "text": "The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-312",
              "name": "Cleartext Storage of Sensitive Information",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext within a resource that might be accessible to another control sphere."
              },
              "fullDescription": {
                "text": "Because the information is stored in cleartext, attackers could potentially read it. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-311",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-922",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-313",
              "name": "Cleartext Storage in a File or on Disk",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext in a file, or on disk."
              },
              "fullDescription": {
                "text": "The sensitive information could be read by attackers with access to the file, or with physical or administrator access to the raw disk. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-314",
              "name": "Cleartext Storage in the Registry",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext in the registry."
              },
              "fullDescription": {
                "text": "Attackers can read the information by accessing the registry key. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-315",
              "name": "Cleartext Storage of Sensitive Information in a Cookie",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext in a cookie."
              },
              "fullDescription": {
                "text": "Attackers can use widely-available tools to view the cookie and read the sensitive information. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-316",
              "name": "Cleartext Storage of Sensitive Information in Memory",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext in memory."
              },
              "fullDescription": {
                "text": "The sensitive memory might be saved to disk, stored in a core dump, or remain uncleared if the application crashes, or if the programmer does not properly clear the memory before freeing it. It could be argued that such problems are usually only exploitable by those with administrator privileges. However, swapping could cause the memory to be written to disk and leave it accessible to physical attack afterwards. Core dump files might have insecure permissions or be stored in archive files that are accessible to untrusted people. Or, uncleared sensitive memory might be inadvertently exposed to attackers due to another weakness."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-317",
              "name": "Cleartext Storage of Sensitive Information in GUI",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext within the GUI."
              },
              "fullDescription": {
                "text": "An attacker can often obtain data from a GUI, even if hidden, by using an API to directly access GUI objects such as windows and menus. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-318",
              "name": "Cleartext Storage of Sensitive Information in Executable",
              "shortDescription": {
                "text": "The application stores sensitive information in cleartext in an executable."
              },
              "fullDescription": {
                "text": "Attackers can reverse engineer binary code to obtain secret data. This is especially easy when the cleartext is plain ASCII. Even if the information is encoded in a way that is not human-readable, certain techniques could determine which encoding is being used, then decode the information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-319",
              "name": "Cleartext Transmission of Sensitive Information",
              "shortDescription": {
                "text": "The software transmits sensitive or security-critical data in cleartext in a communication channel that can be sniffed by unauthorized actors."
              },
              "fullDescription": {
                "text": "Many communication channels can be sniffed by attackers during data transmission. For example, network traffic can often be sniffed by any attacker who has access to a network interface. This significantly lowers the difficulty of exploitation by attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-311",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-321",
              "name": "Use of Hard-coded Cryptographic Key",
              "shortDescription": {
                "text": "The use of a hard-coded cryptographic key significantly increases the possibility that encrypted data may be recovered."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-798",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-322",
              "name": "Key Exchange without Entity Authentication",
              "shortDescription": {
                "text": "The software performs a key exchange with an actor without verifying the identity of that actor."
              },
              "fullDescription": {
                "text": "Performing a key exchange will preserve the integrity of the information sent between two entities, but this will not guarantee that the entities are who they claim they are. This may enable an attacker to impersonate an actor by modifying traffic between the two entities. Typically, this involves a victim client that contacts a malicious server that is impersonating a trusted server. If the client skips authentication or ignores an authentication failure, the malicious server may request authentication information from the user. The malicious server can then use this authentication information to log in to the trusted server using the victim's credentials, sniff traffic between the victim and trusted server, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-323",
              "name": "Reusing a Nonce, Key Pair in Encryption",
              "shortDescription": {
                "text": "Nonces should be used for the present occasion and only once."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-344",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-324",
              "name": "Use of a Key Past its Expiration Date",
              "shortDescription": {
                "text": "The product uses a cryptographic key or password past its expiration date, which diminishes its safety significantly by increasing the timing window for cracking attacks against that key."
              },
              "fullDescription": {
                "text": "While the expiration of keys does not necessarily ensure that they are compromised, it is a significant concern that keys which remain in use for prolonged periods of time have a decreasing probability of integrity. For this reason, it is important to replace keys within a period of time proportional to their strength."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-298",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-325",
              "name": "Missing Cryptographic Step",
              "shortDescription": {
                "text": "The product does not implement a required step in a cryptographic algorithm, resulting in weaker encryption than advertised by the algorithm."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-358",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-326",
              "name": "Inadequate Encryption Strength",
              "shortDescription": {
                "text": "The software stores or transmits sensitive data using an encryption scheme that is theoretically sound, but is not strong enough for the level of protection required."
              },
              "fullDescription": {
                "text": "A weak encryption scheme can be subjected to brute force attacks that have a reasonable chance of succeeding using current attack methods and resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-327",
              "name": "Use of a Broken or Risky Cryptographic Algorithm",
              "shortDescription": {
                "text": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information."
              },
              "fullDescription": {
                "text": "The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Well-known techniques may exist to break the algorithm."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-311",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-328",
              "name": "Reversible One-Way Hash",
              "shortDescription": {
                "text": "The product uses a hashing algorithm that produces a hash value that can be used to determine the original input, or to find an input that can produce the same hash, more efficiently than brute force techniques."
              },
              "fullDescription": {
                "text": "This weakness is especially dangerous when the hash is used in security algorithms that require the one-way property to hold. For example, if an authentication system takes an incoming password and generates a hash, then compares the hash to another hash that it has stored in its authentication database, then the ability to create a collision could allow an attacker to provide an alternate password that produces the same target hash, bypassing authentication."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-326",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-329",
              "name": "Not Using a Random IV with CBC Mode",
              "shortDescription": {
                "text": "Not using a random initialization Vector (IV) with Cipher Block Chaining (CBC) Mode causes algorithms to be susceptible to dictionary attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-330",
              "name": "Use of Insufficiently Random Values",
              "shortDescription": {
                "text": "The software uses insufficiently random numbers or values in a security context that depends on unpredictable numbers."
              },
              "fullDescription": {
                "text": "When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-331",
              "name": "Insufficient Entropy",
              "shortDescription": {
                "text": "The software uses an algorithm or scheme that produces insufficient entropy, leaving patterns or clusters of values that are more likely to occur than others."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-332",
              "name": "Insufficient Entropy in PRNG",
              "shortDescription": {
                "text": "The lack of entropy available for, or used by, a Pseudo-Random Number Generator (PRNG) can be a stability and security threat."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-331",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-333",
              "name": "Improper Handling of Insufficient Entropy in TRNG",
              "shortDescription": {
                "text": "True random number generators (TRNG) generally have a limited source of entropy and therefore can fail or block."
              },
              "fullDescription": {
                "text": "The rate at which true random numbers can be generated is limited. It is important that one uses them only when they are needed for security."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-331",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-334",
              "name": "Small Space of Random Values",
              "shortDescription": {
                "text": "The number of possible random values is smaller than needed by the product, making it more susceptible to brute force attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-335",
              "name": "Incorrect Usage of Seeds in Pseudo-Random Number Generator (PRNG)",
              "shortDescription": {
                "text": "The software uses a Pseudo-Random Number Generator (PRNG) that does not correctly manage seeds."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-336",
              "name": "Same Seed in Pseudo-Random Number Generator (PRNG)",
              "shortDescription": {
                "text": "A Pseudo-Random Number Generator (PRNG) uses the same seed each time the product is initialized."
              },
              "fullDescription": {
                "text": "If an attacker can guess (or knows) the seed, then the attacker may be able to determine the random numbers that will be produced from the PRNG."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-335",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-337",
              "name": "Predictable Seed in Pseudo-Random Number Generator (PRNG)",
              "shortDescription": {
                "text": "A Pseudo-Random Number Generator (PRNG) is initialized from a predictable seed, such as the process ID or system time."
              },
              "fullDescription": {
                "text": "The use of predictable seeds significantly reduces the number of possible seeds that an attacker would need to test in order to predict which random numbers will be generated by the PRNG."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-335",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-338",
              "name": "Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
              "shortDescription": {
                "text": "The product uses a Pseudo-Random Number Generator (PRNG) in a security context, but the PRNG's algorithm is not cryptographically strong."
              },
              "fullDescription": {
                "text": "When a non-cryptographic PRNG is used in a cryptographic context, it can expose the cryptography to certain types of attacks. Often a pseudo-random number generator (PRNG) is not designed for cryptography. Sometimes a mediocre source of randomness is sufficient or preferable for algorithms that use random numbers. Weak generators generally take less processing power and/or do not use the precious, finite, entropy sources on a system. While such PRNGs might have very useful features, these same features could be used to break the cryptography."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-339",
              "name": "Small Seed Space in PRNG",
              "shortDescription": {
                "text": "A PRNG uses a relatively small space of seeds."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-335",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-341",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-340",
              "name": "Generation of Predictable Numbers or Identifiers",
              "shortDescription": {
                "text": "The product uses a scheme that generates numbers or identifiers that are more predictable than required."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-341",
              "name": "Predictable from Observable State",
              "shortDescription": {
                "text": "A number or object is predictable based on observations that the attacker can make about the state of the system or network, such as time, process ID, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-340",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-342",
              "name": "Predictable Exact Value from Previous Values",
              "shortDescription": {
                "text": "An exact value or random number can be precisely predicted by observing previous values."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-340",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-343",
              "name": "Predictable Value Range from Previous Values",
              "shortDescription": {
                "text": "The software's random number generator produces a series of values which, when observed, can be used to infer a relatively small range of possibilities for the next value that could be generated."
              },
              "fullDescription": {
                "text": "The output of a random number generator should not be predictable based on observations of previous values. In some cases, an attacker cannot predict the exact value that will be produced next, but can narrow down the possibilities significantly. This reduces the amount of effort to perform a brute force attack. For example, suppose the product generates random numbers between 1 and 100, but it always produces a larger value until it reaches 100. If the generator produces an 80, then the attacker knows that the next value will be somewhere between 81 and 100. Instead of 100 possibilities, the attacker only needs to consider 20."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-340",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-344",
              "name": "Use of Invariant Value in Dynamically Changing Context",
              "shortDescription": {
                "text": "The product uses a constant value, name, or reference, but this value can (or should) vary across different environments."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-345",
              "name": "Insufficient Verification of Data Authenticity",
              "shortDescription": {
                "text": "The software does not sufficiently verify the origin or authenticity of data, in a way that causes it to accept invalid data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-346",
              "name": "Origin Validation Error",
              "shortDescription": {
                "text": "The software does not properly verify that the source of data or communication is valid."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-347",
              "name": "Improper Verification of Cryptographic Signature",
              "shortDescription": {
                "text": "The software does not verify, or incorrectly verifies, the cryptographic signature for data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-348",
              "name": "Use of Less Trusted Source",
              "shortDescription": {
                "text": "The software has two different sources of the same data or information, but it uses the source that has less support for verification, is less trusted, or is less resistant to attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-349",
              "name": "Acceptance of Extraneous Untrusted Data With Trusted Data",
              "shortDescription": {
                "text": "The software, when processing trusted data, accepts any untrusted data that is also included with the trusted data, treating the untrusted data as if it were trusted."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-350",
              "name": "Reliance on Reverse DNS Resolution for a Security-Critical Action",
              "shortDescription": {
                "text": "The software performs reverse DNS resolution on an IP address to obtain the hostname and make a security decision, but it does not properly ensure that the IP address is truly associated with the hostname."
              },
              "fullDescription": {
                "text": "Since DNS names can be easily spoofed or misreported, and it may be difficult for the software to detect if a trusted DNS server has been compromised, DNS names do not constitute a valid authentication mechanism. When the software performs a reverse DNS resolution for an IP address, if an attacker controls the server for that IP address, then the attacker can cause the server to return an arbitrary hostname. As a result, the attacker may be able to bypass authentication, cause the wrong hostname to be recorded in log files to hide activities, or perform other attacks. Attackers can spoof DNS names by either (1) compromising a DNS server and modifying its records (sometimes called DNS cache poisoning), or (2) having legitimate control over a DNS server associated with their IP address."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-290",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-807",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-351",
              "name": "Insufficient Type Distinction",
              "shortDescription": {
                "text": "The software does not properly distinguish between different types of elements in a way that leads to insecure behavior."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-352",
              "name": "Cross-Site Request Forgery (CSRF)",
              "shortDescription": {
                "text": "The web application does not, or can not, sufficiently verify whether a well-formed, valid, consistent request was intentionally provided by the user who submitted the request."
              },
              "fullDescription": {
                "text": "When a web server is designed to receive a request from a client without any mechanism for verifying that it was intentionally sent, then it might be possible for an attacker to trick a client into making an unintentional request to the web server which will be treated as an authentic request. This can be done via a URL, image load, XMLHttpRequest, etc. and can result in exposure of data or unintended code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-346",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-441",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-613",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                }
              ]
            },
            {
              "id": "CWE-353",
              "name": "Missing Support for Integrity Check",
              "shortDescription": {
                "text": "The software uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum."
              },
              "fullDescription": {
                "text": "If integrity check values or checksums are omitted from a protocol, there is no way of determining if data has been corrupted in transmission. The lack of checksum functionality in a protocol removes the first application-level check of data that can be used. The end-to-end philosophy of checks states that integrity checks should be performed at the lowest level that they can be completely implemented. Excluding further sanity checks and input validation performed by applications, the protocol's checksum is the most important level of checksum, since it can be performed more completely than at any previous level and takes into account entire messages, as opposed to single packets."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-354",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-354",
              "name": "Improper Validation of Integrity Check Value",
              "shortDescription": {
                "text": "The software does not validate or incorrectly validates the integrity check values or checksums of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission."
              },
              "fullDescription": {
                "text": "Improper validation of checksums before use results in an unnecessary risk that can easily be mitigated. The protocol specification describes the algorithm used for calculating the checksum. It is then a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. Improper verification of the calculated checksum and the received checksum can lead to far greater consequences."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-353",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-356",
              "name": "Product UI does not Warn User of Unsafe Actions",
              "shortDescription": {
                "text": "The software's user interface does not warn the user before undertaking an unsafe action on behalf of that user. This makes it easier for attackers to trick users into inflicting damage to their system."
              },
              "fullDescription": {
                "text": "Software systems should warn users that a potentially dangerous action may occur if the user proceeds. For example, if the user downloads a file from an unknown source and attempts to execute the file on their machine, then the application's GUI can indicate that the file is unsafe."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-357",
              "name": "Insufficient UI Warning of Dangerous Operations",
              "shortDescription": {
                "text": "The user interface provides a warning to a user regarding dangerous or sensitive operations, but the warning is not noticeable enough to warrant attention."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-358",
              "name": "Improperly Implemented Security Check for Standard",
              "shortDescription": {
                "text": "The software does not implement or incorrectly implements one or more security-relevant checks as specified by the design of a standardized algorithm, protocol, or technique."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-290",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-359",
              "name": "Exposure of Private Personal Information to an Unauthorized Actor",
              "shortDescription": {
                "text": "The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected."
              },
              "fullDescription": {
                "text": "There are many types of sensitive information that products must protect from attackers, including system data, communications, configuration, business secrets, intellectual property, and an individual's personal (private) information. Private personal information may include a password, phone number, geographic location, personal messages, credit card number, etc. Private information is important to consider whether the person is a user of the product, or part of a data set that is processed by the product. An exposure of private information does not necessarily prevent the product from working properly, and in fact the exposure might be intended by the developer, e.g. as part of data sharing with other organizations. However, the exposure of personal private information can still be undesirable or explicitly prohibited by law or regulation. Some types of private information include: Government identifiers, such as Social Security Numbers Contact information, such as home addresses and telephone numbers Geographic location - where the user is (or was) Employment history Financial data - such as credit card numbers, salary, bank accounts, and debts Pictures, video, or audio Behavioral patterns - such as web surfing history, when certain activities are performed, etc. Relationships (and types of relationships) with others - family, friends, contacts, etc. Communications - e-mail addresses, private messages, text messages, chat logs, etc. Health - medical conditions, insurance status, prescription records Account passwords and other credentials Some of this information may be characterized as PII (Personally Identifiable Information), Protected Health Information (PHI), etc. Categories of private information may overlap or vary based on the intended usage or the policies and practices of a particular industry. Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-360",
              "name": "Trust of System Event Data",
              "shortDescription": {
                "text": "Security based on event locations are insecure and can be spoofed."
              },
              "fullDescription": {
                "text": "Events are a messaging system which may provide control data to programs listening for events. Events often do not have any type of authentication framework to allow them to be verified from a trusted source. Any application, in Windows, on a given desktop can send a message to any window on the same desktop. There is no authentication framework for these messages. Therefore, any message can be used to manipulate any process on the desktop if the process does not check the validity and safeness of those messages."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-362",
              "name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')",
              "shortDescription": {
                "text": "The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently."
              },
              "fullDescription": {
                "text": "This can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider. A race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc. A race condition violates these properties, which are closely related: Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution. Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource. A race condition exists when an interfering code sequence can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single x++ statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x). The interfering code sequence could be trusted or untrusted. A trusted interfering code sequence occurs within the program; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable program."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-363",
              "name": "Race Condition Enabling Link Following",
              "shortDescription": {
                "text": "The software checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the software to access the wrong file."
              },
              "fullDescription": {
                "text": "While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the software to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-367",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-59",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-364",
              "name": "Signal Handler Race Condition",
              "shortDescription": {
                "text": "The software uses a signal handler that introduces a race condition."
              },
              "fullDescription": {
                "text": "Race conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the software state to be corrupted, possibly leading to a denial of service or even code execution. These issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the regular code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered. There are several known behaviors related to signal handlers that have received the label of signal handler race condition: Shared state (e.g. global data or static variables) that are accessible to both a signal handler and regular code Shared state between a signal handler and other signal handlers Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution. Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses. Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses. Signal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code: Avoiding shared state Using synchronization in the signal handler Using synchronization in the regular code Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-415",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-416",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-365",
              "name": "Race Condition in Switch",
              "shortDescription": {
                "text": "The code contains a switch statement in which the switched variable can be modified while the switch is still executing, resulting in unexpected behavior."
              },
              "fullDescription": {
                "text": "This issue is particularly important in the case of switch statements that involve fall-through style case statements - i.e., those which do not end with break. If the variable being tested by the switch changes in the course of execution, this could change the intended logic of the switch so much that it places the process in a contradictory state and in some cases could even result in memory corruption."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-367",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-364",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-366",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-366",
              "name": "Race Condition within a Thread",
              "shortDescription": {
                "text": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-367",
              "name": "Time-of-check Time-of-use (TOCTOU) Race Condition",
              "shortDescription": {
                "text": "The software checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the software to perform invalid actions when the resource is in an unexpected state."
              },
              "fullDescription": {
                "text": "This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-368",
              "name": "Context Switching Race Condition",
              "shortDescription": {
                "text": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch."
              },
              "fullDescription": {
                "text": "This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-364",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-369",
              "name": "Divide By Zero",
              "shortDescription": {
                "text": "The product divides a value by zero."
              },
              "fullDescription": {
                "text": "This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-370",
              "name": "Missing Check for Certificate Revocation after Initial Check",
              "shortDescription": {
                "text": "The software does not check the revocation status of a certificate after its initial revocation check, which can cause the software to perform privileged actions even after the certificate is revoked at a later time."
              },
              "fullDescription": {
                "text": "If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-299",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-296",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-297",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-298",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-372",
              "name": "Incomplete Internal State Distinction",
              "shortDescription": {
                "text": "The software does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-373",
              "name": "DEPRECATED: State Synchronization Error",
              "shortDescription": {
                "text": "This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662)."
              }
            },
            {
              "id": "CWE-374",
              "name": "Passing Mutable Objects to an Untrusted Method",
              "shortDescription": {
                "text": "The program sends non-cloned mutable data as an argument to a method or function."
              },
              "fullDescription": {
                "text": "The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-375",
              "name": "Returning a Mutable Object to an Untrusted Caller",
              "shortDescription": {
                "text": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function."
              },
              "fullDescription": {
                "text": "In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-377",
              "name": "Insecure Temporary File",
              "shortDescription": {
                "text": "Creating and using insecure temporary files can leave application and system data vulnerable to attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-378",
              "name": "Creation of Temporary File With Insecure Permissions",
              "shortDescription": {
                "text": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-377",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-379",
              "name": "Creation of Temporary File in Directory with Insecure Permissions",
              "shortDescription": {
                "text": "The software creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file."
              },
              "fullDescription": {
                "text": "On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-377",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-382",
              "name": "J2EE Bad Practices: Use of System.exit()",
              "shortDescription": {
                "text": "A J2EE application uses System.exit(), which also shuts down its container."
              },
              "fullDescription": {
                "text": "It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-383",
              "name": "J2EE Bad Practices: Direct Use of Threads",
              "shortDescription": {
                "text": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone."
              },
              "fullDescription": {
                "text": "Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-384",
              "name": "Session Fixation",
              "shortDescription": {
                "text": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions."
              },
              "fullDescription": {
                "text": "Such a scenario is commonly observed when: A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user. An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session. The application or container uses predictable session identifiers. In the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-346",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-472",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-441",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                }
              ]
            },
            {
              "id": "CWE-385",
              "name": "Covert Timing Channel",
              "shortDescription": {
                "text": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information."
              },
              "fullDescription": {
                "text": "In some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state. Covert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-514",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-386",
              "name": "Symbolic Name not Mapping to Correct Object",
              "shortDescription": {
                "text": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-367",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-486",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-390",
              "name": "Detection of Error Condition Without Action",
              "shortDescription": {
                "text": "The software detects a specific error, but takes no actions to handle the error."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-401",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-391",
              "name": "Unchecked Error Condition",
              "shortDescription": {
                "text": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-392",
              "name": "Missing Report of Error Condition",
              "shortDescription": {
                "text": "The software encounters an error but does not provide a status code or return value to indicate that an error has occurred."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-393",
              "name": "Return of Wrong Status Code",
              "shortDescription": {
                "text": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result."
              },
              "fullDescription": {
                "text": "This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the software to assume that an action is safe, even when it is not."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-394",
              "name": "Unexpected Status Code or Return Value",
              "shortDescription": {
                "text": "The software does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-395",
              "name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference",
              "shortDescription": {
                "text": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer."
              },
              "fullDescription": {
                "text": "Programmers typically catch NullPointerException under three circumstances: The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem. The program explicitly throws a NullPointerException to signal an error condition. The code is part of a test harness that supplies unexpected input to the classes under test. Of these three circumstances, only the last is acceptable."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-396",
              "name": "Declaration of Catch for Generic Exception",
              "shortDescription": {
                "text": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities."
              },
              "fullDescription": {
                "text": "Multiple catch blocks can get ugly and repetitive, but condensing catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of Java's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-397",
              "name": "Declaration of Throws for Generic Exception",
              "shortDescription": {
                "text": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities."
              },
              "fullDescription": {
                "text": "Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-400",
              "name": "Uncontrolled Resource Consumption",
              "shortDescription": {
                "text": "The software does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources."
              },
              "fullDescription": {
                "text": "Limited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the software, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system. There are at least three distinct scenarios which can commonly lead to resource exhaustion: Lack of throttling for the number of allocated resources Losing all references to a resource before reaching the shutdown stage Not closing/returning a resource after processing Resource exhaustion problems are often result due to an incorrect implementation of the following situations: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for releasing the resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-401",
              "name": "Missing Release of Memory after Effective Lifetime",
              "shortDescription": {
                "text": "The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory."
              },
              "fullDescription": {
                "text": "This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-772",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-402",
              "name": "Transmission of Private Resources into a New Sphere ('Resource Leak')",
              "shortDescription": {
                "text": "The software makes resources available to untrusted parties when those resources are only intended to be accessed by the software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-403",
              "name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')",
              "shortDescription": {
                "text": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors."
              },
              "fullDescription": {
                "text": "When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-402",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-404",
              "name": "Improper Resource Shutdown or Release",
              "shortDescription": {
                "text": "The program does not release or incorrectly releases a resource before it is made available for re-use."
              },
              "fullDescription": {
                "text": "When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-619",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-405",
              "name": "Asymmetric Resource Consumption (Amplification)",
              "shortDescription": {
                "text": "Software that does not appropriately monitor or control resource consumption can lead to adverse system performance."
              },
              "fullDescription": {
                "text": "This situation is amplified if the software allows malicious users or attackers to consume more resources than their access level permits. Exploiting such a weakness can lead to asymmetric resource consumption, aiding in amplification attacks against the system or the network."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-406",
              "name": "Insufficient Control of Network Message Volume (Network Amplification)",
              "shortDescription": {
                "text": "The software does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the software to transmit more traffic than should be allowed for that actor."
              },
              "fullDescription": {
                "text": "In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-407",
              "name": "Inefficient Algorithmic Complexity",
              "shortDescription": {
                "text": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-408",
              "name": "Incorrect Behavior Order: Early Amplification",
              "shortDescription": {
                "text": "The software allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-409",
              "name": "Improper Handling of Highly Compressed Data (Data Amplification)",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output."
              },
              "fullDescription": {
                "text": "An example of data amplification is a decompression bomb, a small ZIP file that can produce a large amount of data when it is decompressed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-410",
              "name": "Insufficient Resource Pool",
              "shortDescription": {
                "text": "The software's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources."
              },
              "fullDescription": {
                "text": "Frequently the consequence is a flood of connection or sessions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-412",
              "name": "Unrestricted Externally Accessible Lock",
              "shortDescription": {
                "text": "The software properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control."
              },
              "fullDescription": {
                "text": "This prevents the software from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-410",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-413",
              "name": "Improper Resource Locking",
              "shortDescription": {
                "text": "The software does not lock or does not correctly lock a resource when the software must have exclusive access to the resource."
              },
              "fullDescription": {
                "text": "When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the software. This might violate the software's assumption that the resource will not change, potentially leading to unexpected behaviors."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-414",
              "name": "Missing Lock Check",
              "shortDescription": {
                "text": "A product does not check to see if a lock is present before performing sensitive operations on a resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-415",
              "name": "Double Free",
              "shortDescription": {
                "text": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations."
              },
              "fullDescription": {
                "text": "When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-825",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-666",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-416",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-416",
              "name": "Use After Free",
              "shortDescription": {
                "text": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code."
              },
              "fullDescription": {
                "text": "The use of previously-freed memory can have any number of adverse consequences, ranging from the corruption of valid data to the execution of arbitrary code, depending on the instantiation and timing of the flaw. The simplest way data corruption may occur involves the system's reuse of the freed memory. Use-after-free errors have two common and sometimes overlapping causes: Error conditions and other exceptional circumstances. Confusion over which part of the program is responsible for freeing the memory. In this scenario, the memory in question is allocated to another pointer validly at some point after it has been freed. The original pointer to the freed memory is used again and points to somewhere within the new allocation. As the data is changed, it corrupts the validly used memory; this induces undefined behavior in the process. If the newly allocated data chances to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-825",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-419",
              "name": "Unprotected Primary Channel",
              "shortDescription": {
                "text": "The software uses a primary channel for administration or restricted functionality, but it does not properly protect the channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-420",
              "name": "Unprotected Alternate Channel",
              "shortDescription": {
                "text": "The software protects a primary channel, but it does not use the same level of protection for an alternate channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-421",
              "name": "Race Condition During Access to Alternate Channel",
              "shortDescription": {
                "text": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors."
              },
              "fullDescription": {
                "text": "This creates a race condition that allows an attacker to access the channel before the authorized user does."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-420",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-422",
              "name": "Unprotected Windows Messaging Channel ('Shatter')",
              "shortDescription": {
                "text": "The software does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-420",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-360",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-423",
              "name": "DEPRECATED (Duplicate): Proxied Trusted Channel",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441."
              }
            },
            {
              "id": "CWE-424",
              "name": "Improper Protection of Alternate Path",
              "shortDescription": {
                "text": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-638",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-425",
              "name": "Direct Request ('Forced Browsing')",
              "shortDescription": {
                "text": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files."
              },
              "fullDescription": {
                "text": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-862",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-288",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-424",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-98",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-426",
              "name": "Untrusted Search Path",
              "shortDescription": {
                "text": "The application searches for critical resources using an externally-supplied search path that can point to resources that are not under the application's direct control."
              },
              "fullDescription": {
                "text": "This might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the application uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted application would then execute. The problem extends to any type of critical resource that the application trusts. Some of the most common variants of untrusted search path are: In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library. In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-673",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-427",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-428",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-427",
              "name": "Uncontrolled Search Path Element",
              "shortDescription": {
                "text": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors."
              },
              "fullDescription": {
                "text": "Although this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as /tmp or the current working directory. In Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled: the directory from which the program has been loaded the current working directory. In some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used. In some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-428",
              "name": "Unquoted Search Path or Element",
              "shortDescription": {
                "text": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path."
              },
              "fullDescription": {
                "text": "If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as C:Program.exe to be run by a privileged program making use of WinExec."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-430",
              "name": "Deployment of Wrong Handler",
              "shortDescription": {
                "text": "The wrong handler is assigned to process an object."
              },
              "fullDescription": {
                "text": "An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically determining type of the object even if it is contradictory to an explicitly specified type."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-433",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-434",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-431",
              "name": "Missing Handler",
              "shortDescription": {
                "text": "A handler is not available or implemented."
              },
              "fullDescription": {
                "text": "When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-433",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-432",
              "name": "Dangerous Signal Handler not Disabled During Sensitive Operations",
              "shortDescription": {
                "text": "The application uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running."
              },
              "fullDescription": {
                "text": "During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-364",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-433",
              "name": "Unparsed Raw Web Content Delivery",
              "shortDescription": {
                "text": "The software stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server."
              },
              "fullDescription": {
                "text": "If code is stored in a file with an extension such as .inc or .pl, and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-219",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-434",
              "name": "Unrestricted Upload of File with Dangerous Type",
              "shortDescription": {
                "text": "The software allows the attacker to upload or transfer files of dangerous types that can be automatically processed within the product's environment."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-351",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-430",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-435",
              "name": "Improper Interaction Between Multiple Correctly-Behaving Entities",
              "shortDescription": {
                "text": "An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses."
              },
              "fullDescription": {
                "text": "When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure."
              }
            },
            {
              "id": "CWE-436",
              "name": "Interpretation Conflict",
              "shortDescription": {
                "text": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state."
              },
              "fullDescription": {
                "text": "This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-435",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-437",
              "name": "Incomplete Model of Endpoint Features",
              "shortDescription": {
                "text": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-439",
              "name": "Behavioral Change in New Version or Environment",
              "shortDescription": {
                "text": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-435",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-440",
              "name": "Expected Behavior Violation",
              "shortDescription": {
                "text": "A feature, API, or function does not perform according to its specification."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-441",
              "name": "Unintended Proxy or Intermediary ('Confused Deputy')",
              "shortDescription": {
                "text": "The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor."
              },
              "fullDescription": {
                "text": "If an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker. Since proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when: The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component; The attacker is prevented from making the request directly to the target; and The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-443",
              "name": "DEPRECATED (Duplicate): HTTP response splitting",
              "shortDescription": {
                "text": "This weakness can be found at CWE-113."
              }
            },
            {
              "id": "CWE-444",
              "name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request Smuggling')",
              "shortDescription": {
                "text": "When malformed or abnormal HTTP requests are interpreted by one or more entities in the data flow between the user and the web server, such as a proxy or firewall, they can be interpreted inconsistently, allowing the attacker to smuggle a request to one device without the other device being aware of it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-446",
              "name": "UI Discrepancy for Security Feature",
              "shortDescription": {
                "text": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state."
              },
              "fullDescription": {
                "text": "When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the software does not actually enable the encryption. Alternately, the user might provide a restrict ALL' access control rule, but the software only implements restrict SOME."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-447",
              "name": "Unimplemented or Unsupported Feature in UI",
              "shortDescription": {
                "text": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-446",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-671",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-448",
              "name": "Obsolete Feature in UI",
              "shortDescription": {
                "text": "A UI function is obsolete and the product does not warn the user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-446",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-449",
              "name": "The UI Performs the Wrong Action",
              "shortDescription": {
                "text": "The UI performs the wrong action with respect to the user's request."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-446",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-450",
              "name": "Multiple Interpretations of UI Input",
              "shortDescription": {
                "text": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-357",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-451",
              "name": "User Interface (UI) Misrepresentation of Critical Information",
              "shortDescription": {
                "text": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks."
              },
              "fullDescription": {
                "text": "If an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event. UI misrepresentation can take many forms: Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the software or the environment the software is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes. Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay. Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF) Timing: the software is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error. Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. filename.txt .exe). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string. Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display. Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-221",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-346",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-453",
              "name": "Insecure Default Variable Initialization",
              "shortDescription": {
                "text": "The software, by default, initializes an internal variable with an insecure or less secure value than is possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1188",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-454",
              "name": "External Initialization of Trusted Variables or Data Stores",
              "shortDescription": {
                "text": "The software initializes critical internal variables or data stores using inputs that can be modified by untrusted actors."
              },
              "fullDescription": {
                "text": "A software system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-456",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-455",
              "name": "Non-exit on Failed Initialization",
              "shortDescription": {
                "text": "The software does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error, which can cause the software to execute in a less secure fashion than intended by the administrator."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-636",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-456",
              "name": "Missing Initialization of a Variable",
              "shortDescription": {
                "text": "The software does not initialize critical variables, which causes the execution environment to use unexpected values."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-909",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-89",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-98",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-457",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-457",
              "name": "Use of Uninitialized Variable",
              "shortDescription": {
                "text": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results."
              },
              "fullDescription": {
                "text": "In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-908",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-458",
              "name": "DEPRECATED: Incorrect Initialization",
              "shortDescription": {
                "text": "This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem."
              }
            },
            {
              "id": "CWE-459",
              "name": "Incomplete Cleanup",
              "shortDescription": {
                "text": "The software does not properly clean up and remove temporary or supporting resources after they have been used."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-460",
              "name": "Improper Cleanup on Thrown Exception",
              "shortDescription": {
                "text": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow."
              },
              "fullDescription": {
                "text": "Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-459",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-462",
              "name": "Duplicate Key in Associative List (Alist)",
              "shortDescription": {
                "text": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error."
              },
              "fullDescription": {
                "text": "A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-694",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-463",
              "name": "Deletion of Data Structure Sentinel",
              "shortDescription": {
                "text": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems."
              },
              "fullDescription": {
                "text": "Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-707",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-464",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-464",
              "name": "Addition of Data Structure Sentinel",
              "shortDescription": {
                "text": "The accidental addition of a data-structure sentinel can cause serious programming logic problems."
              },
              "fullDescription": {
                "text": "Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-466",
              "name": "Return of Pointer Value Outside of Expected Range",
              "shortDescription": {
                "text": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-467",
              "name": "Use of sizeof() on a Pointer Type",
              "shortDescription": {
                "text": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated."
              },
              "fullDescription": {
                "text": "The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-131",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-468",
              "name": "Incorrect Pointer Scaling",
              "shortDescription": {
                "text": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-469",
              "name": "Use of Pointer Subtraction to Determine Size",
              "shortDescription": {
                "text": "The application subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-470",
              "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')",
              "shortDescription": {
                "text": "The application uses external input with reflection to select which classes or code to use, but it does not sufficiently prevent the input from selecting improper classes or code."
              },
              "fullDescription": {
                "text": "If the application uses external inputs to determine which class to instantiate or which method to invoke, then an attacker could supply values to select unexpected classes or methods. If this occurs, then the attacker could create control flow paths that were not intended by the developer. These paths could bypass authentication or access control checks, or otherwise cause the application to behave in an unexpected manner. This situation becomes a doomsday scenario if the attacker can upload files into a location that appears on the application's classpath (CWE-427) or add new entries to the application's classpath (CWE-426). Under either of these conditions, the attacker can use reflection to introduce new, malicious behavior into the application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-913",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-471",
              "name": "Modification of Assumed-Immutable Data (MAID)",
              "shortDescription": {
                "text": "The software does not properly protect an assumed-immutable element from being modified by an attacker."
              },
              "fullDescription": {
                "text": "This occurs when a particular input is critical enough to the functioning of the application that it should not be modifiable at all, but it is. Certain resources are often assumed to be immutable when they are not, such as hidden form fields in web applications, cookies, and reverse DNS lookups."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-472",
              "name": "External Control of Assumed-Immutable Web Parameter",
              "shortDescription": {
                "text": "The web application does not sufficiently verify inputs that are assumed to be immutable but are actually externally controllable, such as hidden form fields."
              },
              "fullDescription": {
                "text": "If a web product does not properly protect assumed-immutable values from modification in hidden form fields, parameters, cookies, or URLs, this can lead to modification of critical data. Web applications often mistakenly make the assumption that data passed to the client in hidden fields or cookies is not susceptible to tampering. Improper validation of data that are user-controllable can lead to the application processing incorrect, and often malicious, input. For example, custom cookies commonly store session data or persistent data across sessions. This kind of session data is normally involved in security related decisions on the server side, such as user authentication and access control. Thus, the cookies might contain sensitive data such as user credentials and privileges. This is a dangerous practice, as it can often lead to improper reliance on the value of the client-provided cookie by the server side application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-473",
              "name": "PHP External Variable Modification",
              "shortDescription": {
                "text": "A PHP application does not properly protect against the modification of variables from external sources, such as query parameters or cookies. This can expose the application to numerous weaknesses that would not exist otherwise."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-98",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-474",
              "name": "Use of Function with Inconsistent Implementations",
              "shortDescription": {
                "text": "The code uses a function that has inconsistent implementations across operating systems and versions."
              },
              "fullDescription": {
                "text": "The use of inconsistent implementations can cause changes in behavior when the code is ported or built under a different environment than the programmer expects, which can lead to security problems in some cases. The implementation of many functions varies by platform, and at times, even by different versions of the same platform. Implementation differences can include: Slight differences in the way parameters are interpreted leading to inconsistent results. Some implementations of the function carry significant security risks. The function might not be defined on all platforms. The function might change which return codes it can provide, or change the meaning of its return codes."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-475",
              "name": "Undefined Behavior for Input to API",
              "shortDescription": {
                "text": "The behavior of this function is undefined unless its control parameter is set to a specific value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-476",
              "name": "NULL Pointer Dereference",
              "shortDescription": {
                "text": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit."
              },
              "fullDescription": {
                "text": "NULL pointer dereference issues can occur through a number of flaws, including race conditions, and simple programming omissions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-754",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-477",
              "name": "Use of Obsolete Function",
              "shortDescription": {
                "text": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained."
              },
              "fullDescription": {
                "text": "As programming languages evolve, functions occasionally become obsolete due to: Advances in the language Improved understanding of how operations should be performed effectively and securely Changes in the conventions that govern certain operations Functions that are removed are usually replaced by newer counterparts that perform the same task in some different and hopefully improved way."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-478",
              "name": "Missing Default Case in Switch Statement",
              "shortDescription": {
                "text": "The code does not have a default case in a switch statement, which might lead to complex logical errors and resultant weaknesses."
              },
              "fullDescription": {
                "text": "This flaw represents a common problem in software development, in which not all possible values for a variable are considered or handled by a given process. Because of this, further decisions are made based on poor information, and cascading failure results. This cascading failure may result in any number of security issues, and constitutes a significant failure in the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1023",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-479",
              "name": "Signal Handler Use of a Non-reentrant Function",
              "shortDescription": {
                "text": "The program defines a signal handler that calls a non-reentrant function."
              },
              "fullDescription": {
                "text": "Non-reentrant functions are functions that cannot safely be called, interrupted, and then recalled before the first call has finished without resulting in memory corruption. This can lead to an unexpected system state and unpredictable results with a variety of potential consequences depending on context, including denial of service and code execution. Many functions are not reentrant, but some of them can result in the corruption of memory if they are used in a signal handler. The function call syslog() is an example of this. In order to perform its functionality, it allocates a small amount of memory as scratch space. If syslog() is suspended by a signal call and the signal handler calls syslog(), the memory used by both of these functions enters an undefined, and possibly, exploitable state. Implementations of malloc() and free() manage metadata in global structures in order to track which memory is allocated versus which memory is available, but they are non-reentrant. Simultaneous calls to these functions can cause corruption of the metadata."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-828",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-663",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-480",
              "name": "Use of Incorrect Operator",
              "shortDescription": {
                "text": "The programmer accidentally uses the wrong operator, which changes the application logic in security-relevant ways."
              },
              "fullDescription": {
                "text": "These types of errors are generally the result of a typo."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-481",
              "name": "Assigning instead of Comparing",
              "shortDescription": {
                "text": "The code uses an operator for assignment when the intention was to perform a comparison."
              },
              "fullDescription": {
                "text": "In many languages the compare statement is very close in appearance to the assignment statement and are often confused. This bug is generally the result of a typo and usually causes obvious problems with program execution. If the comparison is in an if statement, the if statement will usually evaluate the value of the right-hand side of the predicate."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-480",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-482",
              "name": "Comparing instead of Assigning",
              "shortDescription": {
                "text": "The code uses an operator for comparison when the intention was to perform an assignment."
              },
              "fullDescription": {
                "text": "In many languages, the compare statement is very close in appearance to the assignment statement; they are often confused."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-480",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-483",
              "name": "Incorrect Block Delimitation",
              "shortDescription": {
                "text": "The code does not explicitly delimit a block that is intended to contain 2 or more statements, creating a logic error."
              },
              "fullDescription": {
                "text": "In some languages, braces (or other delimiters) are optional for blocks. When the delimiter is omitted, it is possible to insert a logic error in which a statement is thought to be in a block but is not. In some cases, the logic error can have security implications."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-484",
              "name": "Omitted Break Statement in Switch",
              "shortDescription": {
                "text": "The program omits a break statement within a switch or similar construct, causing code associated with multiple conditions to execute. This can cause problems when the programmer only intended to execute code associated with one condition."
              },
              "fullDescription": {
                "text": "This can lead to critical code executing in situations where it should not."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-486",
              "name": "Comparison of Classes by Name",
              "shortDescription": {
                "text": "The program compares classes by name, which can cause it to use the wrong class when multiple classes can have the same name."
              },
              "fullDescription": {
                "text": "If the decision to trust the methods and data of an object is based on the name of a class, it is possible for malicious users to send objects of the same name as trusted classes and thereby gain the trust afforded to known classes and types."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1025",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-487",
              "name": "Reliance on Package-level Scope",
              "shortDescription": {
                "text": "Java packages are not inherently closed; therefore, relying on them for code security is not a good practice."
              },
              "fullDescription": {
                "text": "The purpose of package scope is to prevent accidental access by other parts of a program. This is an ease-of-software-development feature but not a security feature."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-488",
              "name": "Exposure of Data Element to Wrong Session",
              "shortDescription": {
                "text": "The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session."
              },
              "fullDescription": {
                "text": "Data can bleed from one session to another through member variables of singleton objects, such as Servlets, and objects from a shared pool. In the case of Servlets, developers sometimes do not understand that, unless a Servlet implements the SingleThreadModel interface, the Servlet is a singleton; there is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-489",
              "name": "Active Debug Code",
              "shortDescription": {
                "text": "The application is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information."
              },
              "fullDescription": {
                "text": "A common development practice is to add back door code specifically designed for debugging or testing purposes that is not intended to be shipped or deployed with the application. These back door entry points create security risks because they are not considered during design or testing and fall outside of the expected operating conditions of the application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-215",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-491",
              "name": "Public cloneable() Method Without Final ('Object Hijack')",
              "shortDescription": {
                "text": "A class has a cloneable() method that is not declared final, which allows an object to be created without calling the constructor. This can cause the object to be in an unexpected state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-492",
              "name": "Use of Inner Class Containing Sensitive Data",
              "shortDescription": {
                "text": "Inner classes are translated into classes that are accessible at package scope and may expose code that the programmer intended to keep private to attackers."
              },
              "fullDescription": {
                "text": "Inner classes quietly introduce several security concerns because of the way they are translated into Java bytecode. In Java source code, it appears that an inner class can be declared to be accessible only by the enclosing class, but Java bytecode has no concept of an inner class, so the compiler must transform an inner class declaration into a peer class with package level access to the original outer class. More insidiously, since an inner class can access private fields in its enclosing class, once an inner class becomes a peer class in bytecode, the compiler converts private fields accessed by the inner class into protected fields."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-493",
              "name": "Critical Public Variable Without Final Modifier",
              "shortDescription": {
                "text": "The product has a critical public variable that is not final, which allows the variable to be modified to contain unexpected values."
              },
              "fullDescription": {
                "text": "If a field is non-final and public, it can be changed once the value is set by any function that has access to the class which contains the field. This could lead to a vulnerability if other parts of the program make assumptions about the contents of that field."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-494",
              "name": "Download of Code Without Integrity Check",
              "shortDescription": {
                "text": "The product downloads source code or an executable from a remote location and executes the code without sufficiently verifying the origin and integrity of the code."
              },
              "fullDescription": {
                "text": "An attacker can execute malicious code by compromising the host server, performing DNS spoofing, or modifying the code in transit."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-495",
              "name": "Private Data Structure Returned From A Public Method",
              "shortDescription": {
                "text": "The product has a method that is declared public, but returns a reference to a private data structure, which could then be modified in unexpected ways."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-496",
              "name": "Public Data Assigned to Private Array-Typed Field",
              "shortDescription": {
                "text": "Assigning public data to a private array is equivalent to giving public access to the array."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-497",
              "name": "Exposure of Sensitive System Information to an Unauthorized Control Sphere",
              "shortDescription": {
                "text": "The application does not properly prevent sensitive system-level information from being accessed by unauthorized actors who do not have the same level of access to the underlying system as the application does."
              },
              "fullDescription": {
                "text": "Network-based software, such as web applications, often runs on top of an operating system or similar environment. When the application communicates with outside parties, details about the underlying system are expected to remain hidden, such as path names for data files, other OS users, installed packages, the application environment, etc. This system information may be provided by the application itself, or buried within diagnostic or debugging messages. Debugging information helps an adversary learn about the system and form an attack plan. An information exposure occurs when system data or debugging information leaves the program through an output stream or logging function that makes it accessible to unauthorized parties. Using other weaknesses, an attacker could cause errors to occur; the response to these errors can reveal detailed system information, along with other impacts. An attacker can use messages that reveal technologies, operating systems, and product versions to tune the attack against known vulnerabilities in these technologies. An application may use diagnostic methods that provide significant implementation details such as stack traces as part of its error handling mechanism."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-498",
              "name": "Cloneable Class Containing Sensitive Information",
              "shortDescription": {
                "text": "The code contains a class with sensitive data, but the class is cloneable. The data can then be accessed by cloning the class."
              },
              "fullDescription": {
                "text": "Cloneable classes are effectively open classes, since data cannot be hidden in them. Classes that do not explicitly deny cloning can be cloned by any other class without running the constructor."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-499",
              "name": "Serializable Class Containing Sensitive Data",
              "shortDescription": {
                "text": "The code contains a class with sensitive data, but the class does not explicitly deny serialization. The data can be accessed by serializing the class through another class."
              },
              "fullDescription": {
                "text": "Serializable classes are effectively open classes since data cannot be hidden in them. Classes that do not explicitly deny serialization can be serialized by any other class, which can then in turn use the data stored inside it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-500",
              "name": "Public Static Field Not Marked Final",
              "shortDescription": {
                "text": "An object contains a public static field that is not marked final, which might allow it to be modified in unexpected ways."
              },
              "fullDescription": {
                "text": "Public static variables can be read without an accessor and changed without a mutator by any classes in the application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-493",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-501",
              "name": "Trust Boundary Violation",
              "shortDescription": {
                "text": "The product mixes trusted and untrusted data in the same data structure or structured message."
              },
              "fullDescription": {
                "text": "A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary - to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. By combining trusted and untrusted data in the same data structure, it becomes easier for programmers to mistakenly trust unvalidated data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-502",
              "name": "Deserialization of Untrusted Data",
              "shortDescription": {
                "text": "The application deserializes untrusted data without sufficiently verifying that the resulting data will be valid."
              },
              "fullDescription": {
                "text": "It is often convenient to serialize objects for communication or to save them for later use. However, deserialized data or code can often be modified without using the provided accessor functions if it does not use cryptography to protect itself. Furthermore, any cryptography would still be client-side security -- which is a dangerous security assumption. Data that is untrusted can not be trusted to be well-formed. When developers place no restrictions on gadget chains, or series of instances and method invocations that can self-execute during the deserialization process (i.e., before the object is returned to the caller), it is sometimes possible for attackers to leverage them to perform unauthorized actions, like generating a shell."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-913",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-915",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-506",
              "name": "Embedded Malicious Code",
              "shortDescription": {
                "text": "The application contains code that appears to be malicious in nature."
              },
              "fullDescription": {
                "text": "Malicious flaws have acquired colorful names, including Trojan horse, trapdoor, timebomb, and logic-bomb. A developer might insert malicious code with the intent to subvert the security of an application or its host system at some time in the future. It generally refers to a program that performs a useful service but exploits rights of the program's user in a way the user does not intend."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-507",
              "name": "Trojan Horse",
              "shortDescription": {
                "text": "The software appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-506",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-508",
              "name": "Non-Replicating Malicious Code",
              "shortDescription": {
                "text": "Non-replicating malicious code only resides on the target system or software that is attacked; it does not attempt to spread to other systems."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-507",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-509",
              "name": "Replicating Malicious Code (Virus or Worm)",
              "shortDescription": {
                "text": "Replicating malicious code, including viruses and worms, will attempt to attack other systems once it has successfully compromised the target system or software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-507",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-510",
              "name": "Trapdoor",
              "shortDescription": {
                "text": "A trapdoor is a hidden piece of code that responds to a special input, allowing its user access to resources without passing through the normal security enforcement mechanism."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-506",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-511",
              "name": "Logic/Time Bomb",
              "shortDescription": {
                "text": "The software contains code that is designed to disrupt the legitimate operation of the software (or its environment) when a certain time passes, or when a certain logical condition is met."
              },
              "fullDescription": {
                "text": "When the time bomb or logic bomb is detonated, it may perform a denial of service such as crashing the system, deleting critical data, or degrading system response time. This bomb might be placed within either a replicating or non-replicating Trojan horse."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-506",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-512",
              "name": "Spyware",
              "shortDescription": {
                "text": "The software collects personally identifiable information about a human user or the user's activities, but the software accesses this information using other resources besides itself, and it does not require that user's explicit approval or direct input into the software."
              },
              "fullDescription": {
                "text": "Spyware is a commonly used term with many definitions and interpretations. In general, it is meant to software that collects information or installs functionality that human users might not allow if they were fully aware of the actions being taken by the software. For example, a user might expect that tax software would collect a social security number and include it when filing a tax return, but that same user would not expect gaming software to obtain the social security number from that tax software's data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-506",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-514",
              "name": "Covert Channel",
              "shortDescription": {
                "text": "A covert channel is a path that can be used to transfer information in a way not intended by the system's designers."
              },
              "fullDescription": {
                "text": "Typically the system has not given authorization for the transmission and has no knowledge of its occurrence."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1229",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-515",
              "name": "Covert Storage Channel",
              "shortDescription": {
                "text": "A covert storage channel transfers information through the setting of bits by one program and the reading of those bits by another. What distinguishes this case from that of ordinary operation is that the bits are used to convey encoded information."
              },
              "fullDescription": {
                "text": "Covert storage channels occur when out-of-band data is stored in messages for the purpose of memory reuse. Covert channels are frequently classified as either storage or timing channels. Examples would include using a file intended to hold only audit information to convey user passwords--using the name of a file or perhaps status bits associated with it that can be read by all users to signal the contents of the file. Steganography, concealing information in such a manner that no one but the intended recipient knows of the existence of the message, is a good example of a covert storage channel."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-514",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-516",
              "name": "DEPRECATED (Duplicate): Covert Timing Channel",
              "shortDescription": {
                "text": "This weakness can be found at CWE-385."
              }
            },
            {
              "id": "CWE-520",
              "name": ".NET Misconfiguration: Use of Impersonation",
              "shortDescription": {
                "text": "Allowing a .NET application to run at potentially escalated levels of access to the underlying operating and file systems can be dangerous and result in various forms of attacks."
              },
              "fullDescription": {
                "text": ".NET server applications can optionally execute using the identity of the user authenticated to the client. The intention of this functionality is to bypass authentication and access control checks within the .NET application code. Authentication is done by the underlying web server (Microsoft Internet Information Service IIS), which passes the authenticated token, or unauthenticated anonymous token, to the .NET application. Using the token to impersonate the client, the application then relies on the settings within the NTFS directories and files to control access. Impersonation enables the application, on the server running the .NET application, to both execute code and access resources in the context of the authenticated and authorized user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-266",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-521",
              "name": "Weak Password Requirements",
              "shortDescription": {
                "text": "The product does not require that users should have strong passwords, which makes it easier for attackers to compromise user accounts."
              },
              "fullDescription": {
                "text": "Authentication mechanisms often rely on a memorized secret (also known as a password) to provide an assertion of identity for a user of a system. It is therefore important that this password be of sufficient complexity and impractical for an adversary to guess. The specific requirements around how complex a password needs to be depends on the type of system being protected. Selecting the correct password requirements and enforcing them through implementation are critical to the overall success of the authentication mechanism."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-522",
              "name": "Insufficiently Protected Credentials",
              "shortDescription": {
                "text": "The product transmits or stores authentication credentials, but it uses an insecure method that is susceptible to unauthorized interception and/or retrieval."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-523",
              "name": "Unprotected Transport of Credentials",
              "shortDescription": {
                "text": "Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-522",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-312",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-524",
              "name": "Use of Cache Containing Sensitive Information",
              "shortDescription": {
                "text": "The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere."
              },
              "fullDescription": {
                "text": "Applications may use caches to improve efficiency when communicating with remote entities or performing intensive calculations. A cache maintains a pool of objects, threads, connections, pages, financial data, passwords, or other resources to minimize the time it takes to initialize and access these resources. If the cache is accessible to unauthorized actors, attackers can read the cache and obtain this sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-525",
              "name": "Use of Web Browser Cache Containing Sensitive Information",
              "shortDescription": {
                "text": "The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-524",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-526",
              "name": "Exposure of Sensitive Information Through Environmental Variables",
              "shortDescription": {
                "text": "Environmental variables may contain sensitive information about a remote server."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-497",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-527",
              "name": "Exposure of Version-Control Repository to an Unauthorized Control Sphere",
              "shortDescription": {
                "text": "The product stores a CVS, git, or other repository in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors."
              },
              "fullDescription": {
                "text": "Version control repositories such as CVS or git store version-specific metadata and other details within subdirectories. If these subdirectories are stored on a web server or added to an archive, then these could be used by an attacker. This information may include usernames, filenames, path root, IP addresses, and detailed diff data about how files have been changed - which could reveal source code snippets that were never intended to be made public."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-528",
              "name": "Exposure of Core Dump File to an Unauthorized Control Sphere",
              "shortDescription": {
                "text": "The product generates a core dump file in a directory, archive, or other resource that is stored, transferred, or otherwise made accessible to unauthorized actors."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-529",
              "name": "Exposure of Access Control List Files to an Unauthorized Control Sphere",
              "shortDescription": {
                "text": "The product stores access control list files in a directory or other container that is accessible to actors outside of the intended control sphere."
              },
              "fullDescription": {
                "text": "Exposure of these access control list files may give the attacker information about the configuration of the site or system. This information may then be used to bypass the intended security policy or identify trusted systems from which an attack can be launched."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-530",
              "name": "Exposure of Backup File to an Unauthorized Control Sphere",
              "shortDescription": {
                "text": "A backup file is stored in a directory or archive that is made accessible to unauthorized actors."
              },
              "fullDescription": {
                "text": "Often, older backup files are renamed with an extension such as .~bk to distinguish them from production files. The source code for old files that have been renamed in this manner and left in the webroot can often be retrieved. This renaming may have been performed automatically by the web server, or manually by the administrator."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-531",
              "name": "Inclusion of Sensitive Information in Test Code",
              "shortDescription": {
                "text": "Accessible test applications can pose a variety of security risks. Since developers or administrators rarely consider that someone besides themselves would even know about the existence of these applications, it is common for them to contain sensitive information or functions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-540",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-532",
              "name": "Insertion of Sensitive Information into Log File",
              "shortDescription": {
                "text": "Information written to log files can be of a sensitive nature and give valuable guidance to an attacker or expose sensitive user information."
              },
              "fullDescription": {
                "text": "While logging all information may be helpful during development stages, it is important that logging levels be set appropriately before a product ships so that sensitive user data and system information are not accidentally exposed to potential attackers. Different log files may be produced and stored for: Server log files (e.g. server.log). This can give information on whatever application left the file. Usually this can give full path names and system information, and sometimes usernames and passwords. log files that are used for debugging"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-538",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-533",
              "name": "DEPRECATED: Information Exposure Through Server Log Files",
              "shortDescription": {
                "text": "This entry has been deprecated because its abstraction was too low-level. See CWE-532."
              }
            },
            {
              "id": "CWE-534",
              "name": "DEPRECATED: Information Exposure Through Debug Log Files",
              "shortDescription": {
                "text": "This entry has been deprecated because its abstraction was too low-level. See CWE-532."
              }
            },
            {
              "id": "CWE-535",
              "name": "Exposure of Information Through Shell Error Message",
              "shortDescription": {
                "text": "A command shell error message indicates that there exists an unhandled exception in the web application code. In many cases, an attacker can leverage the conditions that cause these errors in order to gain unauthorized access to the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-211",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-536",
              "name": "Servlet Runtime Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "A servlet error message indicates that there exists an unhandled exception in your web application code and may provide useful information to an attacker."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-211",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-537",
              "name": "Java Runtime Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "In many cases, an attacker can leverage the conditions that cause unhandled exception errors in order to gain unauthorized access to the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-211",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-538",
              "name": "Insertion of Sensitive Information into Externally-Accessible File or Directory",
              "shortDescription": {
                "text": "The product places sensitive information into files or directories that are accessible to actors who are allowed to have access to the files, but not to the sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-539",
              "name": "Use of Persistent Cookies Containing Sensitive Information",
              "shortDescription": {
                "text": "The web application uses persistent cookies, but the cookies contain sensitive information."
              },
              "fullDescription": {
                "text": "Cookies are small bits of data that are sent by the web application but stored locally in the browser. This lets the application use the cookie to pass information between pages and store variable information. The web application controls what information is stored in a cookie and how it is used. Typical types of information stored in cookies are session identifiers, personalization and customization information, and in rare cases even usernames to enable automated logins. There are two different types of cookies: session cookies and persistent cookies. Session cookies just live in the browser's memory and are not stored anywhere, but persistent cookies are stored on the browser's hard drive. This can cause security and privacy issues depending on the information stored in the cookie and how it is accessed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-540",
              "name": "Inclusion of Sensitive Information in Source Code",
              "shortDescription": {
                "text": "Source code on a web server or repository often contains sensitive information and should generally not be accessible to users."
              },
              "fullDescription": {
                "text": "There are situations where it is critical to remove source code from an area or server. For example, obtaining Perl source code on a system allows an attacker to understand the logic of the script and extract extremely useful information such as code bugs or logins and passwords."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-538",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-541",
              "name": "Inclusion of Sensitive Information in an Include File",
              "shortDescription": {
                "text": "If an include file source is accessible, the file can contain usernames and passwords, as well as sensitive information pertaining to the application and system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-540",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-542",
              "name": "DEPRECATED: Information Exposure Through Cleanup Log Files",
              "shortDescription": {
                "text": "This entry has been deprecated because its abstraction was too low-level. See CWE-532."
              }
            },
            {
              "id": "CWE-543",
              "name": "Use of Singleton Pattern Without Synchronization in a Multithreaded Context",
              "shortDescription": {
                "text": "The software uses the singleton pattern when creating a resource within a multithreaded environment."
              },
              "fullDescription": {
                "text": "The use of a singleton pattern may not be thread-safe."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-820",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-544",
              "name": "Missing Standardized Error Handling Mechanism",
              "shortDescription": {
                "text": "The software does not use a standardized method for handling errors throughout the code, which might introduce inconsistent error handling and resultant weaknesses."
              },
              "fullDescription": {
                "text": "If the application handles error messages individually, on a one-by-one basis, this is likely to result in inconsistent error handling. The causes of errors may be lost. Also, detailed information about the causes of an error may be unintentionally returned to the user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-545",
              "name": "DEPRECATED: Use of Dynamic Class Loading",
              "shortDescription": {
                "text": "This weakness has been deprecated because it partially overlaps CWE-470, it describes legitimate programmer behavior, and other portions will need to be integrated into other entries."
              }
            },
            {
              "id": "CWE-546",
              "name": "Suspicious Comment",
              "shortDescription": {
                "text": "The code contains comments that suggest the presence of bugs, incomplete functionality, or weaknesses."
              },
              "fullDescription": {
                "text": "Many suspicious comments, such as BUG, HACK, FIXME, LATER, LATER2, TODO, in the code indicate missing security functionality and checking. Others indicate code problems that programmers should fix, such as hard-coded variables, error handling, not using stored procedures, and performance issues."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-547",
              "name": "Use of Hard-coded, Security-relevant Constants",
              "shortDescription": {
                "text": "The program uses hard-coded constants instead of symbolic names for security-critical values, which increases the likelihood of mistakes during code maintenance or security policy change."
              },
              "fullDescription": {
                "text": "If the developer does not find all occurrences of the hard-coded constants, an incorrect policy decision may be made if one of the constants is not changed. Making changes to these values will require code changes that may be difficult or impossible once the system is released to the field. In addition, these hard-coded values may become available to attackers if the code is ever disclosed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-548",
              "name": "Exposure of Information Through Directory Listing",
              "shortDescription": {
                "text": "A directory listing is inappropriately exposed, yielding potentially sensitive information to attackers."
              },
              "fullDescription": {
                "text": "A directory listing provides an attacker with the complete index of all the resources located inside of the directory. The specific risks and consequences vary depending on which files are listed and accessible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-497",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-549",
              "name": "Missing Password Field Masking",
              "shortDescription": {
                "text": "The software does not mask passwords during entry, increasing the potential for attackers to observe and capture passwords."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-522",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-550",
              "name": "Server-generated Error Message Containing Sensitive Information",
              "shortDescription": {
                "text": "Certain conditions, such as network failure, will cause a server error message to be displayed."
              },
              "fullDescription": {
                "text": "While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-551",
              "name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization",
              "shortDescription": {
                "text": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection."
              },
              "fullDescription": {
                "text": "For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-863",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-552",
              "name": "Files or Directories Accessible to External Parties",
              "shortDescription": {
                "text": "The product makes files or directories accessible to unauthorized actors, even though they should not be."
              },
              "fullDescription": {
                "text": "Web servers, FTP servers, and similar servers may store a set of files underneath a root directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-553",
              "name": "Command Shell in Externally Accessible Directory",
              "shortDescription": {
                "text": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-552",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-554",
              "name": "ASP.NET Misconfiguration: Not Using Input Validation Framework",
              "shortDescription": {
                "text": "The ASP.NET application does not use an input validation framework."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-555",
              "name": "J2EE Misconfiguration: Plaintext Password in Configuration File",
              "shortDescription": {
                "text": "The J2EE application stores a plaintext password in a configuration file."
              },
              "fullDescription": {
                "text": "Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-260",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-556",
              "name": "ASP.NET Misconfiguration: Use of Identity Impersonation",
              "shortDescription": {
                "text": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges."
              },
              "fullDescription": {
                "text": "The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-266",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-558",
              "name": "Use of getlogin() in Multithreaded Application",
              "shortDescription": {
                "text": "The application uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values."
              },
              "fullDescription": {
                "text": "The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-663",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-560",
              "name": "Use of umask() with chmod-style Argument",
              "shortDescription": {
                "text": "The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod()."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-687",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-561",
              "name": "Dead Code",
              "shortDescription": {
                "text": "The software contains dead code, which can never be executed."
              },
              "fullDescription": {
                "text": "Dead code is source code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1164",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-562",
              "name": "Return of Stack Variable Address",
              "shortDescription": {
                "text": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash."
              },
              "fullDescription": {
                "text": "Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-825",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-563",
              "name": "Assignment to Variable without Use",
              "shortDescription": {
                "text": "The variable's value is assigned but never used, making it a dead store."
              },
              "fullDescription": {
                "text": "After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1164",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-564",
              "name": "SQL Injection: Hibernate",
              "shortDescription": {
                "text": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-89",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-565",
              "name": "Reliance on Cookies without Validation and Integrity Checking",
              "shortDescription": {
                "text": "The application relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user."
              },
              "fullDescription": {
                "text": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-642",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-602",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-566",
              "name": "Authorization Bypass Through User-Controlled SQL Primary Key",
              "shortDescription": {
                "text": "The software uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor."
              },
              "fullDescription": {
                "text": "When a user can set a primary key to any value, then the user can modify the key to point to unauthorized records. Database access control errors occur when: Data enters a program from an untrusted source. The data is used to specify the value of a primary key in a SQL query. The untrusted source does not have the permissions to be able to access all rows in the associated table."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-639",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-567",
              "name": "Unsynchronized Access to Shared Data in a Multithreaded Context",
              "shortDescription": {
                "text": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes."
              },
              "fullDescription": {
                "text": "Within servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable. Note that this weakness is not unique to servlets."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-820",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-488",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-568",
              "name": "finalize() Method Without super.finalize()",
              "shortDescription": {
                "text": "The software contains a finalize() method that does not call super.finalize()."
              },
              "fullDescription": {
                "text": "The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize()."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-459",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-570",
              "name": "Expression is Always False",
              "shortDescription": {
                "text": "The software contains an expression that will always evaluate to false."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-561",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-571",
              "name": "Expression is Always True",
              "shortDescription": {
                "text": "The software contains an expression that will always evaluate to true."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-561",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-572",
              "name": "Call to Thread run() instead of start()",
              "shortDescription": {
                "text": "The program calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee."
              },
              "fullDescription": {
                "text": "In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-821",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-573",
              "name": "Improper Following of Specification by Caller",
              "shortDescription": {
                "text": "The software does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform."
              },
              "fullDescription": {
                "text": "When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-574",
              "name": "EJB Bad Practices: Use of Synchronization Primitives",
              "shortDescription": {
                "text": "The program violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives."
              },
              "fullDescription": {
                "text": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances. The specification justifies this requirement in the following way: This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-821",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-575",
              "name": "EJB Bad Practices: Use of AWT Swing",
              "shortDescription": {
                "text": "The program violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing."
              },
              "fullDescription": {
                "text": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard. The specification justifies this requirement in the following way: Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-576",
              "name": "EJB Bad Practices: Use of Java I/O",
              "shortDescription": {
                "text": "The program violates the Enterprise JavaBeans (EJB) specification by using the java.io package."
              },
              "fullDescription": {
                "text": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not use the java.io package to attempt to access files and directories in the file system. The specification justifies this requirement in the following way: The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-695",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-577",
              "name": "EJB Bad Practices: Use of Sockets",
              "shortDescription": {
                "text": "The program violates the Enterprise JavaBeans (EJB) specification by using sockets."
              },
              "fullDescription": {
                "text": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast. The specification justifies this requirement in the following way: The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-578",
              "name": "EJB Bad Practices: Use of Class Loader",
              "shortDescription": {
                "text": "The program violates the Enterprise JavaBeans (EJB) specification by using the class loader."
              },
              "fullDescription": {
                "text": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the program violates the following EJB guideline: The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams. The specification justifies this requirement in the following way: These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-579",
              "name": "J2EE Bad Practices: Non-serializable Object Stored in Session",
              "shortDescription": {
                "text": "The application stores a non-serializable object as an HttpSession attribute, which can hurt reliability."
              },
              "fullDescription": {
                "text": "A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-580",
              "name": "clone() Method Without super.clone()",
              "shortDescription": {
                "text": "The software contains a clone() method that does not call super.clone() to obtain the new object."
              },
              "fullDescription": {
                "text": "All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-581",
              "name": "Object Model Violation: Just One of Equals and Hashcode Defined",
              "shortDescription": {
                "text": "The software does not maintain equal hashcodes for equal objects."
              },
              "fullDescription": {
                "text": "Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode()."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-582",
              "name": "Array Declared Public, Final, and Static",
              "shortDescription": {
                "text": "The program declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified."
              },
              "fullDescription": {
                "text": "Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-583",
              "name": "finalize() Method Declared Public",
              "shortDescription": {
                "text": "The program violates secure coding principles for mobile code by declaring a finalize() method public."
              },
              "fullDescription": {
                "text": "A program should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-584",
              "name": "Return Inside Finally Block",
              "shortDescription": {
                "text": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-585",
              "name": "Empty Synchronized Block",
              "shortDescription": {
                "text": "The software contains an empty synchronized block."
              },
              "fullDescription": {
                "text": "An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1071",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-586",
              "name": "Explicit Call to Finalize()",
              "shortDescription": {
                "text": "The software makes an explicit call to the finalize() method from outside the finalizer."
              },
              "fullDescription": {
                "text": "While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-587",
              "name": "Assignment of a Fixed Address to a Pointer",
              "shortDescription": {
                "text": "The software sets a pointer to a specific address other than NULL or 0."
              },
              "fullDescription": {
                "text": "Using a fixed address is not portable because that address will probably not be valid in all environments or platforms."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-344",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-588",
              "name": "Attempt to Access Child of a Non-structure Pointer",
              "shortDescription": {
                "text": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-704",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-589",
              "name": "Call to Non-ubiquitous API",
              "shortDescription": {
                "text": "The software uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences."
              },
              "fullDescription": {
                "text": "Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-474",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-590",
              "name": "Free of Memory not on the Heap",
              "shortDescription": {
                "text": "The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc()."
              },
              "fullDescription": {
                "text": "When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-762",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-123",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-591",
              "name": "Sensitive Data Storage in Improperly Locked Memory",
              "shortDescription": {
                "text": "The application stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors."
              },
              "fullDescription": {
                "text": "On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-413",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-592",
              "name": "DEPRECATED: Authentication Bypass Issues",
              "shortDescription": {
                "text": "This weakness has been deprecated because it covered redundant concepts already described in CWE-287."
              }
            },
            {
              "id": "CWE-593",
              "name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created",
              "shortDescription": {
                "text": "The software modifies the SSL context after connection creation has begun."
              },
              "fullDescription": {
                "text": "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-666",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-594",
              "name": "J2EE Framework: Saving Unserializable Objects to Disk",
              "shortDescription": {
                "text": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully."
              },
              "fullDescription": {
                "text": "In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-595",
              "name": "Comparison of Object References Instead of Object Contents",
              "shortDescription": {
                "text": "The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects."
              },
              "fullDescription": {
                "text": "For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1025",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-596",
              "name": "DEPRECATED: Incorrect Semantic Object Comparison",
              "shortDescription": {
                "text": "This weakness has been deprecated. It was poorly described and difficult to distinguish from other entries. It was also inappropriate to assign a separate ID solely because of domain-specific considerations. Its closest equivalent is CWE-1023."
              }
            },
            {
              "id": "CWE-597",
              "name": "Use of Wrong Operator in String Comparison",
              "shortDescription": {
                "text": "The product uses the wrong operator when comparing a string, such as using == when the equals() method should be used instead."
              },
              "fullDescription": {
                "text": "In Java, using == or != to compare two strings for equality actually compares two objects for equality, not their values. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, it could be leveraged to affect program security."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-595",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-480",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-598",
              "name": "Use of GET Request Method With Sensitive Query Strings",
              "shortDescription": {
                "text": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that requests."
              },
              "fullDescription": {
                "text": "The query string can be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-201",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-599",
              "name": "Missing Validation of OpenSSL Certificate",
              "shortDescription": {
                "text": "The software uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements."
              },
              "fullDescription": {
                "text": "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-295",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-600",
              "name": "Uncaught Exception in Servlet ",
              "shortDescription": {
                "text": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information."
              },
              "fullDescription": {
                "text": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-248",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-390",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-601",
              "name": "URL Redirection to Untrusted Site ('Open Redirect')",
              "shortDescription": {
                "text": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks."
              },
              "fullDescription": {
                "text": "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-602",
              "name": "Client-Side Enforcement of Server-Side Security",
              "shortDescription": {
                "text": "The software is composed of a server that relies on the client to implement a mechanism that is intended to protect the server."
              },
              "fullDescription": {
                "text": "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-290",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-300",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-603",
              "name": "Use of Client-Side Authentication",
              "shortDescription": {
                "text": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check."
              },
              "fullDescription": {
                "text": "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-602",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-300",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-605",
              "name": "Multiple Binds to the Same Port",
              "shortDescription": {
                "text": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed."
              },
              "fullDescription": {
                "text": "On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-666",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-606",
              "name": "Unchecked Input for Loop Condition",
              "shortDescription": {
                "text": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-834",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-607",
              "name": "Public Static Final Field References Mutable Object",
              "shortDescription": {
                "text": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-608",
              "name": "Struts: Non-private Field in ActionForm Class",
              "shortDescription": {
                "text": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-609",
              "name": "Double-Checked Locking",
              "shortDescription": {
                "text": "The program uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient."
              },
              "fullDescription": {
                "text": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-367",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-610",
              "name": "Externally Controlled Reference to a Resource in Another Sphere",
              "shortDescription": {
                "text": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-611",
              "name": "Improper Restriction of XML External Entity Reference",
              "shortDescription": {
                "text": "The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output."
              },
              "fullDescription": {
                "text": "XML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing. By submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as file:///c:/winnt/win.ini designates (in Windows) the file C:Winntwin.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning. Once the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-441",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-612",
              "name": "Improper Authorization of Index Containing Sensitive Information",
              "shortDescription": {
                "text": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information."
              },
              "fullDescription": {
                "text": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1230",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-613",
              "name": "Insufficient Session Expiration",
              "shortDescription": {
                "text": "According to WASC, Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-614",
              "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
              "shortDescription": {
                "text": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-311",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-615",
              "name": "Inclusion of Sensitive Information in Source Code Comments",
              "shortDescription": {
                "text": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc."
              },
              "fullDescription": {
                "text": "An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-540",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-546",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-616",
              "name": "Incomplete Identification of Uploaded File Variables (PHP)",
              "shortDescription": {
                "text": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files."
              },
              "fullDescription": {
                "text": "These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as /etc/passwd."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-473",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-617",
              "name": "Reachable Assertion",
              "shortDescription": {
                "text": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary."
              },
              "fullDescription": {
                "text": "While assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service. For example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-618",
              "name": "Exposed Unsafe ActiveX Method",
              "shortDescription": {
                "text": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain)."
              },
              "fullDescription": {
                "text": "ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-749",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-619",
              "name": "Dangling Database Cursor ('Cursor Injection')",
              "shortDescription": {
                "text": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor dangling."
              },
              "fullDescription": {
                "text": "For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-402",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-620",
              "name": "Unverified Password Change",
              "shortDescription": {
                "text": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication."
              },
              "fullDescription": {
                "text": "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-621",
              "name": "Variable Extraction Error",
              "shortDescription": {
                "text": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables."
              },
              "fullDescription": {
                "text": "For example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals. Similar functionality is possible in other interpreted languages, including custom languages."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-914",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-622",
              "name": "Improper Validation of Function Hook Arguments",
              "shortDescription": {
                "text": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities."
              },
              "fullDescription": {
                "text": "Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-623",
              "name": "Unsafe ActiveX Control Marked Safe For Scripting",
              "shortDescription": {
                "text": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting."
              },
              "fullDescription": {
                "text": "This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-267",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-618",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-624",
              "name": "Executable Regular Expression Error",
              "shortDescription": {
                "text": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers."
              },
              "fullDescription": {
                "text": "Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-77",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-625",
              "name": "Permissive Regular Expression",
              "shortDescription": {
                "text": "The product uses a regular expression that does not sufficiently restrict the set of allowed values."
              },
              "fullDescription": {
                "text": "This effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include: not identifying the beginning and end of the target string using wildcards instead of acceptable character ranges others"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-185",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-187",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-184",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-183",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-626",
              "name": "Null Byte Interaction Error (Poison Null Byte)",
              "shortDescription": {
                "text": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components."
              },
              "fullDescription": {
                "text": "A null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected. The poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-147",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-627",
              "name": "Dynamic Variable Evaluation",
              "shortDescription": {
                "text": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions."
              },
              "fullDescription": {
                "text": "The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-914",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-183",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-628",
              "name": "Function Call with Incorrectly Specified Arguments",
              "shortDescription": {
                "text": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses."
              },
              "fullDescription": {
                "text": "There are multiple ways in which this weakness can be introduced, including: the wrong variable or reference; an incorrect number of arguments; incorrect order of arguments; wrong type of arguments; or wrong value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-636",
              "name": "Not Failing Securely ('Failing Open')",
              "shortDescription": {
                "text": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions."
              },
              "fullDescription": {
                "text": "By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to fail functional to minimize administration and support costs, instead of failing safe."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-280",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-637",
              "name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')",
              "shortDescription": {
                "text": "The software uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used."
              },
              "fullDescription": {
                "text": "Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-638",
              "name": "Not Using Complete Mediation",
              "shortDescription": {
                "text": "The software does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-862",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-639",
              "name": "Authorization Bypass Through User-Controlled Key",
              "shortDescription": {
                "text": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data."
              },
              "fullDescription": {
                "text": "Retrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system. For example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value. One manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-863",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-640",
              "name": "Weak Password Recovery Mechanism for Forgotten Password",
              "shortDescription": {
                "text": "The software contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak."
              },
              "fullDescription": {
                "text": "It is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme. This weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-641",
              "name": "Improper Restriction of Names for Files and Other Resources",
              "shortDescription": {
                "text": "The application constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name."
              },
              "fullDescription": {
                "text": "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-99",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-642",
              "name": "External Control of Critical State Data",
              "shortDescription": {
                "text": "The software stores security-critical state information about its users, or the software itself, in a location that is accessible to unauthorized actors."
              },
              "fullDescription": {
                "text": "If an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed. State information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an authenticated=true cookie. An attacker may simply create this cookie in order to bypass the authentication."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-643",
              "name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')",
              "shortDescription": {
                "text": "The software uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query."
              },
              "fullDescription": {
                "text": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-943",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-91",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-644",
              "name": "Improper Neutralization of HTTP Headers for Scripting Syntax",
              "shortDescription": {
                "text": "The application does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash."
              },
              "fullDescription": {
                "text": "An attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled. If an application does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-116",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-645",
              "name": "Overly Restrictive Account Lockout Mechanism",
              "shortDescription": {
                "text": "The software contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out."
              },
              "fullDescription": {
                "text": "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-646",
              "name": "Reliance on File Name or Extension of Externally-Supplied File",
              "shortDescription": {
                "text": "The software allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion."
              },
              "fullDescription": {
                "text": "An application might use the file name or extension of of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a .php.gif extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-647",
              "name": "Use of Non-Canonical URL Paths for Authorization Decisions",
              "shortDescription": {
                "text": "The software defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization."
              },
              "fullDescription": {
                "text": "If an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as: http://WWW.EXAMPLE.COM/mypage http://www.example.com/%6Dypage (alternate encoding) http://192.168.1.1/mypage (IP address) http://www.example.com/mypage/ (trailing /) http://www.example.com:80/mypage Therefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-863",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-648",
              "name": "Incorrect Use of Privileged APIs",
              "shortDescription": {
                "text": "The application does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly."
              },
              "fullDescription": {
                "text": "When an application contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to: ensure that assumptions made by the APIs are valid, such as validity of arguments account for known weaknesses in the design/implementation of the API call the API from a safe context If the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data. For instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-269",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-649",
              "name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking",
              "shortDescription": {
                "text": "The software uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the software does not use integrity checks to detect if those inputs have been modified."
              },
              "fullDescription": {
                "text": "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-650",
              "name": "Trusting HTTP Permission Methods on the Server Side",
              "shortDescription": {
                "text": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state."
              },
              "fullDescription": {
                "text": "The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-436",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-651",
              "name": "Exposure of WSDL File Containing Sensitive Information",
              "shortDescription": {
                "text": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return)."
              },
              "fullDescription": {
                "text": "An information exposure may occur if any of the following apply: The WSDL file is accessible to a wider audience than intended. The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code. Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-538",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-652",
              "name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')",
              "shortDescription": {
                "text": "The software uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query."
              },
              "fullDescription": {
                "text": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-943",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-91",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-653",
              "name": "Insufficient Compartmentalization",
              "shortDescription": {
                "text": "The product does not sufficiently compartmentalize functionality or processes that require different privilege levels, rights, or permissions."
              },
              "fullDescription": {
                "text": "When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-654",
              "name": "Reliance on a Single Factor in a Security Decision",
              "shortDescription": {
                "text": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-655",
              "name": "Insufficient Psychological Acceptability",
              "shortDescription": {
                "text": "The software has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-656",
              "name": "Reliance on Security Through Obscurity",
              "shortDescription": {
                "text": "The software uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism."
              },
              "fullDescription": {
                "text": "This reliance on security through obscurity can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-259",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-321",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-472",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-657",
              "name": "Violation of Secure Design Principles",
              "shortDescription": {
                "text": "The product violates well-established principles for secure design."
              },
              "fullDescription": {
                "text": "This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-662",
              "name": "Improper Synchronization",
              "shortDescription": {
                "text": "The software utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes."
              },
              "fullDescription": {
                "text": "Synchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-663",
              "name": "Use of a Non-reentrant Function in a Concurrent Context",
              "shortDescription": {
                "text": "The software calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-664",
              "name": "Improper Control of a Resource Through its Lifetime",
              "shortDescription": {
                "text": "The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release."
              },
              "fullDescription": {
                "text": "Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states. Even without explicit instructions, various principles are expected to be adhered to, such as Do not use an object until after its creation is complete, or do not use an object after it has been slated for destruction."
              }
            },
            {
              "id": "CWE-665",
              "name": "Improper Initialization",
              "shortDescription": {
                "text": "The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used."
              },
              "fullDescription": {
                "text": "This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-666",
              "name": "Operation on Resource in Wrong Phase of Lifetime",
              "shortDescription": {
                "text": "The software performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors."
              },
              "fullDescription": {
                "text": "When a developer wants to initialize, use or release a resource, it is important to follow the specifications outlined for how to operate on that resource and to ensure that the resource is in the expected state. In this case, the software wants to perform a normally valid operation, initialization, use or release, on a resource when it is in the incorrect phase of its lifetime."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-667",
              "name": "Improper Locking",
              "shortDescription": {
                "text": "The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors."
              },
              "fullDescription": {
                "text": "Locking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-668",
              "name": "Exposure of Resource to Wrong Sphere",
              "shortDescription": {
                "text": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource."
              },
              "fullDescription": {
                "text": "Resources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files. A separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system. In either case, the end result is that a resource has been exposed to the wrong party."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-669",
              "name": "Incorrect Resource Transfer Between Spheres",
              "shortDescription": {
                "text": "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-670",
              "name": "Always-Incorrect Control Flow Implementation",
              "shortDescription": {
                "text": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated."
              },
              "fullDescription": {
                "text": "This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-671",
              "name": "Lack of Administrator Control over Security",
              "shortDescription": {
                "text": "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator."
              },
              "fullDescription": {
                "text": "If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-672",
              "name": "Operation on a Resource after Expiration or Release",
              "shortDescription": {
                "text": "The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-666",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-673",
              "name": "External Influence of Sphere Definition",
              "shortDescription": {
                "text": "The product does not prevent the definition of control spheres from external actors."
              },
              "fullDescription": {
                "text": "Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-674",
              "name": "Uncontrolled Recursion",
              "shortDescription": {
                "text": "The product does not properly control the amount of recursion which takes place, consuming excessive resources, such as allocated memory or the program stack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-675",
              "name": "Duplicate Operations on Resource",
              "shortDescription": {
                "text": "The product performs the same operation on a resource two or more times, when the operation should only be applied once."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-586",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-102",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-676",
              "name": "Use of Potentially Dangerous Function",
              "shortDescription": {
                "text": "The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1177",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-680",
              "name": "Integer Overflow to Buffer Overflow",
              "shortDescription": {
                "text": "The product performs a calculation to determine how much memory to allocate, but an integer overflow can occur that causes less memory to be allocated than expected, leading to a buffer overflow."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-190",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-681",
              "name": "Incorrect Conversion between Numeric Types",
              "shortDescription": {
                "text": "When converting from one data type to another, such as long to integer, data can be omitted or translated in a way that produces unexpected values. If the resulting values are used in a sensitive context, then dangerous behaviors may occur."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-704",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-682",
              "name": "Incorrect Calculation",
              "shortDescription": {
                "text": "The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management."
              },
              "fullDescription": {
                "text": "When software performs a security-critical calculation incorrectly, it might lead to incorrect resource allocations, incorrect privilege assignments, or failed comparisons among other things. Many of the direct results of an incorrect calculation can lead to even larger problems such as failed protection mechanisms or even arbitrary code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-170",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-683",
              "name": "Function Call With Incorrect Order of Arguments",
              "shortDescription": {
                "text": "The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses."
              },
              "fullDescription": {
                "text": "While this weakness might be caught by the compiler in some languages, it can occur more frequently in cases in which the called function accepts variable numbers or types of arguments, such as format strings in C. It also can occur in languages or environments that do not enforce strong typing."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-628",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-684",
              "name": "Incorrect Provision of Specified Functionality",
              "shortDescription": {
                "text": "The code does not function according to its published specifications, potentially leading to incorrect usage."
              },
              "fullDescription": {
                "text": "When providing functionality to an external party, it is important that the software behaves in accordance with the details specified. When requirements of nuances are not documented, the functionality may produce unintended behaviors for the caller, possibly leading to an exploitable state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-685",
              "name": "Function Call With Incorrect Number of Arguments",
              "shortDescription": {
                "text": "The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-628",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-686",
              "name": "Function Call With Incorrect Argument Type",
              "shortDescription": {
                "text": "The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses."
              },
              "fullDescription": {
                "text": "This weakness is most likely to occur in loosely typed languages, or in strongly typed languages in which the types of variable arguments cannot be enforced at compilation time, or where there is implicit casting."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-628",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-687",
              "name": "Function Call With Incorrectly Specified Argument Value",
              "shortDescription": {
                "text": "The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-628",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-688",
              "name": "Function Call With Incorrect Variable or Reference as Argument",
              "shortDescription": {
                "text": "The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-628",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-689",
              "name": "Permission Race Condition During Resource Copy",
              "shortDescription": {
                "text": "The product, while copying or cloning a resource, does not set the resource's permissions or access control until the copy is complete, leaving the resource exposed to other spheres while the copy is taking place."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                }
              ]
            },
            {
              "id": "CWE-690",
              "name": "Unchecked Return Value to NULL Pointer Dereference",
              "shortDescription": {
                "text": "The product does not check for an error after calling a function that can return with a NULL pointer if the function fails, which leads to a resultant NULL pointer dereference."
              },
              "fullDescription": {
                "text": "While unchecked return value weaknesses are not limited to returns of NULL pointers (see the examples in CWE-252), functions often return NULL to indicate an error status. When this error condition is not checked, a NULL pointer dereference can occur."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-252",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-476",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-691",
              "name": "Insufficient Control Flow Management",
              "shortDescription": {
                "text": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways."
              }
            },
            {
              "id": "CWE-692",
              "name": "Incomplete Denylist to Cross-Site Scripting",
              "shortDescription": {
                "text": "The product uses a denylist-based protection mechanism to defend against XSS attacks, but the denylist is incomplete, allowing XSS variants to succeed."
              },
              "fullDescription": {
                "text": "While XSS might seem simple to prevent, web browsers vary so widely in how they parse web pages, that a denylist cannot keep track of all the variations. The XSS Cheat Sheet [REF-714] contains a large number of attacks that are intended to bypass incomplete denylists."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-184",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "willPrecede"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-79",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-693",
              "name": "Protection Mechanism Failure",
              "shortDescription": {
                "text": "The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product."
              },
              "fullDescription": {
                "text": "This weakness covers three distinct situations. A missing protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An insufficient protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an ignored mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path."
              }
            },
            {
              "id": "CWE-694",
              "name": "Use of Multiple Resources with Duplicate Identifier",
              "shortDescription": {
                "text": "The software uses multiple resources that can have the same identifier, in a context in which unique identifiers are required."
              },
              "fullDescription": {
                "text": "If the software assumes that each resource has a unique identifier, the software could operate on the wrong resource if attackers can cause multiple resources to be associated with the same identifier."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-99",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-695",
              "name": "Use of Low-Level Functionality",
              "shortDescription": {
                "text": "The software uses low-level functionality that is explicitly prohibited by the framework or specification under which the software is supposed to operate."
              },
              "fullDescription": {
                "text": "The use of low-level functionality can violate the specification in unexpected ways that effectively disable built-in protection mechanisms, introduce exploitable inconsistencies, or otherwise expose the functionality to attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-573",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-696",
              "name": "Incorrect Behavior Order",
              "shortDescription": {
                "text": "The product performs multiple related behaviors, but the behaviors are performed in the wrong order in ways which may produce resultant weaknesses."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-697",
              "name": "Incorrect Comparison",
              "shortDescription": {
                "text": "The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses."
              },
              "fullDescription": {
                "text": "This weakness class covers several possibilities: the comparison checks one factor incorrectly; the comparison should consider multiple factors, but it does not check some of those factors at all; the comparison checks the wrong factor."
              }
            },
            {
              "id": "CWE-698",
              "name": "Execution After Redirect (EAR)",
              "shortDescription": {
                "text": "The web application sends a redirect to another location, but instead of exiting, it executes additional code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-705",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-703",
              "name": "Improper Check or Handling of Exceptional Conditions",
              "shortDescription": {
                "text": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software."
              }
            },
            {
              "id": "CWE-704",
              "name": "Incorrect Type Conversion or Cast",
              "shortDescription": {
                "text": "The software does not correctly convert an object, resource, or structure from one type to a different type."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-705",
              "name": "Incorrect Control Flow Scoping",
              "shortDescription": {
                "text": "The software does not properly return control flow to the proper location after it has completed a task or detected an unusual condition."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-706",
              "name": "Use of Incorrectly-Resolved Name or Reference",
              "shortDescription": {
                "text": "The software uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-99",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-707",
              "name": "Improper Neutralization",
              "shortDescription": {
                "text": "The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component."
              },
              "fullDescription": {
                "text": "If a message is malformed, it may cause the message to be incorrectly interpreted. Neutralization is an abstract term for any technique that ensures that input (and output) conforms with expectations and is safe. This can be done by: checking that the input/output is already safe (e.g. validation) transformation of the input/output to be safe using techniques such as filtering, encoding/decoding, escaping/unescaping, quoting/unquoting, or canonicalization preventing the input/output from being directly provided by an attacker (e.g. indirect selection that maps externally-provided values to internally-controlled values) preventing the input/output from being processed at all This weakness typically applies in cases where the product prepares a control message that another process must act on, such as a command or query, and malicious input that was intended as data, can enter the control plane instead. However, this weakness also applies to more general cases where there are not always control implications."
              }
            },
            {
              "id": "CWE-708",
              "name": "Incorrect Ownership Assignment",
              "shortDescription": {
                "text": "The software assigns an owner to a resource, but the owner is outside of the intended control sphere."
              },
              "fullDescription": {
                "text": "This may allow the resource to be manipulated by actors outside of the intended control sphere."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-282",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "equal"
                  ]
                }
              ]
            },
            {
              "id": "CWE-710",
              "name": "Improper Adherence to Coding Standards",
              "shortDescription": {
                "text": "The software does not follow certain coding rules for development, which can lead to resultant weaknesses or increase the severity of the associated vulnerabilities."
              }
            },
            {
              "id": "CWE-732",
              "name": "Incorrect Permission Assignment for Critical Resource",
              "shortDescription": {
                "text": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors."
              },
              "fullDescription": {
                "text": "When a resource is given a permissions setting that provides access to a wider range of actors than required, it could lead to the exposure of sensitive information, or the modification of that resource by unintended parties. This is especially dangerous when the resource is related to program configuration, execution or sensitive user data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-733",
              "name": "Compiler Optimization Removal or Modification of Security-critical Code",
              "shortDescription": {
                "text": "The developer builds a security-critical protection mechanism into the software, but the compiler optimizes the program such that the mechanism is removed or modified."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1038",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-749",
              "name": "Exposed Dangerous Method or Function",
              "shortDescription": {
                "text": "The software provides an Applications Programming Interface (API) or similar interface for interaction with external actors, but the interface includes a dangerous method or function that is not properly restricted."
              },
              "fullDescription": {
                "text": "This weakness can lead to a wide variety of resultant weaknesses, depending on the behavior of the exposed method. It can apply to any number of technologies and approaches, such as ActiveX controls, Java functions, IOCTLs, and so on. The exposure can occur in a few different ways: 1) The function/method was never intended to be exposed to outside actors. 2) The function/method was only intended to be accessible to a limited set of actors, such as Internet-based access from a single web site."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-754",
              "name": "Improper Check for Unusual or Exceptional Conditions",
              "shortDescription": {
                "text": "The software does not check or incorrectly checks for unusual or exceptional conditions that are not expected to occur frequently during day to day operation of the software."
              },
              "fullDescription": {
                "text": "The programmer may assume that certain events or conditions will never occur or do not need to be worried about, such as low memory conditions, lack of access to resources due to restrictive permissions, or misbehaving clients or components. However, attackers may intentionally trigger these unusual conditions, thus violating the programmer's assumptions, possibly introducing instability, incorrect behavior, or a vulnerability. Note that this entry is not exclusively about the use of exceptions and exception handling, which are mechanisms for both checking and handling unusual or unexpected conditions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-755",
              "name": "Improper Handling of Exceptional Conditions",
              "shortDescription": {
                "text": "The software does not handle or incorrectly handles an exceptional condition."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-756",
              "name": "Missing Custom Error Page",
              "shortDescription": {
                "text": "The software does not return custom error pages to the user, possibly exposing sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-209",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-757",
              "name": "Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')",
              "shortDescription": {
                "text": "A protocol or its implementation supports interaction between multiple actors and allows those actors to negotiate which algorithm should be used as a protection mechanism such as encryption or authentication, but it does not select the strongest algorithm that is available to both parties."
              },
              "fullDescription": {
                "text": "When a security mechanism can be forced to downgrade to use a less secure algorithm, this can make it easier for attackers to compromise the software by exploiting weaker algorithm. The victim might not be aware that the less secure algorithm is being used. For example, if an attacker can force a communications channel to use cleartext instead of strongly-encrypted data, then the attacker could read the channel by sniffing, instead of going through extra effort of trying to decrypt the data using brute force techniques."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-758",
              "name": "Reliance on Undefined, Unspecified, or Implementation-Defined Behavior",
              "shortDescription": {
                "text": "The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity."
              },
              "fullDescription": {
                "text": "This can lead to resultant weaknesses when the required properties change, such as when the software is ported to a different platform or if an interaction error (CWE-435) occurs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-759",
              "name": "Use of a One-Way Hash without a Salt",
              "shortDescription": {
                "text": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software does not also use a salt as part of the input."
              },
              "fullDescription": {
                "text": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-916",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-760",
              "name": "Use of a One-Way Hash with a Predictable Salt",
              "shortDescription": {
                "text": "The software uses a one-way cryptographic hash against an input that should not be reversible, such as a password, but the software uses a predictable salt as part of the input."
              },
              "fullDescription": {
                "text": "This makes it easier for attackers to pre-compute the hash value using dictionary attack techniques such as rainbow tables, effectively disabling the protection that an unpredictable salt would provide. It should be noted that, despite common perceptions, the use of a good salt with a hash does not sufficiently increase the effort for an attacker who is targeting an individual password, or who has a large amount of computing resources available, such as with cloud-based services or specialized, inexpensive hardware. Offline password cracking can still be effective if the hash function is not expensive to compute; many cryptographic functions are designed to be efficient and can be vulnerable to attacks using massive computing resources, even if the hash is cryptographically strong. The use of a salt only slightly increases the computing requirements for an attacker compared to other strategies such as adaptive hash functions. See CWE-916 for more details."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-916",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-761",
              "name": "Free of Pointer not at Start of Buffer",
              "shortDescription": {
                "text": "The application calls free() on a pointer to a memory resource that was allocated on the heap, but the pointer is not at the start of the buffer."
              },
              "fullDescription": {
                "text": "This can cause the application to crash, or in some cases, modify critical program variables or execute code. This weakness often occurs when the memory is allocated explicitly on the heap with one of the malloc() family functions and free() is called, but pointer arithmetic has caused the pointer to be in the interior or end of the buffer."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-763",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-762",
              "name": "Mismatched Memory Management Routines",
              "shortDescription": {
                "text": "The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource."
              },
              "fullDescription": {
                "text": "This weakness can be generally described as mismatching memory management routines, such as: The memory was allocated on the stack (automatically), but it was deallocated using the memory management routine free() (CWE-590), which is intended for explicitly allocated heap memory. The memory was allocated explicitly using one set of memory management functions, and deallocated using a different set. For example, memory might be allocated with malloc() in C++ instead of the new operator, and then deallocated with the delete operator. When the memory management functions are mismatched, the consequences may be as severe as code execution, memory corruption, or program crash. Consequences and ease of exploit will vary depending on the implementation of the routines and the object being managed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-763",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-763",
              "name": "Release of Invalid Pointer or Reference",
              "shortDescription": {
                "text": "The application attempts to return a memory resource to the system, but calls the wrong release function or calls the appropriate release function incorrectly."
              },
              "fullDescription": {
                "text": "This weakness can take several forms, such as: The memory was allocated, explicitly or implicitly, via one memory management method and deallocated using a different, non-compatible function (CWE-762). The function calls or memory management routines chosen are appropriate, however they are used incorrectly, such as in CWE-761."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-764",
              "name": "Multiple Locks of a Critical Resource",
              "shortDescription": {
                "text": "The software locks a critical resource more times than intended, leading to an unexpected state in the system."
              },
              "fullDescription": {
                "text": "When software is operating in a concurrent environment and repeatedly locks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra locking calls will reduce the size of the total available pool, possibly leading to degraded performance or a denial of service. If this can be triggered by an attacker, it will be similar to an unrestricted lock (CWE-412). In the context of a binary lock, it is likely that any duplicate locking attempts will never succeed since the lock is already held and progress may not be possible."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-765",
              "name": "Multiple Unlocks of a Critical Resource",
              "shortDescription": {
                "text": "The software unlocks a critical resource more times than intended, leading to an unexpected state in the system."
              },
              "fullDescription": {
                "text": "When software is operating in a concurrent environment and repeatedly unlocks a critical resource, the consequences will vary based on the type of lock, the lock's implementation, and the resource being protected. In some situations such as with semaphores, the resources are pooled and extra calls to unlock will increase the count for the number of available resources, likely resulting in a crash or unpredictable behavior when the system nears capacity."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-675",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-766",
              "name": "Critical Data Element Declared Public",
              "shortDescription": {
                "text": "The software declares a critical variable, field, or member to be public when intended security policy requires it to be private."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-767",
              "name": "Access to Critical Private Variable via Public Method",
              "shortDescription": {
                "text": "The software defines a public method that reads or modifies a private variable."
              },
              "fullDescription": {
                "text": "If an attacker modifies the variable to contain unexpected values, this could violate assumptions from other parts of the code. Additionally, if an attacker can read the private variable, it may expose sensitive information or make it easier to launch further attacks."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-768",
              "name": "Incorrect Short Circuit Evaluation",
              "shortDescription": {
                "text": "The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring."
              },
              "fullDescription": {
                "text": "Usage of short circuit evaluation, though well-defined in the C standard, may alter control flow in a way that introduces logic errors that are difficult to detect, possibly causing errors later during the software's execution. If an attacker can discover such an inconsistency, it may be exploitable to gain arbitrary control over a system. If the first condition of an or statement is assumed to be true under normal circumstances, or if the first condition of an and statement is assumed to be false, then any subsequent conditional may contain its own logic errors that are not detected during code review or testing. Finally, the usage of short circuit evaluation may decrease the maintainability of the code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-769",
              "name": "DEPRECATED: Uncontrolled File Descriptor Consumption",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-774. All content has been transferred to CWE-774."
              }
            },
            {
              "id": "CWE-770",
              "name": "Allocation of Resources Without Limits or Throttling",
              "shortDescription": {
                "text": "The software allocates a reusable resource or group of resources on behalf of an actor without imposing any restrictions on the size or number of resources that can be allocated, in violation of the intended security policy for that actor."
              },
              "fullDescription": {
                "text": "Code frequently has to work with limited resources, so programmers must be careful to ensure that resources are not consumed too quickly, or too easily. Without use of quotas, resource limits, or other protection mechanisms, it can be easy for an attacker to consume many resources by rapidly making many requests, or causing larger resources to be used than is needed. When too many resources are allocated, or if a single resource is too large, then it can prevent the code from working correctly, possibly leading to a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-771",
              "name": "Missing Reference to Active Allocated Resource",
              "shortDescription": {
                "text": "The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed."
              },
              "fullDescription": {
                "text": "This does not necessarily apply in languages or frameworks that automatically perform garbage collection, since the removal of all references may act as a signal that the resource is ready to be reclaimed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-772",
              "name": "Missing Release of Resource after Effective Lifetime",
              "shortDescription": {
                "text": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed."
              },
              "fullDescription": {
                "text": "When a resource is not released after use, it can allow attackers to cause a denial of service by causing the allocation of resources without triggering their release. Frequently-affected resources include memory, CPU, disk space, power or battery, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-773",
              "name": "Missing Reference to Active File Descriptor or Handle",
              "shortDescription": {
                "text": "The software does not properly maintain references to a file descriptor or handle, which prevents that file descriptor/handle from being reclaimed."
              },
              "fullDescription": {
                "text": "This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-771",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-774",
              "name": "Allocation of File Descriptors or Handles Without Limits or Throttling",
              "shortDescription": {
                "text": "The software allocates file descriptors or handles on behalf of an actor without imposing any restrictions on how many descriptors can be allocated, in violation of the intended security policy for that actor."
              },
              "fullDescription": {
                "text": "This can cause the software to consume all available file descriptors or handles, which can prevent other processes from performing critical file processing operations."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-770",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-775",
              "name": "Missing Release of File Descriptor or Handle after Effective Lifetime",
              "shortDescription": {
                "text": "The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed."
              },
              "fullDescription": {
                "text": "When a file descriptor or handle is not released after use (typically by explicitly closing it), attackers can cause a denial of service by consuming all available file descriptors/handles, or otherwise preventing other system processes from obtaining their own file descriptors/handles."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-772",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-776",
              "name": "Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
              "shortDescription": {
                "text": "The software uses XML documents and allows their structure to be defined with a Document Type Definition (DTD), but it does not properly control the number of recursive definitions of entities."
              },
              "fullDescription": {
                "text": "If the DTD contains a large number of nested or recursive entities, this can lead to explosive growth of data when parsed, causing a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-674",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-409",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-777",
              "name": "Regular Expression without Anchors",
              "shortDescription": {
                "text": "The software uses a regular expression to perform neutralization, but the regular expression is not anchored and may allow malicious or malformed data to slip through."
              },
              "fullDescription": {
                "text": "When performing tasks such as validating against a set of allowed inputs (allowlist), data is examined and possibly modified to ensure that it is well-formed and adheres to a list of safe values. If the regular expression is not anchored, malicious or malformed data may be included before or after any string matching the regular expression. The type of malicious data that is allowed will depend on the context of the application and which anchors are omitted from the regular expression."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-625",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-778",
              "name": "Insufficient Logging",
              "shortDescription": {
                "text": "When a security-critical event occurs, the software either does not record the event or omits important details about the event when logging it."
              },
              "fullDescription": {
                "text": "When security-critical events are not logged properly, such as a failed login attempt, this can make malicious behavior more difficult to detect and may hinder forensic analysis after an attack succeeds."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-223",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-779",
              "name": "Logging of Excessive Data",
              "shortDescription": {
                "text": "The software logs too much information, making log files hard to process and possibly hindering recovery efforts or forensic analysis after an attack."
              },
              "fullDescription": {
                "text": "While logging is a good practice in general, and very high levels of logging are appropriate for debugging stages of development, too much logging in a production environment might hinder a system administrator's ability to detect anomalous conditions. This can provide cover for an attacker while attempting to penetrate a system, clutter the audit trail for forensic analysis, or make it more difficult to debug problems in a production environment."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-780",
              "name": "Use of RSA Algorithm without OAEP",
              "shortDescription": {
                "text": "The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption."
              },
              "fullDescription": {
                "text": "Padding schemes are often used with cryptographic algorithms to make the plaintext less predictable and complicate attack efforts. The OAEP scheme is often used with RSA to nullify the impact of predictable common text."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-781",
              "name": "Improper Address Validation in IOCTL with METHOD_NEITHER I/O Control Code",
              "shortDescription": {
                "text": "The software defines an IOCTL that uses METHOD_NEITHER for I/O, but it does not validate or incorrectly validates the addresses that are provided."
              },
              "fullDescription": {
                "text": "When an IOCTL uses the METHOD_NEITHER option for I/O control, it is the responsibility of the IOCTL to validate the addresses that have been supplied to it. If validation is missing or incorrect, attackers can supply arbitrary memory addresses, leading to code execution or a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-822",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-782",
              "name": "Exposed IOCTL with Insufficient Access Control",
              "shortDescription": {
                "text": "The software implements an IOCTL with functionality that should be restricted, but it does not properly enforce access control for the IOCTL."
              },
              "fullDescription": {
                "text": "When an IOCTL contains privileged functionality and is exposed unnecessarily, attackers may be able to access this functionality by invoking the IOCTL. Even if the functionality is benign, if the programmer has assumed that the IOCTL would only be accessed by a trusted process, there may be little or no validation of the incoming data, exposing weaknesses that would never be reachable if the attacker cannot call the IOCTL directly. The implementations of IOCTLs will differ between operating system types and versions, so the methods of attack and prevention may vary widely."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-749",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-781",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-783",
              "name": "Operator Precedence Logic Error",
              "shortDescription": {
                "text": "The program uses an expression in which operator precedence causes incorrect logic to be used."
              },
              "fullDescription": {
                "text": "While often just a bug, operator precedence logic errors can have serious consequences if they are used in security-critical code, such as making an authentication decision."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-670",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-784",
              "name": "Reliance on Cookies without Validation and Integrity Checking in a Security Decision",
              "shortDescription": {
                "text": "The application uses a protection mechanism that relies on the existence or values of a cookie, but it does not properly ensure that the cookie is valid for the associated user."
              },
              "fullDescription": {
                "text": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Attackers can bypass protection mechanisms such as authorization and authentication by modifying the cookie to contain an expected value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-807",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-565",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-785",
              "name": "Use of Path Manipulation Function without Maximum-sized Buffer",
              "shortDescription": {
                "text": "The software invokes a function for normalizing paths or file names, but it provides an output buffer that is smaller than the maximum possible size, such as PATH_MAX."
              },
              "fullDescription": {
                "text": "Passing an inadequately-sized output buffer to a path manipulation function can result in a buffer overflow. Such functions include realpath(), readlink(), PathAppend(), and others."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-676",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-786",
              "name": "Access of Memory Location Before Start of Buffer",
              "shortDescription": {
                "text": "The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer."
              },
              "fullDescription": {
                "text": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-787",
              "name": "Out-of-bounds Write",
              "shortDescription": {
                "text": "The software writes data past the end, or before the beginning, of the intended buffer."
              },
              "fullDescription": {
                "text": "Typically, this can result in corruption of data, a crash, or code execution. The software may modify an index or perform pointer arithmetic that references a memory location that is outside of the boundaries of the buffer. A subsequent write operation then produces undefined or unexpected results."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-788",
              "name": "Access of Memory Location After End of Buffer",
              "shortDescription": {
                "text": "The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer."
              },
              "fullDescription": {
                "text": "This typically occurs when a pointer or its index is decremented to a position before the buffer; when pointer arithmetic results in a position before the buffer; or when a negative index is used, which generates a position before the buffer."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-789",
              "name": "Memory Allocation with Excessive Size Value",
              "shortDescription": {
                "text": "The product allocates memory based on an untrusted, large size value, but it does not ensure that the size is within expected limits, allowing arbitrary amounts of memory to be allocated."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-770",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-476",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-790",
              "name": "Improper Filtering of Special Elements",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but does not filter or incorrectly filters special elements before sending it to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-138",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-791",
              "name": "Incomplete Filtering of Special Elements",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but does not completely filter special elements before sending it to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-790",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-792",
              "name": "Incomplete Filtering of One or More Instances of Special Elements",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but does not completely filter one or more instances of special elements before sending it to a downstream component."
              },
              "fullDescription": {
                "text": "Incomplete filtering of this nature involves either: only filtering a single instance of a special element when more exist, or not filtering all instances or all elements where multiple special elements exist."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-791",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-793",
              "name": "Only Filtering One Instance of a Special Element",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but only filters a single instance of a special element before sending it to a downstream component."
              },
              "fullDescription": {
                "text": "Incomplete filtering of this nature may be location-dependent, as in only the first or last element is filtered."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-792",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-794",
              "name": "Incomplete Filtering of Multiple Instances of Special Elements",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but does not filter all instances of a special element before sending it to a downstream component."
              },
              "fullDescription": {
                "text": "Incomplete filtering of this nature may be applied to: sequential elements (special elements that appear next to each other) or non-sequential elements (special elements that appear multiple times in different locations)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-792",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-795",
              "name": "Only Filtering Special Elements at a Specified Location",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but only accounts for special elements at a specified location, thereby missing remaining special elements that may exist before sending it to a downstream component."
              },
              "fullDescription": {
                "text": "A filter might only account for instances of special elements when they occur: relative to a marker (e.g. at the beginning/end of string; the second argument), or at an absolute position (e.g. byte number 10). This may leave special elements in the data that did not match the filter position, but still may be dangerous."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-791",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-796",
              "name": "Only Filtering Special Elements Relative to a Marker",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but only accounts for special elements positioned relative to a marker (e.g. at the beginning/end of a string; the second argument), thereby missing remaining special elements that may exist before sending it to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-795",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-797",
              "name": "Only Filtering Special Elements at an Absolute Position",
              "shortDescription": {
                "text": "The software receives data from an upstream component, but only accounts for special elements at an absolute position (e.g. byte number 10), thereby missing remaining special elements that may exist before sending it to a downstream component."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-795",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-798",
              "name": "Use of Hard-coded Credentials",
              "shortDescription": {
                "text": "The software contains hard-coded credentials, such as a password or cryptographic key, which it uses for its own inbound authentication, outbound communication to external components, or encryption of internal data."
              },
              "fullDescription": {
                "text": "Hard-coded credentials typically create a significant hole that allows an attacker to bypass the authentication that has been configured by the software administrator. This hole might be difficult for the system administrator to detect. Even if detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations: Inbound: the software contains an authentication mechanism that checks the input credentials against a hard-coded set of credentials. Outbound: the software connects to another system or component, and it contains hard-coded credentials for connecting to that component. In the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the software. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the software will have the same password, even across different organizations, this enables massive attacks such as worms to take place. The Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end software. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-344",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-671",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-257",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-799",
              "name": "Improper Control of Interaction Frequency",
              "shortDescription": {
                "text": "The software does not properly limit the number or frequency of interactions that it has with an actor, such as the number of incoming requests."
              },
              "fullDescription": {
                "text": "This can allow the actor to perform actions more frequently than expected. The actor could be a human or an automated process such as a virus or bot. This could be used to cause a denial of service, compromise program logic (such as limiting humans to a single vote), or other consequences. For example, an authentication routine might not limit the number of times an attacker can guess a password. Or, a web site might conduct a poll but only expect humans to vote a maximum of once a day."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-804",
              "name": "Guessable CAPTCHA",
              "shortDescription": {
                "text": "The software uses a CAPTCHA challenge, but the challenge can be guessed or automatically recognized by a non-human actor."
              },
              "fullDescription": {
                "text": "An automated attacker could bypass the intended protection of the CAPTCHA challenge and perform actions at a higher frequency than humanly possible, such as launching spam attacks. There can be several different causes of a guessable CAPTCHA: An audio or visual image that does not have sufficient distortion from the unobfuscated source image. A question is generated that with a format that can be automatically recognized, such as a math question. A question for which the number of possible answers is limited, such as birth years or favorite sports teams. A general-knowledge or trivia question for which the answer can be accessed using a data base, such as country capitals or popular actors. Other data associated with the CAPTCHA may provide hints about its contents, such as an image whose filename contains the word that is used in the CAPTCHA."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-863",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-805",
              "name": "Buffer Access with Incorrect Length Value",
              "shortDescription": {
                "text": "The software uses a sequential operation to read or write a buffer, but it uses an incorrect length value that causes it to access memory that is outside of the bounds of the buffer."
              },
              "fullDescription": {
                "text": "When the length value exceeds the size of the destination, a buffer overflow could occur."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-806",
              "name": "Buffer Access Using Size of Source Buffer",
              "shortDescription": {
                "text": "The software uses the size of a source buffer when reading from or writing to a destination buffer, which may cause it to access memory that is outside of the bounds of the buffer."
              },
              "fullDescription": {
                "text": "When the size of the destination is smaller than the size of the source, a buffer overflow could occur."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-805",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-807",
              "name": "Reliance on Untrusted Inputs in a Security Decision",
              "shortDescription": {
                "text": "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism."
              },
              "fullDescription": {
                "text": "Developers may assume that inputs such as cookies, environment variables, and hidden form fields cannot be modified. However, an attacker could change these inputs using customized clients or other attacks. This change might not be detected. When security decisions such as authentication and authorization are made based on the values of these inputs, attackers can bypass the security of the software. Without sufficient encryption, integrity checking, or other mechanism, any input that originates from an outsider cannot be trusted."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-820",
              "name": "Missing Synchronization",
              "shortDescription": {
                "text": "The software utilizes a shared resource in a concurrent manner but does not attempt to synchronize access to the resource."
              },
              "fullDescription": {
                "text": "If access to a shared resource is not synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-821",
              "name": "Incorrect Synchronization",
              "shortDescription": {
                "text": "The software utilizes a shared resource in a concurrent manner, but it does not correctly synchronize access to the resource."
              },
              "fullDescription": {
                "text": "If access to a shared resource is not correctly synchronized, then the resource may not be in a state that is expected by the software. This might lead to unexpected or insecure behaviors, especially if an attacker can influence the shared resource."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-822",
              "name": "Untrusted Pointer Dereference",
              "shortDescription": {
                "text": "The program obtains a value from an untrusted source, converts this value to a pointer, and dereferences the resulting pointer."
              },
              "fullDescription": {
                "text": "An attacker can supply a pointer for memory locations that the program is not expecting. If the pointer is dereferenced for a write operation, the attack might allow modification of critical program state variables, cause a crash, or execute code. If the dereferencing operation is for a read, then the attack might allow reading of sensitive data, cause a crash, or set a program variable to an unexpected value (since the value will be read from an unexpected memory location). There are several variants of this weakness, including but not necessarily limited to: The untrusted value is directly invoked as a function call. In OS kernels or drivers where there is a boundary between userland and privileged memory spaces, an untrusted pointer might enter through an API or system call (see CWE-781 for one such example). Inadvertently accepting the value from an untrusted control sphere when it did not have to be accepted as input at all. This might occur when the code was originally developed to be run by a single user in a non-networked environment, and the code is then ported to or otherwise exposed to a networked environment."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-823",
              "name": "Use of Out-of-range Pointer Offset",
              "shortDescription": {
                "text": "The program performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer."
              },
              "fullDescription": {
                "text": "While a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array. Programs may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error. If an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the program. As a result, the attack might change the state of the software as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-824",
              "name": "Access of Uninitialized Pointer",
              "shortDescription": {
                "text": "The program accesses or uses a pointer that has not been initialized."
              },
              "fullDescription": {
                "text": "If the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the program to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks. Depending on memory layout, associated memory management behaviors, and program operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-825",
              "name": "Expired Pointer Dereference",
              "shortDescription": {
                "text": "The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid."
              },
              "fullDescription": {
                "text": "When a program releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the program to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-125",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-787",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-826",
              "name": "Premature Release of Resource During Expected Lifetime",
              "shortDescription": {
                "text": "The program releases a resource that is still intended to be used by the program itself or another actor."
              },
              "fullDescription": {
                "text": "This weakness focuses on errors in which the program should not release a resource, but performs the release anyway. This is different than a weakness in which the program releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access. When a program releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-666",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-827",
              "name": "Improper Control of Document Type Definition",
              "shortDescription": {
                "text": "The software does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the software to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker."
              },
              "fullDescription": {
                "text": "As DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content. For example, the SOAP specification prohibits SOAP messages from containing DTDs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-706",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-829",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-776",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-828",
              "name": "Signal Handler with Functionality that is not Asynchronous-Safe",
              "shortDescription": {
                "text": "The software defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted."
              },
              "fullDescription": {
                "text": "This can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution. Signal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution. There are several different scenarios that introduce this issue: Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant. Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals. The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831). Note that in some environments or contexts, it might be possible for the signal handler to be interrupted itself. If both a signal handler and the normal behavior of the software have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-364",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-829",
              "name": "Inclusion of Functionality from Untrusted Control Sphere",
              "shortDescription": {
                "text": "The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere."
              },
              "fullDescription": {
                "text": "When including third-party functionality, such as a web widget, library, or other source of functionality, the software must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application. This might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-669",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-830",
              "name": "Inclusion of Web Functionality from an Untrusted Source",
              "shortDescription": {
                "text": "The software includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the software, potentially granting total access and control of the software to the untrusted source."
              },
              "fullDescription": {
                "text": "Including third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted. Even if the third party is a trusted source, the software may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the software. This weakness is common in mashup development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=http://other.domain.here>' tags, which causes the code to run in the domain of the software, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access. Such dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-829",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-831",
              "name": "Signal Handler Function Associated with Multiple Signals",
              "shortDescription": {
                "text": "The software defines a function that is used as a handler for more than one signal."
              },
              "fullDescription": {
                "text": "While sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects. An attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution. Another rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-364",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-832",
              "name": "Unlock of a Resource that is not Locked",
              "shortDescription": {
                "text": "The software attempts to unlock a resource that is not locked."
              },
              "fullDescription": {
                "text": "Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-833",
              "name": "Deadlock",
              "shortDescription": {
                "text": "The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-834",
              "name": "Excessive Iteration",
              "shortDescription": {
                "text": "The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed."
              },
              "fullDescription": {
                "text": "If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the software or its host system; it depends on the amount of resources consumed per iteration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-835",
              "name": "Loop with Unreachable Exit Condition ('Infinite Loop')",
              "shortDescription": {
                "text": "The program contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop."
              },
              "fullDescription": {
                "text": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-834",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-836",
              "name": "Use of Password Hash Instead of Password for Authentication",
              "shortDescription": {
                "text": "The software records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store."
              },
              "fullDescription": {
                "text": "Some authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password. As a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-287",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-602",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-837",
              "name": "Improper Enforcement of a Single, Unique Action",
              "shortDescription": {
                "text": "The software requires that an actor should only be able to perform an action once, or to have only one unique action, but the software does not enforce or improperly enforces this restriction."
              },
              "fullDescription": {
                "text": "In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to stuff the ballot box by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-799",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-838",
              "name": "Inappropriate Encoding for Output Context",
              "shortDescription": {
                "text": "The software uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component."
              },
              "fullDescription": {
                "text": "This weakness can cause the downstream component to use a decoding method that produces different data than what the software intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the software. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks. While using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output. For example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding. While web applications have received the most attention for this problem, this weakness could potentially apply to any type of software that uses a communications stream that could support multiple encodings."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-116",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-839",
              "name": "Numeric Range Comparison Without Minimum Check",
              "shortDescription": {
                "text": "The program checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum."
              },
              "fullDescription": {
                "text": "Some programs use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption. The use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1023",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-195",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-682",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-124",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-841",
              "name": "Improper Enforcement of Behavioral Workflow",
              "shortDescription": {
                "text": "The software supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence."
              },
              "fullDescription": {
                "text": "By performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the software or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses. For example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the software might still perform the transfer. Note that this is different than CWE-696, which focuses on when the software performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence. Workflow-related behaviors include: Steps are performed in the expected order. Required steps are not omitted. Steps are not interrupted. Steps are performed in a timely fashion."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-842",
              "name": "Placement of User into Incorrect Group",
              "shortDescription": {
                "text": "The software or the administrator places a user into an incorrect group."
              },
              "fullDescription": {
                "text": "If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-286",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-843",
              "name": "Access of Resource Using Incompatible Type ('Type Confusion')",
              "shortDescription": {
                "text": "The program allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type."
              },
              "fullDescription": {
                "text": "When the program accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access. While this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways. This weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-704",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-862",
              "name": "Missing Authorization",
              "shortDescription": {
                "text": "The software does not perform an authorization check when an actor attempts to access a resource or perform an action."
              },
              "fullDescription": {
                "text": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-863",
              "name": "Incorrect Authorization",
              "shortDescription": {
                "text": "The software performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions."
              },
              "fullDescription": {
                "text": "Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-908",
              "name": "Use of Uninitialized Resource",
              "shortDescription": {
                "text": "The software uses or accesses a resource that has not been initialized."
              },
              "fullDescription": {
                "text": "When a resource has not been properly initialized, the software may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-909",
              "name": "Missing Initialization of Resource",
              "shortDescription": {
                "text": "The software does not initialize a critical resource."
              },
              "fullDescription": {
                "text": "Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-908",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-910",
              "name": "Use of Expired File Descriptor",
              "shortDescription": {
                "text": "The software uses or accesses a file descriptor after it has been closed."
              },
              "fullDescription": {
                "text": "After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-911",
              "name": "Improper Update of Reference Count",
              "shortDescription": {
                "text": "The software uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count."
              },
              "fullDescription": {
                "text": "Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-672",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-772",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-912",
              "name": "Hidden Functionality",
              "shortDescription": {
                "text": "The software contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the software's users or administrators."
              },
              "fullDescription": {
                "text": "Hidden functionality can take many forms, such as intentionally malicious code, Easter Eggs that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the software's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-913",
              "name": "Improper Control of Dynamically-Managed Code Resources",
              "shortDescription": {
                "text": "The software does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements."
              },
              "fullDescription": {
                "text": "Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-914",
              "name": "Improper Control of Dynamically-Identified Variables",
              "shortDescription": {
                "text": "The software does not properly restrict reading from or writing to dynamically-identified variables."
              },
              "fullDescription": {
                "text": "Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-99",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-913",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-915",
              "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes",
              "shortDescription": {
                "text": "The software receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified."
              },
              "fullDescription": {
                "text": "If the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability. This weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-913",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-502",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-916",
              "name": "Use of Password Hash With Insufficient Computational Effort",
              "shortDescription": {
                "text": "The software generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive."
              },
              "fullDescription": {
                "text": "Many password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash. Many hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker. There are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack: The amount of CPU time required to compute the hash (stretching) The amount of memory required to compute the hash (memory-hard operations) Including a random value, along with the password, as input to the hash computation (salting) Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (one-way hashing) Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (collision resistance) Note that the security requirements for the software may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-917",
              "name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')",
              "shortDescription": {
                "text": "The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-77",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-918",
              "name": "Server-Side Request Forgery (SSRF)",
              "shortDescription": {
                "text": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination."
              },
              "fullDescription": {
                "text": "By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-441",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-920",
              "name": "Improper Restriction of Power Consumption",
              "shortDescription": {
                "text": "The software operates in an environment in which power is a limited resource that cannot be automatically replenished, but the software does not properly restrict the amount of power that its operation consumes."
              },
              "fullDescription": {
                "text": "In environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the software itself, and the device might not always be directly attached to a reliable power source. If the software uses too much power too quickly, then this could cause the device (and subsequently, the software) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs. Normal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as: Display CPU Disk I/O GPS Sound Microphone USB interface"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-921",
              "name": "Storage of Sensitive Data in a Mechanism without Access Control",
              "shortDescription": {
                "text": "The software stores sensitive information in a file system or device that does not have built-in access control."
              },
              "fullDescription": {
                "text": "While many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data. On Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-922",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-922",
              "name": "Insecure Storage of Sensitive Information",
              "shortDescription": {
                "text": "The software stores sensitive information without properly limiting read or write access by unauthorized actors."
              },
              "fullDescription": {
                "text": "If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-923",
              "name": "Improper Restriction of Communication Channel to Intended Endpoints",
              "shortDescription": {
                "text": "The software establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint."
              },
              "fullDescription": {
                "text": "Attackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint. While this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-924",
              "name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel",
              "shortDescription": {
                "text": "The software establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission."
              },
              "fullDescription": {
                "text": "Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-925",
              "name": "Improper Verification of Intent by Broadcast Receiver",
              "shortDescription": {
                "text": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source."
              },
              "fullDescription": {
                "text": "Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-926",
              "name": "Improper Export of Android Application Components",
              "shortDescription": {
                "text": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains."
              },
              "fullDescription": {
                "text": "The attacks and consequences of improperly exporting a component may depend on the exported component: If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application. If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application. If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-927",
              "name": "Use of Implicit Intent for Sensitive Communication",
              "shortDescription": {
                "text": "The Android application uses an implicit intent for transmitting sensitive data to other applications."
              },
              "fullDescription": {
                "text": "Since an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky. Ordered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain. Sticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents. In addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-939",
              "name": "Improper Authorization in Handler for Custom URL Scheme",
              "shortDescription": {
                "text": "The software uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme."
              },
              "fullDescription": {
                "text": "Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-862",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-940",
              "name": "Improper Verification of Source of a Communication Channel",
              "shortDescription": {
                "text": "The software establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin."
              },
              "fullDescription": {
                "text": "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-941",
              "name": "Incorrectly Specified Destination in a Communication Channel",
              "shortDescription": {
                "text": "The software creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor."
              },
              "fullDescription": {
                "text": "Attackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service. There are at least two distinct weaknesses that can cause the software to communicate with an unintended destination: If the software allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions. If the software incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the software might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a sticky broadcast to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-923",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-406",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-942",
              "name": "Permissive Cross-domain Policy with Untrusted Domains",
              "shortDescription": {
                "text": "The software uses a cross-domain policy file that includes domains that should not be trusted."
              },
              "fullDescription": {
                "text": "A cross-domain policy file (crossdomain.xml in Flash and clientaccesspolicy.xml in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made. Therefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains. An overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site. In many cases, the attack can be launched without the victim even being aware of it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-183",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-943",
              "name": "Improper Neutralization of Special Elements in Data Query Logic",
              "shortDescription": {
                "text": "The application generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query."
              },
              "fullDescription": {
                "text": "Depending on the capabilities of the query language, an attacker could inject additional logic into the query to: Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated Append additional commands to the query Return more entities than intended Return fewer entities than intended Cause entities to be sorted in an unexpected way The ability to execute additional commands or change which entities are returned has obvious risks. But when the application logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the application query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges. While this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and NoSQL languages."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1004",
              "name": "Sensitive Cookie Without 'HttpOnly' Flag",
              "shortDescription": {
                "text": "The software uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag."
              },
              "fullDescription": {
                "text": "The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-732",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1007",
              "name": "Insufficient Visual Distinction of Homoglyphs Presented to User",
              "shortDescription": {
                "text": "The software displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action."
              },
              "fullDescription": {
                "text": "Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase l (ell) and uppercase I (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter A and the Greek capital letter Α (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark À and its equivalent À with the acute accent. Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-451",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1021",
              "name": "Improper Restriction of Rendered UI Layers or Frames",
              "shortDescription": {
                "text": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with."
              },
              "fullDescription": {
                "text": "A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-441",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-610",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-451",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1022",
              "name": "Use of Web Link to Untrusted Target with window.opener Access",
              "shortDescription": {
                "text": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying security-critical properties of the window.opener object, such as the location property."
              },
              "fullDescription": {
                "text": "When a user clicks a link to an external site (target), the target=_blank attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-266",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1023",
              "name": "Incomplete Comparison with Missing Factors",
              "shortDescription": {
                "text": "The software performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors."
              },
              "fullDescription": {
                "text": "An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1024",
              "name": "Comparison of Incompatible Types",
              "shortDescription": {
                "text": "The software performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared."
              },
              "fullDescription": {
                "text": "In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string 123 might be converted to a number type. See examples."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1025",
              "name": "Comparison Using Wrong Factors",
              "shortDescription": {
                "text": "The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses."
              },
              "fullDescription": {
                "text": "This can lead to incorrect results and resultant weaknesses. For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two equal objects to be considered unequal."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1037",
              "name": "Processor Optimization Removal or Modification of Security-critical Code",
              "shortDescription": {
                "text": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1038",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1038",
              "name": "Insecure Automated Optimizations",
              "shortDescription": {
                "text": "The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-435",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1039",
              "name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations",
              "shortDescription": {
                "text": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept."
              },
              "fullDescription": {
                "text": "When techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision. If the automated mechanism is not developed or trained with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification. Targeted technologies include, but are not necessarily limited to: automated speech recognition automated image recognition For example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1041",
              "name": "Use of Redundant Code",
              "shortDescription": {
                "text": "The software has multiple functions, methods, procedures, macros, etc. that contain the same code."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1042",
              "name": "Static Member Data Element outside of a Singleton Class Element",
              "shortDescription": {
                "text": "The code contains a member element that is declared as static (but not final), in which its parent class element is not a singleton class - that is, a class element that can be used only once in the 'to' association of a Create action."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1176",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1043",
              "name": "Data Element Aggregating an Excessively Large Number of Non-Primitive Elements",
              "shortDescription": {
                "text": "The software uses a data element that has an excessively large number of sub-elements with non-primitive data types such as structures or aggregated objects."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of excessively large may vary for each product or developer, CISQ recommends a default of 5 sub-elements."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1093",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1044",
              "name": "Architecture with Number of Horizontal Layers Outside of Expected Range",
              "shortDescription": {
                "text": "The software's architecture contains too many - or too few - horizontal layers."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of expected range may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1045",
              "name": "Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor",
              "shortDescription": {
                "text": "A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1046",
              "name": "Creation of Immutable Text Using String Concatenation",
              "shortDescription": {
                "text": "The software creates an immutable text string using string concatenation operations."
              },
              "fullDescription": {
                "text": "When building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1176",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1047",
              "name": "Modules with Circular Dependencies",
              "shortDescription": {
                "text": "The software contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies."
              },
              "fullDescription": {
                "text": "As an example, with Java, this weakness might indicate cycles between packages. This issue makes it more difficult to maintain the software due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1048",
              "name": "Invokable Control Element with Large Number of Outward Calls",
              "shortDescription": {
                "text": "The code contains callable control elements that contain an excessively large number of references to other application objects external to the context of the callable, i.e. a Fan-Out value that is excessively large."
              },
              "fullDescription": {
                "text": "While the interpretation of excessively large Fan-Out value may vary for each product or developer, CISQ recommends a default of 5 referenced objects. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1049",
              "name": "Excessive Data Query Operations in a Large Data Table",
              "shortDescription": {
                "text": "The software performs a data query with a large number of joins and sub-queries on a large data table."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and large number of joins or sub-queries may vary for each product or developer, CISQ recommends a default of 1 million rows for a large data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1176",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1050",
              "name": "Excessive Platform Resource Consumption within a Loop",
              "shortDescription": {
                "text": "The software has a loop body or loop condition that contains a control element that directly or indirectly consumes platform resources, e.g. messaging, sessions, locks, or file descriptors."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1051",
              "name": "Initialization with Hard-Coded Network Resource Configuration Data",
              "shortDescription": {
                "text": "The software initializes data using hard-coded values that act as network resource identifiers."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1052",
              "name": "Excessive Use of Hard-Coded Literals in Initialization",
              "shortDescription": {
                "text": "The software initializes a data element using a hard-coded literal that is not a simple integer or static constant element."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to modify or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1053",
              "name": "Missing Documentation for Design",
              "shortDescription": {
                "text": "The product does not have documentation that represents how it is designed."
              },
              "fullDescription": {
                "text": "This issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1059",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1054",
              "name": "Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer",
              "shortDescription": {
                "text": "The code at one architectural layer invokes code that resides at a deeper layer than the adjacent layer, i.e., the invocation skips at least one layer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1055",
              "name": "Multiple Inheritance from Concrete Classes",
              "shortDescription": {
                "text": "The software contains a class with inheritance from more than one concrete class."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1093",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1056",
              "name": "Invokable Control Element with Variadic Parameters",
              "shortDescription": {
                "text": "A named-callable or method control element has a signature that supports a variable (variadic) number of parameters or arguments."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. With variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1057",
              "name": "Data Access Operations Outside of Expected Data Manager Component",
              "shortDescription": {
                "text": "The software uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1058",
              "name": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element",
              "shortDescription": {
                "text": "The code contains a function or method that operates in a multi-threaded environment but owns an unsafe non-final static storable or member data element."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1059",
              "name": "Incomplete Documentation",
              "shortDescription": {
                "text": "The documentation, whether on paper or in electronic form, does not contain descriptions of all the relevant elements of the product, such as its usage, structure, interfaces, design, implementation, configuration, operation, etc."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1060",
              "name": "Excessive Number of Inefficient Server-Side Data Accesses",
              "shortDescription": {
                "text": "The software performs too many data queries without using efficient data processing functionality such as stored procedures."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of too many data queries may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1061",
              "name": "Insufficient Encapsulation",
              "shortDescription": {
                "text": "The software does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1062",
              "name": "Parent Class with References to Child Class",
              "shortDescription": {
                "text": "The code has a parent class that contains references to a child class, its methods, or its members."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1063",
              "name": "Creation of Class Instance within a Static Code Block",
              "shortDescription": {
                "text": "A static code block creates an instance of a class."
              },
              "fullDescription": {
                "text": "This pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static. This issue can make the software perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1176",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1064",
              "name": "Invokable Control Element with Signature Containing an Excessive Number of Parameters",
              "shortDescription": {
                "text": "The software contains a function, subroutine, or method whose signature has an unnecessarily large number of parameters/arguments."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parameters. may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1065",
              "name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers",
              "shortDescription": {
                "text": "The application uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1066",
              "name": "Missing Serialization Control Element",
              "shortDescription": {
                "text": "The software contains a serializable data element that does not have an associated serialization method."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1067",
              "name": "Excessive Execution of Sequential Searches of Data Resource",
              "shortDescription": {
                "text": "The software contains a data query against an SQL table or view that is configured in a way that does not utilize an index and may cause sequential searches to be performed."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1176",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1068",
              "name": "Inconsistency Between Implementation and Documented Design",
              "shortDescription": {
                "text": "The implementation of the product is not consistent with the design as described within the relevant documentation."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1069",
              "name": "Empty Exception Block",
              "shortDescription": {
                "text": "An invokable code block contains an exception handling block that does not contain any code, i.e. is empty."
              },
              "fullDescription": {
                "text": "When an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1071",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1070",
              "name": "Serializable Data Element Containing non-Serializable Item Elements",
              "shortDescription": {
                "text": "The software contains a serializable, storable data element such as a field or member, but the data element contains member elements that are not serializable."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability. As examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1071",
              "name": "Empty Code Block",
              "shortDescription": {
                "text": "The source code contains a block that does not contain any code, i.e., the block is empty."
              },
              "fullDescription": {
                "text": "Empty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1164",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1072",
              "name": "Data Resource Access without Use of Connection Pooling",
              "shortDescription": {
                "text": "The software accesses a data resource through a database without using a connection pooling capability."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1073",
              "name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses",
              "shortDescription": {
                "text": "The software contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large number of data accesses/queries may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1074",
              "name": "Class with Excessively Deep Inheritance",
              "shortDescription": {
                "text": "A class has an inheritance level that is too high, i.e., it has a large number of parent classes."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of parent classes may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1093",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1075",
              "name": "Unconditional Control Flow Transfer outside of Switch Block",
              "shortDescription": {
                "text": "The software performs unconditional control transfer (such as a goto) in code outside of a branching structure such as a switch block."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1076",
              "name": "Insufficient Adherence to Expected Conventions",
              "shortDescription": {
                "text": "The product's architecture, source code, design, documentation, or other artifact does not follow required conventions."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1077",
              "name": "Floating Point Comparison with Incorrect Operator",
              "shortDescription": {
                "text": "The code performs a comparison such as an equality test between two float (floating point) values, but it uses comparison operators that do not account for the possibility of loss of precision."
              },
              "fullDescription": {
                "text": "Numeric calculation using floating point values can generate imprecise results because of rounding errors. As a result, two different calculations might generate numbers that are mathematically equal, but have slightly different bit representations that do not translate to the same mathematically-equal values. As a result, an equality test or other comparison might produce unexpected results. This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1078",
              "name": "Inappropriate Source Code Style or Formatting",
              "shortDescription": {
                "text": "The source code does not follow desired style or formatting for indentation, white space, comments, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1079",
              "name": "Parent Class without Virtual Destructor Method",
              "shortDescription": {
                "text": "A parent class contains one or more child classes, but the parent class does not have a virtual destructor method."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1080",
              "name": "Source Code File with Excessive Number of Lines of Code",
              "shortDescription": {
                "text": "A source code file has too many lines of code."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many lines of code may vary for each product or developer, CISQ recommends a default threshold value of 1000."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1082",
              "name": "Class Instance Self Destruction Control Element",
              "shortDescription": {
                "text": "The code contains a class instance that calls the method or function to delete or destroy itself."
              },
              "fullDescription": {
                "text": "For example, in C++, delete this will cause the object to delete itself. This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1083",
              "name": "Data Access from Outside Expected Data Manager Component",
              "shortDescription": {
                "text": "The software is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component."
              },
              "fullDescription": {
                "text": "When the software has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design. This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1084",
              "name": "Invokable Control Element with Excessive File or Data Access Operations",
              "shortDescription": {
                "text": "A function or method contains too many operations that utilize a data manager or file resource."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of too many operations may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1085",
              "name": "Invokable Control Element with Excessive Volume of Commented-out Code",
              "shortDescription": {
                "text": "A function, method, procedure, etc. contains an excessive amount of code that has been commented out within its body."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of excessive volume may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1086",
              "name": "Class with Excessive Number of Child Classes",
              "shortDescription": {
                "text": "A class contains an unnecessarily large number of children."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. While the interpretation of large number of children may vary for each product or developer, CISQ recommends a default maximum of 10 child classes."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1093",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1087",
              "name": "Class with Virtual Method without a Virtual Destructor",
              "shortDescription": {
                "text": "A class contains a virtual method, but the method does not have an associated virtual destructor."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1088",
              "name": "Synchronous Access of Remote Resource without Timeout",
              "shortDescription": {
                "text": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, since an outage for the remote resource can cause the software to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-821",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1089",
              "name": "Large Data Table with Excessive Number of Indices",
              "shortDescription": {
                "text": "The software uses a large data table that contains an excessively large number of indices."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessively large number of indices may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a large table and a default threshold of 3 indices."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1090",
              "name": "Method Containing Access of a Member Element from Another Class",
              "shortDescription": {
                "text": "A method for a class performs an operation that directly accesses a member element from another class."
              },
              "fullDescription": {
                "text": "This issue suggests poor encapsulation and makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1091",
              "name": "Use of Object without Invoking Destructor Method",
              "shortDescription": {
                "text": "The software contains a method that accesses an object but does not later invoke the element's associated finalize/destructor method."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-772",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1092",
              "name": "Use of Same Invokable Control Element in Multiple Architectural Layers",
              "shortDescription": {
                "text": "The software uses the same control element across multiple architectural layers."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1093",
              "name": "Excessively Complex Data Representation",
              "shortDescription": {
                "text": "The software uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1094",
              "name": "Excessive Index Range Scan for a Data Resource",
              "shortDescription": {
                "text": "The software contains an index range scan for a large data table, but the scan can cover a large number of rows."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability. While the interpretation of large data table and excessive index range may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1095",
              "name": "Loop Condition Value Update within the Loop",
              "shortDescription": {
                "text": "The software uses a loop with a control flow condition based on a value that is updated within the body of the loop."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1096",
              "name": "Singleton Class Instance Creation without Proper Locking or Synchronization",
              "shortDescription": {
                "text": "The software implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-820",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-662",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1097",
              "name": "Persistent Storable Data Element without Associated Comparison Control Element",
              "shortDescription": {
                "text": "The software uses a storable data element that does not have all of the associated functions or methods that are necessary to support comparison."
              },
              "fullDescription": {
                "text": "For example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined. This issue can prevent the software from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-595",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1098",
              "name": "Data Element containing Pointer Item without Proper Copy Control Element",
              "shortDescription": {
                "text": "The code contains a data element with a pointer that does not have an associated copy or constructor method."
              },
              "fullDescription": {
                "text": "This issue can prevent the software from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1099",
              "name": "Inconsistent Naming Conventions for Identifiers",
              "shortDescription": {
                "text": "The product's code, documentation, or other artifacts do not consistently use the same naming conventions for variables, callables, groups of related callables, I/O capabilities, data types, file names, or similar types of elements."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1100",
              "name": "Insufficient Isolation of System-Dependent Functions",
              "shortDescription": {
                "text": "The product or code does not isolate system-dependent functionality into separate standalone modules."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain and/or port the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1101",
              "name": "Reliance on Runtime Component in Generated Code",
              "shortDescription": {
                "text": "The product uses automatically-generated code that cannot be executed without a specific runtime support component."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1102",
              "name": "Reliance on Machine-Dependent Data Representation",
              "shortDescription": {
                "text": "The code uses a data representation that relies on low-level data representation or constructs that may vary across different processors, physical machines, OSes, or other physical components."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain and/or port the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1105",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1103",
              "name": "Use of Platform-Dependent Third Party Components",
              "shortDescription": {
                "text": "The product relies on third-party software components that do not provide equivalent functionality across all desirable platforms."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1104",
              "name": "Use of Unmaintained Third Party Components",
              "shortDescription": {
                "text": "The product relies on third-party components that are not actively supported or maintained by the original developer or a trusted proxy for the original developer."
              },
              "fullDescription": {
                "text": "Reliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1105",
              "name": "Insufficient Encapsulation of Machine-Dependent Functionality",
              "shortDescription": {
                "text": "The product or code uses machine-dependent functionality, but it does not sufficiently encapsulate or isolate this functionality from the rest of the code."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to port or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-758",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1061",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1106",
              "name": "Insufficient Use of Symbolic Constants",
              "shortDescription": {
                "text": "The source code uses literal constants that may need to change or evolve over time, instead of using symbolic constants."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1107",
              "name": "Insufficient Isolation of Symbolic Constant Definitions",
              "shortDescription": {
                "text": "The source code uses symbolic constants, but it does not sufficiently place the definitions of these constants into a more centralized or isolated location."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1108",
              "name": "Excessive Reliance on Global Variables",
              "shortDescription": {
                "text": "The code is structured in a way that relies too much on using or setting global variables throughout various points in the code, instead of preserving the associated information in a narrower, more local context."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1076",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1109",
              "name": "Use of Same Variable for Multiple Purposes",
              "shortDescription": {
                "text": "The code contains a callable, block, or other code element in which the same variable is used to control more than one unique task or store more than one instance of data."
              },
              "fullDescription": {
                "text": "Use of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1110",
              "name": "Incomplete Design Documentation",
              "shortDescription": {
                "text": "The product's design documentation does not adequately describe control flow, data flow, system initialization, relationships between tasks, components, rationales, or other important aspects of the design."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1059",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1111",
              "name": "Incomplete I/O Documentation",
              "shortDescription": {
                "text": "The product's documentation does not adequately define inputs, outputs, or system/software interfaces."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1059",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1112",
              "name": "Incomplete Documentation of Program Execution",
              "shortDescription": {
                "text": "The document does not fully define all mechanisms that are used to control or influence how product-specific programs are executed."
              },
              "fullDescription": {
                "text": "This includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1059",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1113",
              "name": "Inappropriate Comment Style",
              "shortDescription": {
                "text": "The source code uses comment styles or formats that are inconsistent or do not follow expected standards for the product."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1114",
              "name": "Inappropriate Whitespace Style",
              "shortDescription": {
                "text": "The source code contains whitespace that is inconsistent across the code or does not follow expected standards for the product."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1115",
              "name": "Source Code Element without Standard Prologue",
              "shortDescription": {
                "text": "The source code contains elements such as source files that do not consistently provide a prologue or header that has been standardized for the project."
              },
              "fullDescription": {
                "text": "The lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc. This issue makes it more difficult to maintain the software due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1116",
              "name": "Inaccurate Comments",
              "shortDescription": {
                "text": "The source code contains comments that do not accurately describe or explain aspects of the portion of the code with which the comment is associated."
              },
              "fullDescription": {
                "text": "When a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly. This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1117",
              "name": "Callable with Insufficient Behavioral Summary",
              "shortDescription": {
                "text": "The code contains a function or method whose signature and/or associated inline documentation does not sufficiently describe the callable's inputs, outputs, side effects, assumptions, or return codes."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1078",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1118",
              "name": "Insufficient Documentation of Error Handling Techniques",
              "shortDescription": {
                "text": "The documentation does not sufficiently describe the techniques that are used for error handling, exception processing, or similar mechanisms."
              },
              "fullDescription": {
                "text": "Documentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1059",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1119",
              "name": "Excessive Use of Unconditional Branching",
              "shortDescription": {
                "text": "The code uses too many unconditional branches (such as goto)."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1120",
              "name": "Excessive Code Complexity",
              "shortDescription": {
                "text": "The code is too complex, as calculated using a well-defined, quantitative measure."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities. This issue can make the software perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1121",
              "name": "Excessive McCabe Cyclomatic Complexity",
              "shortDescription": {
                "text": "The code contains McCabe cyclomatic complexity that exceeds a desirable maximum."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1122",
              "name": "Excessive Halstead Complexity",
              "shortDescription": {
                "text": "The code is structured in a way that a Halstead complexity measure exceeds a desirable maximum."
              },
              "fullDescription": {
                "text": "A variety of Halstead complexity measures exist, such as program vocabulary size or volume. This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1123",
              "name": "Excessive Use of Self-Modifying Code",
              "shortDescription": {
                "text": "The product uses too much self-modifying code."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1124",
              "name": "Excessively Deep Nesting",
              "shortDescription": {
                "text": "The code contains a callable or other code grouping in which the nesting / branching is too deep."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1125",
              "name": "Excessive Attack Surface",
              "shortDescription": {
                "text": "The product has an attack surface whose quantitative measurement exceeds a desirable maximum."
              },
              "fullDescription": {
                "text": "Originating from software security, an attack surface measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1120",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1126",
              "name": "Declaration of Variable with Unnecessarily Wide Scope",
              "shortDescription": {
                "text": "The source code declares a variable in one scope, but the variable is only used within a narrower scope."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to understand and/or maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1127",
              "name": "Compilation with Insufficient Warnings or Errors",
              "shortDescription": {
                "text": "The code is compiled without sufficient warnings enabled, which may prevent the detection of subtle bugs or quality issues."
              },
              "fullDescription": {
                "text": "This issue makes it more difficult to maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1164",
              "name": "Irrelevant Code",
              "shortDescription": {
                "text": "The program contains code that is not essential for execution, i.e. makes no state changes and has no side effects that alter data or control flow, such that removal of the code would have no impact to functionality or correctness."
              },
              "fullDescription": {
                "text": "Irrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1173",
              "name": "Improper Use of Validation Framework",
              "shortDescription": {
                "text": "The application does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library."
              },
              "fullDescription": {
                "text": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the application. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1174",
              "name": "ASP.NET Misconfiguration: Improper Model Validation",
              "shortDescription": {
                "text": "The ASP.NET application does not use, or incorrectly uses, the model validation framework."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1173",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1176",
              "name": "Inefficient CPU Computation",
              "shortDescription": {
                "text": "The program performs CPU computations using algorithms that are not as efficient as they could be for the needs of the developer, i.e., the computations can be optimized further."
              },
              "fullDescription": {
                "text": "This issue can make the software perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-405",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1177",
              "name": "Use of Prohibited Code",
              "shortDescription": {
                "text": "The software uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer."
              },
              "fullDescription": {
                "text": "The developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc. To reduce risk of vulnerabilities, the developer might maintain a list of banned functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the software more costly and difficult to maintain."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1187",
              "name": "DEPRECATED: Use of Uninitialized Resource",
              "shortDescription": {
                "text": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908."
              }
            },
            {
              "id": "CWE-1188",
              "name": "Insecure Default Initialization of Resource",
              "shortDescription": {
                "text": "The software initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure."
              },
              "fullDescription": {
                "text": "Developers often choose default values that leave the software as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1189",
              "name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)",
              "shortDescription": {
                "text": "The product does not properly isolate shared resources between trusted and untrusted agents."
              },
              "fullDescription": {
                "text": "A System-On-a-Chip (SoC) has a lot of functionality, but may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1190",
              "name": "DMA Device Enabled Too Early in Boot Phase",
              "shortDescription": {
                "text": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product."
              },
              "fullDescription": {
                "text": "DMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1191",
              "name": "Exposed Chip Debug and Test Interface With Insufficient or Missing Authorization",
              "shortDescription": {
                "text": "The chip does not implement or does not correctly check whether users are authorized to access internal registers."
              },
              "fullDescription": {
                "text": "A device's internal information may be accessed through a scan chain of interconnected internal registers usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present. If this control is not implemented or not implemented properly a user may be able to bypass on-chip protection mechanisms through debug interface."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-863",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1192",
              "name": "System-on-Chip (SoC) Using Components without Unique, Immutable Identifiers",
              "shortDescription": {
                "text": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components."
              },
              "fullDescription": {
                "text": "A System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else. There are several variants of this weakness: A missing identifier is when the SoC does not define any mechanism to uniquely identify the IP. An insufficient identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. A misconfigured mechanism occurs when a mechanism is available but not implemented correctly. An ignored identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-657",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1193",
              "name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control",
              "shortDescription": {
                "text": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled."
              },
              "fullDescription": {
                "text": "After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1209",
              "name": "Failure to Disable Reserved Bits",
              "shortDescription": {
                "text": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design. However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state."
              },
              "fullDescription": {
                "text": "Reserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-710",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1220",
              "name": "Insufficient Granularity of Access Control",
              "shortDescription": {
                "text": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection. A common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1221",
              "name": "Incorrect Register Defaults or Module Parameters",
              "shortDescription": {
                "text": "Hardware description language code incorrectly defines register defaults or hardware IP parameters to insecure values."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design. The system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1222",
              "name": "Insufficient Granularity of Address Regions Protected by Register Locks",
              "shortDescription": {
                "text": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later. A problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1220",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1223",
              "name": "Race Condition for Write-Once Attributes",
              "shortDescription": {
                "text": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Implementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1224",
              "name": "Improper Restriction of Write-Once Bit Fields",
              "shortDescription": {
                "text": "The hardware design control register sticky bits or write-once bit fields are improperly implemented, such that they can be reprogrammed by software."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or sticky. This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings. Failure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value 1, wherein they would work as write-1-once and not write-once."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1229",
              "name": "Creation of Emergent Resource",
              "shortDescription": {
                "text": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy."
              },
              "fullDescription": {
                "text": "A product is only expected to behave in a way that was specifically intended by the developer. Resource allocation and management is expected to be performed explicitly by the associated code. However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design. For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers. Parasitic computing, while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1230",
              "name": "Exposure of Sensitive Information Through Metadata",
              "shortDescription": {
                "text": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information."
              },
              "fullDescription": {
                "text": "Developers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1231",
              "name": "Improper Implementation of Lock Protection Registers",
              "shortDescription": {
                "text": "The product incorrectly implements register lock bit protection features such that protected controls can be programmed even after the lock has been set."
              },
              "fullDescription": {
                "text": "In integrated circuits and hardware IPs, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after being set to unlock the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1232",
              "name": "Improper Lock Behavior After Power State Transition",
              "shortDescription": {
                "text": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable."
              },
              "fullDescription": {
                "text": "Devices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions. After a power state transition, the lock bit is set to unlocked. Until the Some common weaknesses that can exist in such a protection scheme is that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1233",
              "name": "Improper Hardware Lock Protection for Security Sensitive Controls",
              "shortDescription": {
                "text": "The product implements a register lock bit protection feature that permits security sensitive controls to modify the protected configuration."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If any system registers/controls that can modify the protected configuration are not write-protected by the lock, they can then be leveraged by software to modify the protected configuration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1234",
              "name": "Hardware Internal or Debug Modes Allow Override of Locks",
              "shortDescription": {
                "text": "System configuration protection may be bypassed during debug mode."
              },
              "fullDescription": {
                "text": "Device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-667",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1235",
              "name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations",
              "shortDescription": {
                "text": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations."
              },
              "fullDescription": {
                "text": "Languages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner. However, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support impedance mismatch between reference types and primitives."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-400",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1236",
              "name": "Improper Neutralization of Formula Elements in a CSV File",
              "shortDescription": {
                "text": "The software saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by spreadsheet software."
              },
              "fullDescription": {
                "text": "User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulae, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-74",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1239",
              "name": "Improper Zeroization of Hardware Register",
              "shortDescription": {
                "text": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes."
              },
              "fullDescription": {
                "text": "Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267]."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-226",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1240",
              "name": "Use of a Risky Cryptographic Primitive",
              "shortDescription": {
                "text": "This device implements a cryptographic algorithm using a non-standard or unproven cryptographic primitive."
              },
              "fullDescription": {
                "text": "Cryptographic algorithms (or Cryptographic systems) depend on cryptographic primitives as their basic building blocks. As a result, cryptographic primitives are designed to do one very specific task in a precisely defined and highly reliable fashion. For example, one can declare that a specific crypto primitive (like an encryption routine) can only be broken after trying out N different inputs (the larger the value of N, the stronger the crypto). If a vulnerability is found that leads to breaking this primitive in significantly less than N attempts, then the specific cryptographic primitive is considered broken, and the entirety of the cryptographic algorithm (or the cryptographic system) is now considered insecure. Thus, even breaking a seemingly small cryptographic primitive is sufficient to render the whole system vulnerable. Cryptographic primitives are products of extensive reviews from cryptographers, industry, and government entities looking for any possible flaws. However, over time even well-known cryptographic primitives lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly. If ad-hoc cryptographic primitives are implemented, it is almost certain that such implementations will be vulnerable to attacks resulting in the exposure of sensitive information and other consequences."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-327",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1241",
              "name": "Use of Predictable Algorithm in Random Number Generator",
              "shortDescription": {
                "text": "The device uses an algorithm that is predictable and generates a pseudo-random number."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-330",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1242",
              "name": "Inclusion of Undocumented Features or Chicken Bits",
              "shortDescription": {
                "text": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors."
              },
              "fullDescription": {
                "text": "A common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as chicken bits. They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1243",
              "name": "Sensitive Non-Volatile Information Not Protected During Debug",
              "shortDescription": {
                "text": "Access to security-sensitive information stored in fuses is not limited during debug."
              },
              "fullDescription": {
                "text": "Several security-sensitive values are are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a users to access this sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1244",
              "name": "Improper Access to Sensitive Information Using Debug and Test Interfaces",
              "shortDescription": {
                "text": "The product's physical debug and test interface protection does not block untrusted agents, resulting in unauthorized access to and potentially control of sensitive assets."
              },
              "fullDescription": {
                "text": "If the product implements access-control protection on the debug and test interface, a debugger is typically required to enter either a valid response to a challenge provided by the authorization logic or, alternatively, enter the right password in order to exercise the debug and test interface. However, if this protection mechanism does not exclude all untrusted, debug agents, an attacker could access/control security-sensitive registers."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1245",
              "name": "Improper Finite State Machines (FSMs) in Hardware Logic",
              "shortDescription": {
                "text": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system."
              },
              "fullDescription": {
                "text": "The functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-684",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1246",
              "name": "Improper Write Handling in Limited-write Non-Volatile Memories",
              "shortDescription": {
                "text": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories."
              },
              "fullDescription": {
                "text": "Non-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1247",
              "name": "Missing or Improperly Implemented Protection Against Voltage and Clock Glitches",
              "shortDescription": {
                "text": "The device does not contain or contains improperly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device."
              },
              "fullDescription": {
                "text": "A device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-703",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1248",
              "name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications",
              "shortDescription": {
                "text": "The security-sensitive hardware module contains semiconductor defects."
              },
              "fullDescription": {
                "text": "A semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, security guarantees offered by the device will be compromised."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1249",
              "name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System",
              "shortDescription": {
                "text": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state."
              },
              "fullDescription": {
                "text": "Many products provide web-based applications or other software for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems. When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise. For example, numerous systems utilize a web front-end for administrative control. They also offer the ability to add, alter, and drop users with various privileges as it relates to the functionality of the system. A potential architectural weakness may exist where the user information reflected in the web interface does not mirror the users in the underlying operating system. Many web UI or REST APIs use the underlying operating system for authentication; the system's logic may also track an additional set of user capabilities within configuration files and datasets for authorization capabilities. When there is a discrepancy between the user information in the UI or REST API's interface system and the underlying operating system's user listing, this may introduce a weakness into the system. For example, if an attacker compromises the OS and adds a new user account - a ghost account - then the attacker could escape detection if the management tool does not list the newly-added account. This discrepancy could be exploited in several ways: A rogue admin could insert a new account into a system that will persist if they are terminated or wish to take action on a system that cannot be directly associated with them. An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh. An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all. An attacker could create an admin account which is viewable by an administrator, use this account to create the ghost account, delete logs and delete the first created admin account. Many of these attacker scenarios can be realized by leveraging separate vulnerabilities related to XSS, command injection, authentication bypass, or logic flaws on the various systems."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1250",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1250",
              "name": "Improper Preservation of Consistency Between Independent Representations of Shared State",
              "shortDescription": {
                "text": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other."
              },
              "fullDescription": {
                "text": "In highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same view of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same view of the world. Alternately, a processor's Memory Management Unit (MMU) might have shadow MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory. In such environments, it becomes critical for the product to ensure that this shared state is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1251",
              "name": "Mirrored Regions with Different Values",
              "shortDescription": {
                "text": "The product's architecture mirrors regions without ensuring that their contents always stay in sync."
              },
              "fullDescription": {
                "text": "Having mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise. In the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a local copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true. During hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called shadow copies or mirrored copies. If the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast. This situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: After the values in the original copy change, due to some reason the original copy does not send the update request to its shadow copies. After the values in the original copy change, the original copy dutifully sends the update request to its shadow copies, but due to some reason the shadow copy does not execute this update request. After the values in the original copy change, the original copy sends the update request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has new values and the shadow copy is still holding the old values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins. The attacker might send a spoofed update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker. Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the old value, and the shadow copy has the new value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1250",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1252",
              "name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations",
              "shortDescription": {
                "text": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory."
              },
              "fullDescription": {
                "text": "CPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1253",
              "name": "Incorrect Selection of Fuse Values",
              "shortDescription": {
                "text": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse."
              },
              "fullDescription": {
                "text": "Fuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an unsecure state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1254",
              "name": "Incorrect Comparison Logic Granularity",
              "shortDescription": {
                "text": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes."
              },
              "fullDescription": {
                "text": "Comparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-208",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-697",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1255",
              "name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks",
              "shortDescription": {
                "text": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token."
              },
              "fullDescription": {
                "text": "The power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a good entry and a bad entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-205",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-681",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1259",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1256",
              "name": "Hardware Features Enable Physical Attacks from Software",
              "shortDescription": {
                "text": "Software-controllable device functionality such as power and clock management permits unauthorized modification of memory or register bits."
              },
              "fullDescription": {
                "text": "Fault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Techniques employed to flip bits include low-cost methods such as manipulation of the device clock and voltage supply as well as high-cost but more precise techniques involving lasers. To inject faults a physical access requirement is frequently assumed to be necessary. This assumption may be false if the device has improperly secured power management features that allow untrusted programs to manipulate the device clock frequency or operating voltage. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency are common features in today’s chipsets and can be exploited by attackers if protections are not in place. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software can result in bit flips in other memory locations (Rowhammer)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1257",
              "name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions",
              "shortDescription": {
                "text": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region."
              },
              "fullDescription": {
                "text": "Hardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO). Each memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell. This is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address. A common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory. An untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1258",
              "name": "Exposure of Sensitive System Information Due to Uncleared Debug Information",
              "shortDescription": {
                "text": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered."
              },
              "fullDescription": {
                "text": "Security sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-212",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1259",
              "name": "Improper Restriction of Security Token Assignment",
              "shortDescription": {
                "text": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected."
              },
              "fullDescription": {
                "text": "Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1294",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1260",
              "name": "Improper Handling of Overlap Between Protected Memory Ranges",
              "shortDescription": {
                "text": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection."
              },
              "fullDescription": {
                "text": "Isolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software. If a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower privilege software to read or write into the protected memory region resulting in privilege escalation attack. Address overlap weakness can also be used to launch a denial of service attack on the higher privilege software memory regions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-119",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1261",
              "name": "Improper Handling of Single Event Upsets",
              "shortDescription": {
                "text": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur."
              },
              "fullDescription": {
                "text": "Technology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-755",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1254",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1262",
              "name": "Register Interface Allows Software Access to Sensitive Data or Security Settings",
              "shortDescription": {
                "text": "Memory-mapped registers provide access to hardware functionality from software and if not properly secured can result in loss of confidentiality and integrity."
              },
              "fullDescription": {
                "text": "Software commonly accesses peripherals in an SoC through a memory-mapped register interface. Any security-critical data accessible directly or indirectly through the register interface must have a clearly defined and correctly implemented access control policy to protect assets from malicious software tampering."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1263",
              "name": "Improper Physical Access Control",
              "shortDescription": {
                "text": "The product is to be designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor's ability to access these areas."
              },
              "fullDescription": {
                "text": "Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1191",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1243",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1264",
              "name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels",
              "shortDescription": {
                "text": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete."
              },
              "fullDescription": {
                "text": "Many high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-821",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1037",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1265",
              "name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls",
              "shortDescription": {
                "text": "During execution of non-reentrant code, the software performs a call that unintentionally produces a nested invocation of the non-reentrant code."
              },
              "fullDescription": {
                "text": "In complex software, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently of concern in software that executes script from untrusted sources. Examples of such software are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-663",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-416",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1266",
              "name": "Improper Scrubbing of Sensitive Data from Decommissioned Device",
              "shortDescription": {
                "text": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned. A scrubbing capability could be missing, insufficient, or incorrect."
              },
              "fullDescription": {
                "text": "When a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. scrubbing. Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-404",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1267",
              "name": "Policy Uses Obsolete Encoding",
              "shortDescription": {
                "text": "The product uses an obsolete encoding mechanism to implement access controls."
              },
              "fullDescription": {
                "text": "Within a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1268",
              "name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents",
              "shortDescription": {
                "text": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies."
              },
              "fullDescription": {
                "text": "Integrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves. Resources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1269",
              "name": "Product Released in Non-Release Configuration",
              "shortDescription": {
                "text": "The product released to market is released in pre-production or manufacturing configuration."
              },
              "fullDescription": {
                "text": "Products in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to: Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity) Ability to read/write/modify/dump internal state (including registers and memory) Ability to change system configurations Ability to run hidden or private commands that are not allowed during production (as they expose IP). The above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state. Complexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called “complete” and have the “Manufacturing Complete” fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1270",
              "name": "Generation of Incorrect Security Tokens",
              "shortDescription": {
                "text": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect."
              },
              "fullDescription": {
                "text": "Systems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be read, write, program, reset, fetch, compute, etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1294",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1271",
              "name": "Unitialized Value on Reset for Registers Holding Security Settings",
              "shortDescription": {
                "text": "Security-critical logic is not set to a known value on reset."
              },
              "fullDescription": {
                "text": "When the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1272",
              "name": "Sensitive Information Uncleared Before Debug/Power State Transition",
              "shortDescription": {
                "text": "Sensitive information may leak as a result of a debug or power state transition when information access restrictions change as a result of the transition."
              },
              "fullDescription": {
                "text": "A device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information make leak from the system."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-226",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1273",
              "name": "Device Unlock Credential Sharing",
              "shortDescription": {
                "text": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information."
              },
              "fullDescription": {
                "text": "“Unlocking a device” often means activating certain, unadvertised, debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is “locked” in the production part. Unless the device gets unlocked by supplying the proper credentials the debug capablilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are the all employed by the same company, the compromise of the credentials are greatly reduced. However, when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1274",
              "name": "Insufficient Protections on the Volatile Memory Containing Boot Code",
              "shortDescription": {
                "text": "The protections on the product's non-volatile memory containing boot code are insufficient to prevent the bypassing of secure boot or the execution of an untrusted, boot code chosen by an adversary."
              },
              "fullDescription": {
                "text": "As a part of secure-boot process, a System-on-Chip's (SoC) read-only-memory (ROM) code fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM)/static, random-access memory (SRAM). The NVM is usually external to the SoC while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code. If the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the excution of an adversary’s code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1275",
              "name": "Sensitive Cookie with Improper SameSite Attribute",
              "shortDescription": {
                "text": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used."
              },
              "fullDescription": {
                "text": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens)."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-352",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1276",
              "name": "Hardware Child Block Incorrectly Connected to Parent System",
              "shortDescription": {
                "text": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks."
              },
              "fullDescription": {
                "text": "Individual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1277",
              "name": "Firmware Not Updateable",
              "shortDescription": {
                "text": "A product's firmware cannot be updated or patched, leaving weaknesses present with no means of repair and the product vulnerable to attack."
              },
              "fullDescription": {
                "text": "The inability to patch the product's firmware means that any weaknesses therein cannot be mitigated through an update. This leaves the system/device open to potential exploitation of the inherent weaknesses. External protective measures and mitigations can be employed to aid in preventing malicious behavior, but the root weakness cannot be corrected."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1329",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1278",
              "name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques",
              "shortDescription": {
                "text": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy."
              },
              "fullDescription": {
                "text": "The physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope. The goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1279",
              "name": "Cryptographic Operations are run Before Supporting Units are Ready",
              "shortDescription": {
                "text": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result."
              },
              "fullDescription": {
                "text": "Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-665",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1280",
              "name": "Access Control Check Implemented After Asset is Accessed",
              "shortDescription": {
                "text": "A product's hardware-based access control check occurs after the asset has been accessed."
              },
              "fullDescription": {
                "text": "The product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-696",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1281",
              "name": "Sequence of Processor Instructions Leads to Unexpected Behavior (Halt and Catch Fire)",
              "shortDescription": {
                "text": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed."
              },
              "fullDescription": {
                "text": "If the instruction set architecture (ISA) and processor logic are not designed carefully, and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU. Some examples are the Pentium f00f bug, MC6800 HCF, the Cyrix comma bug, and more generally other Halt and Catch Fire instructions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-691",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1282",
              "name": "Assumed-Immutable Data is Stored in Writable Memory",
              "shortDescription": {
                "text": "Immutable data, such as a first-stage bootloader, device identifiers, and write-once configuration settings are stored in writable memory that can be re-programmed or updated in the field."
              },
              "fullDescription": {
                "text": "Security services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-668",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1283",
              "name": "Mutable Attestation or Measurement Reporting Data",
              "shortDescription": {
                "text": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary."
              },
              "fullDescription": {
                "text": "A System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1284",
              "name": "Improper Validation of Specified Quantity in Input",
              "shortDescription": {
                "text": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties."
              },
              "fullDescription": {
                "text": "Specified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1285",
              "name": "Improper Validation of Specified Index, Position, or Offset in Input",
              "shortDescription": {
                "text": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties."
              },
              "fullDescription": {
                "text": "Often, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1286",
              "name": "Improper Validation of Syntactic Correctness of Input",
              "shortDescription": {
                "text": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax."
              },
              "fullDescription": {
                "text": "Often, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1287",
              "name": "Improper Validation of Specified Type of Input",
              "shortDescription": {
                "text": "The product receives input that is expected to be of a certain type, but it does not validate or incorrectly validates that the input is actually of the expected type."
              },
              "fullDescription": {
                "text": "When input does not comply with the expected type, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities that would not be possible if the input conformed with the expected type. This weakness can appear in type-unsafe programming languages, or in programming languages that support casting or conversion of an input to another type."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-843",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1288",
              "name": "Improper Validation of Consistency within Input",
              "shortDescription": {
                "text": "The product receives a complex input with multiple elements or fields that must be consistent with each other, but it does not validate or incorrectly validates that the input is actually consistent."
              },
              "fullDescription": {
                "text": "Some input data can be structured with multiple elements or fields that must be consistent with each other, e.g. a number-of-items field that is followed by the expected number of elements. When such complex inputs are inconsistent, attackers could trigger unexpected errors, cause incorrect actions to take place, or exploit latent vulnerabilities."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1289",
              "name": "Improper Validation of Unsafe Equivalence in Input",
              "shortDescription": {
                "text": "The product receives an input value that is used as a resource identifier or other type of reference, but it does not validate or incorrectly validates that the input is equivalent to a potentially-unsafe value."
              },
              "fullDescription": {
                "text": "Attackers can sometimes bypass input validation schemes by finding inputs that appear to be safe, but will be dangerous when processed at a lower layer or by a downstream component. For example, a simple XSS protection mechanism might try to validate that an input has no <script> tags using case-sensitive matching, but since HTML is case-insensitive when processed by web browsers, an attacker could injest <ScrIpT> and trigger XSS."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-20",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-41",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-178",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1290",
              "name": "Incorrect Decoding of Security Identifiers ",
              "shortDescription": {
                "text": "The product implements a decoding mechanism to decode certain bus-transaction signals to security identifiers. If the decoding is implemented incorrectly, then untrusted agents can now gain unauthorized access to the asset."
              },
              "fullDescription": {
                "text": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. The security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A decoder decodes the bus transactions to map security identifiers into necessary access-controls/protections. A common weakness that can exist in this scenario is incorrect decoding because an untrusted agent’s security identifier is decoded into a trusted agent’s security identifier. Thus, an untrusted agent previously without access to an asset can now gain access to the asset."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1294",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1291",
              "name": "Public Key Re-Use for Signing both Debug and Production Code",
              "shortDescription": {
                "text": "The same public key is used for signing both debug and production code."
              },
              "fullDescription": {
                "text": "A common usage of public-key cryptography is to verify the integrity and authenticity of another entity (for example a firmware binary). If a company wants to ensure that its firmware runs only on its own hardware, before the firmware runs, an encrypted hash of the firmware image will be decrypted with the public key and then verified against the now-computed hash of the firmware image. This means that the public key forms the root of trust, which necessitates that the public key itself must be protected and used properly. During the development phase, debug firmware enables many hardware debug hooks, debug modes, and debug messages for testing. Those debug facilities provide significant, additional views about the firmware’s capability and, in some cases, additional capability into the chip or SoC. If compromised, these capabilities could be exploited by an attacker to take full control of the system. Once the product exits the manufacturing stage and enters production, it is good practice to use a different public key. Debug firmware images are known to leak. With the debug key being reused as the production key, the debug image will also work on the production image. Thus, it will open all the internal, debug capabilities to the attacker. If a different public key is used for the production image, even if the attacker gains access to the debug firmware image, they will not be able to run it on a production machine. Thus, damage will be limited to the intellectual property leakage resulting from the debug image."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-321",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1292",
              "name": "Incorrect Conversion of Security Identifiers",
              "shortDescription": {
                "text": "The product implements a conversion mechanism to map certain bus-transaction signals to security identifiers. However, if the conversion is incorrectly implemented, untrusted agents can gain unauthorized access to the asset."
              },
              "fullDescription": {
                "text": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity). Sometimes the transactions are qualified with a security identifier. This security identifier helps the destination agent decide on the set of allowed actions (e.g., access an asset for read and writes). A typical bus connects several leader and follower agents. Some follower agents implement bus protocols differently from leader agents. A protocol conversion happens at a bridge to seamlessly connect different protocols on the bus. One example is a system that implements a leader with the Advanced High-performance Bus (AHB) protocol and a follower with the Open-Core Protocol (OCP). A bridge AHB-to-OCP is needed to translate the transaction from one form to the other. A common weakness that can exist in this scenario is that this conversion between protocols is implemented incorrectly, whereupon an untrusted agent may gain unauthorized access to an asset."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1294",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1293",
              "name": "Missing Source Correlation of Multiple Independent Data",
              "shortDescription": {
                "text": "The software relies on one source of data, preventing the ability to detect if an adversary has compromised a data source."
              },
              "fullDescription": {
                "text": "Software has to implicitly trust the integrity of an information source. When information is implicitly signed, one can ensure that the data was not tampered in transit. This does not ensure that the information source was not compromised when responding to a request. By requesting information from multiple sources, one can check if all of the data is the same. If they are not, the system should report the information sources that respond with a different or minority value as potentially compromised. If there are not enough answers to provide a majority or plurality of responses, the system should report all of the sources as potentially compromised. As the seriousness of the impact of incorrect integrity increases, so should the number of independent information sources that would need to be queried."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-654",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1294",
              "name": "Insecure Security Identifier Mechanism",
              "shortDescription": {
                "text": "The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented."
              },
              "fullDescription": {
                "text": "Systems-On-Chip (Integrated circuits and hardware engines) implement Security Identifiers to differentiate/identify actions originated from various agents. These actions could be 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security identifiers are generated and assigned to every agent in the System (SoC) that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Identifier based on its trust level or privileges. A broad class of flaws can exist in the Security Identifier process, including but not limited to missing security identifiers, improper conversion of security identifiers, incorrect generation of security identifiers, etc."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1295",
              "name": "Debug Messages Revealing Unnecessary Information",
              "shortDescription": {
                "text": "The product fails to adequately prevent the revealing of unnecessary and potentially sensitive system information within debugging messages."
              },
              "fullDescription": {
                "text": "Debug messages are messages that help troubleshoot an issue by revealing the internal state of the system. For example, debug data in design can be exposed through internal memory array dumps or boot logs through interfaces like UART via TAP commands, scan chain, etc. Thus, the more information contained in a debug message, the easier it is to debug. However, there is also the risk of revealing information that could help an attacker either decipher a vulnerability, and/or gain a better understanding of the system. Thus, this extra information could lower the “security by obscurity” factor. While “security by obscurity” alone is insufficient, it can help as a part of “Defense-in-depth”."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-200",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1296",
              "name": "Incorrect Chaining or Granularity of Debug Components",
              "shortDescription": {
                "text": "The product's debug components contain incorrect chaining or granularity of debug components."
              },
              "fullDescription": {
                "text": "For debugging and troubleshooting a chip, several hardware design elements are often implemented, including: Various Test Access Ports (TAPs) allow boundary scan commands to be executed. For scanning the internal components of a chip, there are scan cells that allow the chip to be used as a stimulus and response mechanism. Chipmakers might create custom methods to observe the internal components of their chips by placing various tracing hubs within their chip and creating hierarchical or interconnected structures among those hubs. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could allow unintended access permissions."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1297",
              "name": "Unprotected Confidential Information on Device is Accessible by OSAT Vendors",
              "shortDescription": {
                "text": "The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors."
              },
              "fullDescription": {
                "text": "In contrast to complete vertical integration of architecting, designing, manufacturing, assembling, and testing chips all within a single organization, an organization can choose to simply architect and design a chip before outsourcing the rest of the process to OSAT entities (e.g., external foundries and test houses). In the latter example, the device enters an OSAT facility in a much more vulnerable pre-production stage where many debug and test modes are accessible. Therefore, the chipmaker must place a certain level of trust with the OSAT. To counter this, the chipmaker often requires the OSAT partner to enter into restrictive non-disclosure agreements (NDAs). Nonetheless, OSAT vendors likely have many customers, which increases the risk of accidental sharing of information. There may also be a security vulnerability in the information technology (IT) system of the OSAT facility. Alternatively, a malicious insider at the OSAT facility may carry out an insider attack. Considering these factors, it behooves the chipmaker to minimize any confidential information in the device that may be accessible to the OSAT vendor. Logic errors during design or synthesis could misconfigure the interconnection of the debug components, which could provide improper authorization to sensitive information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1298",
              "name": "Hardware Logic Contains Race Conditions",
              "shortDescription": {
                "text": "A race condition in the hardware logic results in undermining security guarantees of the system."
              },
              "fullDescription": {
                "text": "A race condition in logic circuits typically occurs when a logic gate gets inputs from signals that have traversed different paths while originating from the same source. Such inputs to the gate can change at slightly different times in response to a change in the source signal. This results in a timing error or a glitch (temporary or permanent) that causes the output to change to an unwanted state before settling back to the desired state. If such timing errors occur in access control logic or finite state machines that are implemented in security sensitive flows, an attacker might exploit them to circumvent existing protections."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-362",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1299",
              "name": "Missing Protection Mechanism for Alternate Hardware Interface",
              "shortDescription": {
                "text": "The lack of protections on alternate paths to access control-protected assets (such as unprotected shadow registers and other external facing unguarded interfaces) allows an attacker to bypass existing protections to the asset that are only performed against the primary path."
              },
              "fullDescription": {
                "text": "An asset inside a chip might have access-control protections through one interface. However, if all paths to the asset are not protected, an attacker might compromise the asset through alternate paths. These alternate paths could be through shadow or mirror registers inside the IP core, or could be paths from other external-facing interfaces to the IP core or SoC. Consider an SoC with various interfaces such as UART, SMBUS, PCIe, USB, etc. If access control is implemented for SoC internal registers only over the PCIe interface, then an attacker could still modify the SoC internal registers through alternate paths by coming through interfaces such as UART, SMBUS, USB, etc. Alternatively, attackers might be able to bypass existing protections by exploiting unprotected, shadow registers. Shadow registers and mirror registers typically refer to registers that can be accessed from multiple addresses. Writing to or reading from the aliased/mirrored address has the same effect as writing to the address of the main register. They are typically implemented within an IP core or SoC to temporarily hold certain data. These data will later be updated to the main register, and both registers will be in synch. If the shadow registers are not access-protected, attackers could simply initiate transactions to the shadow registers and compromise system security."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1191",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-420",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-288",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1300",
              "name": "Improper Protection Against Physical Side Channels",
              "shortDescription": {
                "text": "The product is missing protections or implements insufficient protections against information leakage through physical channels such as power consumption, electromagnetic emissions (EME), acoustic emissions, or other physical attributes."
              },
              "fullDescription": {
                "text": "Physical properties of the hardware implementation such as power consumption or EME can result in data disclosure even if it is not possible to extract the information in the digital domain. Physical side channels such as power consumption, electromagnetic emissions (EME), and acoustic emissions have been well-studied for decades in the context of breaking implementations of cryptographic algorithms. These side-channels may be easily observed by an attacker with physical access to the device. Power, EME, and acoustic measurements obtained during hardware operation are correlated to data processed by the hardware, enabling recovery of secret keys and data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-203",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1301",
              "name": "Insufficient or Incomplete Data Removal within Hardware Component",
              "shortDescription": {
                "text": "The product's data removal process does not completely delete all data and potentially sensitive information within hardware components."
              },
              "fullDescription": {
                "text": "Physical properties of hardware devices, such as remanence of magnetic medial, residual charge of ROMs/RAMs, or screen burn-in may still retain sensitive data after a data removal process has taken place and power is removed. Recovering data after erasure or overwriting is possible due to a phenomenon called data remanence. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree such that even after the original data is erased that data can still be recovered through physical characterization of the memory cells."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-226",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1302",
              "name": "Missing Security Identifier",
              "shortDescription": {
                "text": "The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier."
              },
              "fullDescription": {
                "text": "In a System-On-Chip (SoC), various integrated circuits and hardware engines generate transactions such as to access (reads/writes) assets or perform certain actions (e.g., reset, fetch, compute). A typical transaction is comprised of source identity (to identify the originator of the transaction) and a destination identity (to route the transaction to the respective entity) in addition to much more information in the message. Sometimes the transactions are qualified with a Security Identifier. This Security Identifier helps the destination agent decide on the set of allowed or disallowed actions. A common weakness that can exist in such transaction schemes is that the source agent fails to include the necessary, security identifier with the transaction. Because of the missing security identifier, the destination agent might drop the message, thus resulting in Denial-of-Service (DoS), or get confused in its attempt to execute the given action, which confusion could result in privilege escalation or a gain of unintended access."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1294",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1303",
              "name": "Non-Transparent Sharing of Microarchitectural Resources",
              "shortDescription": {
                "text": "Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts."
              },
              "fullDescription": {
                "text": "Modern processors use techniques such as out-of-order execution, speculation, prefetching, data forwarding, and caching to increase performance. Details about the implementation of these techniques are hidden from the programmer’s view. This is problematic when the hardware implementation of these techniques results in resources being shared across supposedly isolated contexts. Contention for shared resources between different contexts opens covert channels that allow malicious programs executing in one context to recover information from another context. Some examples of shared micro-architectural resources that have been used to leak information between contexts are caches, branch prediction logic, and load or store buffers. Speculative and out-of-order execution provides an attacker with increased control over which data is leaked through the covert channel. If the extent of resource sharing between contexts in the design microarchitecture is undocumented, it is extremely difficult to ensure system assets are protected against disclosure."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1189",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-203",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1304",
              "name": "Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation",
              "shortDescription": {
                "text": "The product performs a power save/restore operation, but it does not ensure that the integrity of the configuration state is maintained and/or verified between the beginning and ending of the operation."
              },
              "fullDescription": {
                "text": "Before powering down, the Intellectual Property (IP) saves current state (S) to persistent storage such as flash or always-on memory in order to optimize the restore operation. During this process, an attacker with access to the persistent storage may alter (S) to a configuration that could potentially modify privileges, disable protections, and/or cause damage to the hardware. If the IP does not validate the configuration state stored in persistent memory, upon regaining power or becoming operational again, the IP could be compromised through the activation of an unwanted/harmful configuration."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-345",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1271",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1310",
              "name": "Missing Ability to Patch ROM Code",
              "shortDescription": {
                "text": "Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state."
              },
              "fullDescription": {
                "text": "A System or System-on-Chip (SoC) that implements a boot process utilizing security mechanisms such as Root-of-Trust (RoT) typically starts by executing code from a Read-only-Memory (ROM) component. The code in ROM is immutable, hence any security vulnerabilities discovered in the ROM code can never be fixed for the systems that are already in use. A common weakness is that the ROM does not have the ability to patch if security vulnerabilities are uncovered after the system gets shipped. This leaves the system in a vulnerable state where an adversary can compromise the SoC."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1329",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1277",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1311",
              "name": "Improper Translation of Security Attributes by Fabric Bridge",
              "shortDescription": {
                "text": "The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another."
              },
              "fullDescription": {
                "text": "A bridge allows IP blocks supporting different fabric protocols to be integrated into the system. Fabric end-points or interfaces usually have dedicated signals to transport security attributes. For example, HPROT signals in AHB, AxPROT signals in AXI, and MReqInfo and SRespInfo signals in OCP. The values on these signals are used to indicate the security attributes of the transaction. These include the immutable hardware identity of the controller initiating the transaction, privilege level, and type of transaction (e.g., read/write, cacheable/non-cacheable, posted/non-posted). A weakness can arise if the bridge IP block, which translates the signals from the protocol used in the IP block endpoint to the protocol used by the central bus, does not properly translate the security attributes. As a result, the identity of the initiator could be translated from untrusted to trusted or vice-versa. This could result in access-control bypass, privilege escalation, or denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1312",
              "name": "Missing Protection for Mirrored Regions in On-Chip Fabric Firewall",
              "shortDescription": {
                "text": "The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions."
              },
              "fullDescription": {
                "text": "Few fabrics mirror memory and address ranges, where mirrored regions contain copies of the original data. This redundancy is used to achieve fault tolerance. Whatever protections the fabric firewall implements for the original region should also apply to the mirrored regions. If not, an attacker could bypass existing read/write protections by reading from/writing to the mirrored regions to leak or corrupt the original data."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1251",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1313",
              "name": "Hardware Allows Activation of Test or Debug Logic at Runtime",
              "shortDescription": {
                "text": "During runtime, the hardware allows for test or debug logic (feature) to be activated, which allows for changing the state of the hardware. This feature can alter the intended behavior of the system and allow for alteration and leakage of sensitive data by an adversary."
              },
              "fullDescription": {
                "text": "An adversary can take advantage of test or debug logic that is made accessible through the hardware during normal operation to modify the intended behavior of the system. For example, an accessible Test/debug mode may allow read/write access to any system data. Using error injection (a common test/debug feature) during a transmit/receive operation on a bus, data may be modified to produce an unintended message. Similarly, confidentiality could be compromised by such features allowing access to secrets."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1314",
              "name": "Missing Write Protection for Parametric Data Values",
              "shortDescription": {
                "text": "The device does not write-protect the parametric data values for sensors that scale the sensor value, allowing untrusted software to manipulate the apparent result and potentially damage hardware or cause operational failure."
              },
              "fullDescription": {
                "text": "Various sensors are used by hardware to detect any devices operating outside of the design limits. The threshold limit values are set by hardware fuses or trusted software such as the BIOS. These limits may be related to thermal, power, voltage, current, and frequency. Hardware mechanisms may be used to protect against alteration of the threshold limit values by untrusted software. The limit values are generally programmed in standard units for the type of value being read. However, the hardware-sensor blocks may report the settings in different units depending upon sensor design and operation. The raw sensor output value is converted to the desired units using a scale conversion based on the parametric data programmed into the sensor. The final converted value is then compared with the previously programmed limits. While the limit values are usually protected, the sensor parametric data values may not be. By changing the parametric data, safe operational limits may be bypassed."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-862",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1299",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1315",
              "name": "Improper Setting of Bus Controlling Capability in Fabric End-point",
              "shortDescription": {
                "text": "The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric."
              },
              "fullDescription": {
                "text": "To support reusability, certain fabric interfaces and end points provide a configurable register bit that allows IP blocks connected to the controller to access other peripherals connected to the fabric. This allows the end point to be used with devices that function as a controller or responder. If this bit is set by default in hardware, or if firmware incorrectly sets it later, a device intended to be a responder on a fabric is now capable of controlling transactions to other devices and might compromise system security."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1316",
              "name": "Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges",
              "shortDescription": {
                "text": "The address map of the on-chip fabric has protected and unprotected regions overlapping, allowing an attacker to bypass access control to the overlapping portion of the protected region."
              },
              "fullDescription": {
                "text": "Various ranges can be defined in the system-address map, either in the memory or in Memory-Mapped-IO (MMIO) space. These ranges are usually defined using special range registers that contain information, such as base address and size. Address decoding is the process of determining for which range the incoming transaction is destined. To ensure isolation, ranges containing secret data are access-control protected. Occasionally, these ranges could overlap. The overlap could either be intentional (e.g. due to a limited number of range registers or limited choice in choosing size of the range) or unintentional (e.g. introduced by errors). Some hardware designs allow dynamic remapping of address ranges assigned to peripheral MMIO ranges. In such designs, intentional address overlaps can be created through misconfiguration by malicious software. When protected and unprotected ranges overlap, an attacker could send a transaction and potentially compromise the protections in place, violating the principle of least privilege."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1317",
              "name": "Missing Security Checks in Fabric Bridge",
              "shortDescription": {
                "text": "A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master. Similarly, it does not check the hardware identity of the transaction received from the slave interface of the bridge."
              },
              "fullDescription": {
                "text": "In hardware designs, different IP blocks are connected through interconnect-bus fabrics (e.g. AHB and OCP). Within a System on Chip (SoC), the IP block subsystems could be using different bus protocols. In such a case, the IP blocks are then linked to the central bus (and to other IP blocks) through a fabric bridge. Bridges are used as bus-interconnect-routing modules that link different protocols or separate, different segments of the overall SoC interconnect. For overall system security, it is important that the access-control privileges associated with any fabric transaction are consistently maintained and applied, even when they are routed or translated by a fabric bridge. A bridge that is connected to a fabric without security features forwards transactions to the slave without checking the privilege level of the master and results in a weakness in SoC access-control security. The same weakness occurs if a bridge does not check the hardware identity of the transaction received from the slave interface of the bridge."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1318",
              "name": "Missing Support for Security Features in On-chip Fabrics or Buses",
              "shortDescription": {
                "text": "On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control."
              },
              "fullDescription": {
                "text": "Certain on-chip fabrics and buses, especially simple and low-power buses, do not support security features. Apart from data transfer and addressing ports, some fabrics and buses do not have any interfaces to transfer privilege, immutable identity, or any other security attribute coming from the bus master. Similarly, they do not have dedicated signals to transport security-sensitive data from slave to master, such as completions for certain types of transactions. Few other on-chip fabrics and buses support security features and define specific interfaces/signals for transporting security attributes from master to slave or vice-versa. However, including these signals is not mandatory and could be left unconfigured when generating the register-transfer-level (RTL) description for the fabric. Such fabrics or buses should not be used to transport any security attribute coming from the bus master. In general, peripherals with security assets should not be connected to such buses before the transaction from the bus master reaches the bus, unless some form of access control is performed at a fabric bridge or another intermediate module."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1319",
              "name": "Improper Protection against Electromagnetic Fault Injection (EM-FI)",
              "shortDescription": {
                "text": "The device is susceptible to electromagnetic fault injection attacks, causing device internal information to be compromised or security mechanisms to be bypassed."
              },
              "fullDescription": {
                "text": "Electromagnetic fault injection may allow an attacker to locally and dynamically modify the signals (both internal and external) of an integrated circuit. EM-FI attacks consist of producing a local, transient magnetic field near the device, inducing current in the device wires. A typical EMFI setup is made up of a pulse injection circuit that generates a high current transient in an EMI coil, producing an abrupt magnetic pulse which couples to the target producing faults in the device, which can lead to: Bypassing security mechanisms such as secure JTAG or Secure Boot Leaking device information Modifying program flow Perturbing secure hardware modules (e.g. random number generators)"
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1320",
              "name": "Improper Protection for Out of Bounds Signal Level Alerts",
              "shortDescription": {
                "text": "Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts."
              },
              "fullDescription": {
                "text": "Hardware sensors are used to detect whether a device is operating within design limits. The threshold values for these limits are set by hardware fuses or trusted software such as a BIOS. Modification of these limits may be protected by hardware mechanisms. When device sensors detect out of bound conditions, alert signals may be generated for remedial action, which may take the form of device shutdown or throttling. Warning signals that are not properly secured may be disabled or used to generate spurious alerts, causing degraded performance or denial-of-service (DoS). These alerts may be masked by untrusted software. Examples of these alerts involve thermal and power sensor alerts."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1321",
              "name": "Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')",
              "shortDescription": {
                "text": "The software receives input from an upstream component that specifies attributes that are to be initialized or updated in an object, but it does not properly control modifications of attributes of the object prototype."
              },
              "fullDescription": {
                "text": "By adding or modifying attributes of an object prototype, it is possible to create attributes that exist on every object, or replace critical attributes with malicious ones. This can be problematic if the software depends on existence or non-existence of certain attributes, or uses pre-defined attributes of object prototype (such as hasOwnProperty, toString or valueOf). This weakness is usually exploited by using a special attribute of objects called proto, constructor or prototype. Such attributes give access to the object prototype. This weakness is often found in code that assigns object attributes based on user input, or merges or clones objects recursively."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-915",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-471",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1322",
              "name": "Use of Blocking Code in Single-threaded, Non-blocking Context",
              "shortDescription": {
                "text": "The product uses a non-blocking model that relies on a single threaded process for features such as scalability, but it contains code that can block when it is invoked."
              },
              "fullDescription": {
                "text": "When an attacker can directly invoke the blocking code, or the blocking code can be affected by environmental conditions that can be influenced by an attacker, then this can lead to a denial of service by causing unexpected hang or freeze of the code. Examples of blocking code might be an expensive computation or calling blocking library calls, such as those that perform exclusive file operations or require a successful network operation. Due to limitations in multi-thread models, single-threaded models are used to overcome the resource constraints that are caused by using many threads. In such a model, all code should generally be non-blocking. If blocking code is called, then the event loop will effectively be stopped, which can be undesirable or dangerous. Such models are used in Python asyncio, Vert.x, and Node.js, or other custom event loop code."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-834",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-835",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1323",
              "name": "Improper Management of Sensitive Trace Data",
              "shortDescription": {
                "text": "Trace data collected from several sources on the System-on-Chip (SoC) is stored in unprotected locations or transported to untrusted agents."
              },
              "fullDescription": {
                "text": "To facilitate verification of complex System-on-Chip (SoC) designs, SoC integrators add specific IP blocks that trace the SoC's internal signals in real-time. This infrastructure enables observability of the SoC's internal behavior, validation of its functional design, and detection of hardware and software bugs. Such tracing IP blocks collect traces from several sources on the SoC including the CPU, crypto coprocessors, and on-chip fabrics. Traces collected from these sources are then aggregated inside trace IP block and forwarded to trace sinks, such as debug-trace ports that facilitate debugging by external hardware and software debuggers. Since these traces are collected from several security-sensitive sources, they must be protected against untrusted debuggers. If they are stored in unprotected memory, an untrusted software debugger can access these traces and extract secret information. Additionally, if security-sensitive traces are not tagged as secure, an untrusted hardware debugger might access them to extract confidential information."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1324",
              "name": "Sensitive Information Accessible by Physical Probing of JTAG Interface",
              "shortDescription": {
                "text": "Sensitive information in clear text on the JTAG interface may be examined by an eavesdropper, e.g. by placing a probe device on the interface such as a logic analyzer, or a corresponding software technique."
              },
              "fullDescription": {
                "text": "On a debug configuration with a remote host, unbeknownst to the host/user, an attacker with physical access to a target system places a probing device on the debug interface or software related to the JTAG port e.g. device driver. While the authorized host/user performs sensitive operations to the target system, the attacker uses the probe to collect the JTAG traffic."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-300",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1325",
              "name": "Improperly Controlled Sequential Memory Allocation",
              "shortDescription": {
                "text": "The product manages a group of objects or resources and performs a separate memory allocation for each object, but it does not properly limit the total amount of memory that is consumed by all of the combined objects."
              },
              "fullDescription": {
                "text": "While the product might limit the amount of memory that is allocated in a single operation for a single object (such as a malloc of an array), if an attacker can cause multiple objects to be allocated in separate operations, then this might cause higher total memory consumption than the developer intended, leading to a denial of service."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-770",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-789",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-476",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "canFollow"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1326",
              "name": "Missing Immutable Root of Trust in Hardware",
              "shortDescription": {
                "text": "A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code."
              },
              "fullDescription": {
                "text": "A System-on-Chip (SoC) implements secure boot by verifying or authenticating signed boot code. The signing of the code is achieved by an entity that the SoC trusts. Before executing the boot code, the SoC verifies that the code or the public key with which the code has been signed has not been tampered with. The other data upon which the SoC depends are system-hardware settings in fuses such as whether “Secure Boot is enabled”. These data play a crucial role in establishing a Root of Trust (RoT) to execute secure-boot flows. One of the many ways RoT is achieved is by storing the code and data in memory or fuses. This memory should be immutable, i.e., once the RoT is programmed/provisioned in memory, that memory should be locked and prevented from further programming or writes. If the memory contents (i.e., RoT) are mutable, then an adversary can modify the RoT to execute their choice of code, resulting in a compromised secure boot. Note that, for components like ROM, secure patching/update features should be supported to allow authenticated and authorized updates in the field."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1327",
              "name": "Binding to an Unrestricted IP Address",
              "shortDescription": {
                "text": "The product assigns the address 0.0.0.0 for a database server, a cloud service/instance, or any computing resource that communicates remotely."
              },
              "fullDescription": {
                "text": "When a server binds to the address 0.0.0.0, it allows connections from every IP address on the local machine, effectively exposing the server to every possible network. This might be much broader access than intended by the developer or administrator, who might only be expecting the server to be reachable from a single interface/network."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1328",
              "name": "Security Version Number Mutable to Older Versions",
              "shortDescription": {
                "text": "Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions."
              },
              "fullDescription": {
                "text": "A System-on-Chip (SoC) implements secure boot or verified boot. It might support a security version number, which prevents downgrading the current firmware to a vulnerable version. Once downgraded to a previous version, an adversary can launch exploits on the SoC and thus compromise the security of the SoC. These downgrade attacks are also referred to as roll-back attacks. The security version number must be stored securely and persistently across power-on resets. A common weakness is that the security version number is modifiable by an adversary, allowing roll-back or downgrade attacks or, under certain circumstances, preventing upgrades (i.e. Denial-of-Service on upgrades). In both cases, the SoC is in a vulnerable state."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-285",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-757",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1329",
              "name": "Reliance on Component That is Not Updateable",
              "shortDescription": {
                "text": "The product contains a component that cannot be updated or patched in order to remove vulnerabilities or significant bugs."
              },
              "fullDescription": {
                "text": "If the component is discovered to contain a vulnerability or critical bug, but the issue cannot be fixed using an update or patch, then the product's operator will not be able to protect against the issue. This could leave the product open to attacker exploitation or critical operation failures. While hardware can be prone to this weakness, software systems can also be affected, such as when a third-party driver or library is no longer actively maintained or supported but is still critical for the required functionality."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-664",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1330",
              "name": "Remanent Data Readable after Memory Erase",
              "shortDescription": {
                "text": "Confidential information stored in memory circuits is readable or recoverable after being cleared or erased."
              },
              "fullDescription": {
                "text": "Data remanence occurs when stored, memory content is not fully lost after a memory-clear or -erase operation. Confidential memory contents can still be readable through data remanence in the hardware. Data remanence can occur because of performance optimization or memory organization during 'clear' or 'erase' operations, like a design that allows the memory-organization metadata (e.g., file pointers) to be erased without erasing the actual memory content. To protect against this weakness, memory devices will often support different commands for optimized memory erase and explicit secure erase. Data remanence can also happen because of the physical properties of memory circuits in use. For example, static, random-access-memory (SRAM) and dynamic, random-access-memory (DRAM) data retention is based on the charge retained in the memory cell, which depends on factors such as power supply, refresh rates, and temperature. Other than explicit erase commands, self-encrypting, secure-memory devices can also support secure erase through cryptographic erase commands. In such designs, only the decryption keys for encrypted data stored on the device are erased. That is, the stored data are always remnant in the media after a cryptographic erase. However, only the encrypted data can be extracted. Thus, protection against data recovery in such designs relies on the strength of the encryption algorithm."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1301",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1331",
              "name": "Improper Isolation of Shared Resources in Network On Chip",
              "shortDescription": {
                "text": "The product does not isolate or incorrectly isolates its on-chip-fabric and internal resources such that they are shared between trusted and untrusted agents, creating timing channels."
              },
              "fullDescription": {
                "text": "Typically, network on chips (NoC) have many internal resources that are shared between packets from different, trust domains. These resources include internal buffers, crossbars and switches, individual ports, and channels. The sharing of resources causes contention and introduces interference between differently trusted domains, which poses a security threat via a timing channel allowing attackers to infer data that belongs to a trusted agent. This may also result in introducing network interference resulting in degraded throughput and latency."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-653",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-1189",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1332",
              "name": "Insufficient Protection Against Instruction Skipping Via Fault Injection",
              "shortDescription": {
                "text": "The device is missing or incorrectly implements circuitry or sensors to detect and mitigate CPU instruction skips that can be caused by fault injection."
              },
              "fullDescription": {
                "text": "Fault Injection is a technique used by adversaries to alter the operating conditions of hardware so that unexpected behavior occurs. Generally, this is accomplished by causing the device to operate outside of its expected conditions or by inducing electrical disturbances in the device. A weakness may arise in systems that do not properly protect against common fault injection techniques targeting the skipping of security critical instructions. In practice, application code may contain conditional branches that are security-sensitive (e.g., accepting or rejecting a user-provided password. These conditional branches are typically implemented by a single conditional branch instruction in the program binary which, if skipped through fault injection, may lead to flipping the branch condition - i.e., causing the wrong security-sensitive branch to be taken. This affects processes such as firmware authentication, password verification, and other security-sensitive decision points."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-1247",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "relevant"
                  ]
                },
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1334",
              "name": "Unauthorized Error Injection Can Degrade Hardware Redundancy",
              "shortDescription": {
                "text": "An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode."
              },
              "fullDescription": {
                "text": "To ensure the performance and functional reliability of certain components, hardware designers can implement hardware blocks for redundancy in the case that others fail. This redundant block can be prevented from performing as intended if the design allows unauthorized agents to inject errors into it. In this way, a path with injected errors may become unavailable to serve as a redundant channel. This may put the system into a degraded mode of operation which could be exploited by a subsequent attack."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-284",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CWE-1338",
              "name": "Improper Protections Against Hardware Overheating",
              "shortDescription": {
                "text": "A hardware device is missing or has inadequate protection features to prevent overheating."
              },
              "fullDescription": {
                "text": "Hardware, electrical circuits, and semiconductor silicon have thermal side effects, such that some of the energy consumed by the device gets dissipated as heat and increases the temperature of the device. For example, in semiconductors, higher-operating frequency of silicon results in higher power dissipation and heat. The leakage current in CMOS circuits increases with temperature, and this creates positive feedback that can result in thermal runaway and damage the device permanently. Any device lacking protections such as thermal sensors, adequate platform cooling or thermal insulation is susceptible to attacks by malicious software that might deliberately operate the device in modes that result in overheating. This can be used as an effective denial of service (DoS) or permanent denial of service (PDoS) attack. Depending on the type of hardware device and its expected usage, such thermal overheating can also cause safety hazards and reliability issues. Note that battery failures can also cause device overheating but the mitigations and examples included in this submission cannot reliably protect against a battery failure. There can be similar weaknesses with lack of protection from attacks based on overvoltage or overcurrent conditions. However, thermal heat is generated by hardware operation and the device should implement protection from overheating."
              },
              "relationships": [
                {
                  "target": {
                    "id": "CWE-693",
                    "toolComponent": {
                      "name": "CWE"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "contents": ["localizedData","nonLocalizedData"],
          "isComprehensive": true,
          "minimumRequiredLocalizedDataSemanticVersion": "4.3",
          "supportedTaxonomies": []
        }
      ]
    }
  ]
}